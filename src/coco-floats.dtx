% \chapter{coco-floats.dtx}\DescriptionDomain{float}
%
% Output driver for \lstinline{coco-floats.sty}.
%    \begin{macrocode}[numbers=none,gobble=1]
%<*floats>
%    \end{macrocode}
%
% This module provides handlers for floating objects like tables and
% figures common to all {\CoCoTeX} projects
%
% Note that we take the term ``Float'' quite liberally: ``Floats''
% basicly mean \textit{``things that may have a caption and which are
% somewhat outside the main text body''}, whether they actually float
% (i.\,e., moved into the \lstinline{\@toplist} or
% \lstinline{\@botlist} by {\LaTeX}), or not.
%
%    \begin{macrocode}
%%
%% module for CoCoTeX that extends floating objects.
%%
%% Maintainer: p.schulz@le-tex.de
%%
%% lualatex  -  texlive > 2019
%%
\NeedsTeXFormat{LaTeX2e}[2018/12/01]
\ProvidesPackage{coco-floats}
    [\filedate \fileversion CoCoTeX floats module]
\DeclareOptionX{nofigs}{\global\let\ccf@no@figs\relax}
\ProcessOptionsX
%    \end{macrocode}
%
%
% \section{Package Setup}
%
% \subsection{Hard requirements}
%
% For the list-of mechanism, we need the {\CoCoTeX} common module,
% which also loads the {\CoCoTeX} kernel module.
%    \begin{macrocode}
\RequirePackage{coco-common}
%    \end{macrocode}
% For landscape images, we load the \lstinline{rotating} package.
%    \begin{macrocode}
\RequirePackage{rotating}
%    \end{macrocode}
% SInce file names form word often contain spaces and periods, we also
% include the \lstinline{grffile} package.
%    \begin{macrocode}
\RequirePackage{grffile}
%    \end{macrocode}
% In order to save footnotes in captions, we require the
% \lstinline{footnote} package.
%    \begin{macrocode}
\RequirePackage{footnote}
%    \end{macrocode}
% The \lstinline{adjustbox} package is needed to restrict the maximum
% dimensions of image files.
%    \begin{macrocode}
\RequirePackage[Export]{adjustbox}
%    \end{macrocode}
% Finally, we need the stfloats package to allow bottom placed images
% on pages that start \LaTeX's twocolumn mode.
%    \begin{macrocode}
\usepackage{stfloats}
\setcounter{dblbotnumber}{5}
%    \end{macrocode}
%
%
% \subsection{Adjustments at the Beginning of the Document}
%
%    \begin{macrocode}
\AtBeginDocument{%
%    \end{macrocode}
% The first adjustment implements the \lstinline{nofigs} option by
% deactivating the \lstinline{\includegraphics} macro.
%    \begin{macrocode}
  \ifx\ccf@no@figs\relax
    \renewcommand\includegraphics[2][]{}%
  \fi
%    \end{macrocode}
% \begin{macro}{\ccf@ltx@includegraphics} stores the final definition
%   of the \lstinline{\includegraphics} macro for later use.
%    \begin{macrocode}
  \global\let\ccf@ltx@includegraphics\includegraphics
%    \end{macrocode}
% \end{macro}
% Adjustments to the \lstinline{htmltabs} package, if it is used:
%    \begin{macrocode}
  \@ifpackageloaded{htmltabs}
    {\global\let\cc@uses@htmltabs\relax
     \def\ht@adjust@linewidth{%
       \advance\ht@h@offset\leftskip
       \advance\ht@h@offset\@totalleftmargin
       \advance\linewidth-\rightskip
     }%
    }{}%
%    \end{macrocode}
% In order to catch the actual dimensions of the float box, we need to
% hook into \LaTeX's \lstinline{\@endfloatbox} macro. This macro is
% low-level enough so it covers regular, double-column, and rotated
% floats. Those values will later be written into the \lstinline{.aux}
% file for each float. The values, together with the float's overall
% width, are stored in a macro called
% \lstinline{cc-float-\the\ccf@int@cnt-dimens}.
%    \begin{macrocode}
  \gappto\@endfloatbox{%
    \global\ccf@total@height=\ht\@currbox\relax%
    \global\ccf@total@depth=\dp\@currbox\relax%
  }%
}%
%    \end{macrocode}
%
%
% \subsection{Document Class-Option Overrides}
%
% Since CoCoTeX is mainly developed for automatic typesetting and
% float positioning, we set rather high tolerances for macros from
% \LaTeX's standard \lstinline{.clo} files:
%    \begin{macrocode}
\def\topfraction{0.9}
\def\textfraction{0.1}
\def\bottomfraction{0.8}
\def\totalnumber{8}
\def\topnumber{8}
\def\bottomnumber{8}
\def\floatpagefraction{0.8}
\@fptop\z@
\@fpbot\@flushglue
%    \end{macrocode}
%
%
% \subsection{Internal Registers}
%
% \begin{macro}{\ccf@floatbox} is for measuring the dimensions of the
%   whole float
%    \begin{macrocode}
\newbox  \ccf@floatbox
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ccf@sub@box} is for measuring a single sub-float.
%    \begin{macrocode}
\newbox  \ccf@sub@box
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ccf@int@cnt} is an internal global counter that
%   numbers all top-level floats sequentially.
%    \begin{macrocode}
\newcount\ccf@int@cnt      \ccf@int@cnt\z@
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ccSubFloatCnt} counts the sub-floats within a parent
%   float Container instance.
%    \begin{macrocode}
\newcount\ccSubFloatCnt \ccSubFloatCnt=\z@\relax
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ccf@int@sub@flt@cnt} is a temporary counter that
%   holds the total number of subfloats inside a parent float
%   Container instance.
%    \begin{macrocode}
\newcount\ccf@int@sub@flt@cnt  \ccf@int@sub@flt@cnt\z@
%    \end{macrocode}
% \end{macro}
% Various dimension registers that store dimensions and spaces of
% floats and sub-floats:
% \begin{macro}{\ccf@sub@maxheight} stores and self-updates the
%   height of the largest sub-float inside a float
%    \begin{macrocode}
\newdimen\ccf@sub@maxheight   \ccf@sub@maxheight=\z@\relax
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ccf@sub@sep} is the space between sub-floats
%    \begin{macrocode}
\newdimen\ccf@sub@sep         \ccf@sub@sep=\fboxsep\relax
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ccf@total@width} stores the cumulated overall
%   width of the entire float
%    \begin{macrocode}
\newdimen\ccf@total@width  \ccf@total@width=\textwidth\relax
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ccf@calc@width} is an internal dimension used
%   to calculate the ratio between mutiple sub-floats that should be
%   scaled to the same height
%    \begin{macrocode}
\newdimen\ccf@total@height \ccf@total@height=\textwidth\relax
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ccf@total@height} is the overall height of a float
%    \begin{macrocode}
\newdimen\ccf@total@depth  \ccf@total@depth=\textwidth\relax
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ccf@total@depth} is the overall depth of a float
%    \begin{macrocode}
\newdimen\ccf@calc@width      \ccf@calc@width=\ccf@total@width\relax
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ccf@sep@top} holds the actual vertical skip inserted
%   at the top of a float. If the float is floating, this equals to
%   \lstinline{intext-skip}, or \lstinline{float-skip}, otherwise.
%    \begin{macrocode}
\newskip\ccf@sep@top      \ccf@sep@top=\z@\relax
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ccf@sep@bottom} is the same for the bottom vertical
%   skip.
%    \begin{macrocode}
\newskip\ccf@sep@bottom   \ccf@sep@bottom=\z@\relax
%    \end{macrocode}
% \end{macro}
% Internal dimensions for the horizontal margins:
% \begin{macro}{\ccf@margin@r} holds the right side margin
%    \begin{macrocode}
\newdimen\ccf@margin@r       \ccf@margin@r=\z@\relax
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ccf@margin@l} holds the left side margin
%    \begin{macrocode}
\newdimen\ccf@margin@l       \ccf@margin@l=\z@\relax
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ccf@margin@i} holds the inner margin
%    \begin{macrocode}
\newdimen\ccf@margin@i       \ccf@margin@i=\z@\relax
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ccf@margin@o} holds the outer margin
%    \begin{macrocode}
\newdimen\ccf@margin@o       \ccf@margin@o=\z@\relax
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\if@ccf@break@capt} is a locally adjustable switch
%     that indicates whether captions are allowed to break across
%     pages (\texttt{true}) or not (\texttt{false}).
%    \begin{macrocode}
\newif\if@ccf@break@capt   \@ccf@break@captfalse
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\if@ccf@sameheight} determins if subfloats should be
%     scaled such that they are all the same height.
%    \begin{macrocode}
\newif\if@ccf@sameheight   \@ccf@sameheighttrue
%    \end{macrocode}
% \end{macro}
%
%
% \section{Internal macros}
%
% \subsection{Generic resetter}
%
% Some macros are re-evaluated for each new top-level float.
% \begin{macro}{\ccf@reset@defaults} resets the those macros. It is
%   called at the very beginning of each new float.
%    \begin{macrocode}
\def\ccf@reset@defaults{%
  \global\ccSubFloatCnt=\z@
  \global\ccf@total@width=\z@
  \global\let\ccf@has@capt@top\@undefined
  \global\let\ccf@has@capt@bottom\@undefined
  \global\let\ccf@has@subcapt@top\@undefined
  \global\let\ccf@has@subcapt@bottom\@undefined
  \global\let\ccf@sub@contentsline@store\@empty
  \global\ccf@sub@maxheight=\z@\relax
  \@tempcnta=\z@\relax
  \cc@reset@components{\cc@cur@cont}%
  \let\ccf@prefix\@empty
  \let\ht@cur@element\ccfCapType
  \global\let\ccf@current@class\relax
  \global\let\ccf@landscape\relax
}
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Wrapper for \LaTeX's Native float Environments}
%
% \begin{macro}{\ccf@set@env} determines the low-level {\LaTeX}
%   float environment depending on orientation and document options.
%   If no \lstinline{float-pos} is given (implicitely or determined),
%   the object is not treated as a float at all.
%    \begin{macrocode}
\def\ccf@set@env{%
  \ifx\ccf@floatpos\@empty
    \let\ccf@begin@env\bgroup
    \let\ccf@end@env\egroup
  \else
    \ifx\ccf@landscape\@empty
      \edef\ccf@env@name{sideways\ccfCapType}%
       \edef\ccf@begin@env{\noexpand\begin{\ccf@env@name\ifx\ccf@do@dbl\relax*\fi}}%
       \edef\ccf@end@env{\noexpand\end{\ccf@env@name\ifx\ccf@do@dbl\relax*\fi}}
   \else
      \edef\ccf@env@name{\ifx\ccf@do@dbl\relax dbl\fi float}%
      \edef\ccf@begin@env{\expandafter\noexpand\csname @x\ccf@env@name\endcsname {\ccfCapType}[\ccf@floatpos]}%
      \edef\ccf@end@env{\expandafter\noexpand\csname end@\ccf@env@name\endcsname}%
    \fi
  \fi}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ccf@get@seps} determines the top and bottom skips
%   dependent on float position and orientation\UsageProperty{intext-skip-top}\UsageProperty{float-skip-top}\UsageProperty{float-skip-bottom}\UsageProperty{intext-skip-bottom}
%    \begin{macrocode}
\def\ccf@get@seps{%
  \ifx\ccf@floatpos\@empty
    \expandafter\ccf@sep@top\dimexpr\ccUseProperty{intext-skip-top}\relax%
  \else
    \expandafter\ccf@sep@top\dimexpr\ccUseProperty{float-skip-top}\relax%
  \fi
  \ifx\ccf@landscape\relax
    \ifx\ccf@floatpos\@empty
      \expandafter\ccf@sep@bottom\dimexpr\ccUseProperty{intext-skip-bottom}\relax%
    \else
      \expandafter\ccf@sep@bottom\dimexpr\ccUseProperty{float-skip-bottom}\relax%
    \fi
  \fi}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ccf@set@*@sep} Hooks to apply top and bottom skips,
%   respectively.
%    \begin{macrocode}
\def\ccf@set@top@sep{\addvspace{\ccf@sep@top}}
\def\ccf@set@bot@sep{\addvspace{\ccf@sep@bottom}}
%    \end{macrocode}
% \end{macro}
%
%
% \section{The Generic float Container}
%
% Components in Containers that are derived from the abstract
% \texttt{float} are in fact all Counted Components, where top-level
% instances use 0 as their internal counter and sub-floats are counted
% incrementally. Thus, we can \textit{simplify} the \textbf{internal}
% names to \lstinline{<Componentname>-<Counter>}, which is done via a
% custom wrapper for the \UsageMacro{\cc@def@counted@comp} Component
% declarator.
% \begin{macro}{\ccfMakeComp} is a shortcut for float Component
%   declarations.
%   \begin{ArgList}
%   \item[1] is the generic name of the Component.
%   \end{ArgList}
%    \begin{macrocode}
\def\ccfMakeComp#1{%
  \cc@def@counted@comp{#1-\the\ccSubFloatCnt}{#1}{}{}%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ccfMakeCompL} is a shortcut to declare Float
%   Components together with their \lstinline{list-of} overrides.
%   \begin{ArgList}
%   \item[1] is the generic name of the Component.
%   \end{ArgList}
%    \begin{macrocode}
\def\ccfMakeCompL#1{%
  \ccfMakeComp{#1}%
  \ccfMakeComp{Listof#1}}
%    \end{macrocode}
% \end{macro}
%
% \DescribeContainer{float} is the main parent Container for all
% floats.
%    \begin{macrocode}
\ccDeclareContainer{float}{%
%    \end{macrocode}
%
%
% \subsection{Common Float Components}
%
%    \begin{macrocode}
  \ccDeclareType{Components}{%
%    \end{macrocode}
% First, we set the naming scheme of the internal Component macros
% which is then valid for all Component declarations by locally
% re-defining \UsageMacro{\cc@counted@comp@scheme}.
%    \begin{macrocode}
    \def\cc@counted@comp@scheme#1{#1-\the\ccSubFloatCnt}%
%    \end{macrocode}
% \begin{Component}{Content} is the main content holder of a float.
%    \begin{macrocode}
    \ccfMakeComp{Content}%
%    \end{macrocode}
% \end{Component}
% \begin{Component}{Caption} is the main caption of a float.
% \end{Component}
% \begin{Component}[OR]{ListofCaption} is the corresponding
%   list-of-entry
%    \begin{macrocode}
    \ccfMakeCompL{Caption}%
%    \end{macrocode}
% \end{Component}
% \begin{Component}{Legend} is a legend to a float.
% \end{Component}
% \begin{Component}[OR]{ListofLegend} is the corresponding list-of-entry
%    \begin{macrocode}
    \ccfMakeCompL{Legend}%
%    \end{macrocode}
% \end{Component}
% \begin{Component}{Source} is the source of a float.
% \end{Component}
% \begin{Component}[OR]{ListofSource} is the corresponding list-of-entry
%    \begin{macrocode}
    \ccfMakeCompL{Source}%
%    \end{macrocode}
% \end{Component}
% \begin{Component}{Number} is the counter of the float (including the label)
% \end{Component}
% \begin{Component}[OR]{ListofNumber} is the corresponding list-of-entry
%    \begin{macrocode}
    \ccfMakeCompL{Number}%
%    \end{macrocode}
% \end{Component}
% \begin{Component}{RefLabel} is the float's ID used for
%   cross-references (replaces \LaTeX's \lstinline{\label} command)
%    \begin{macrocode}
    \ccfMakeComp{RefLabel}%
%    \end{macrocode}
% \end{Component}
% \begin{Component}[CL]{ListofEntry} is the Collection Component for
%   the entire Listof entry.
%    \begin{macrocode}
    \ccfMakeComp{ListofEntry}%
  }%
%    \end{macrocode}
% \end{Component}
%
%
% \subsection{Common Float Properties}
%
%    \begin{macrocode}
  \ccDeclareType{Properties}{%
%    \end{macrocode}
%
%
% \subsubsection{Placement and Spacing}
%
% \begin{Property}{intext-skip-top}{<skip>} vertical space between the
%   text body and following non-floating floats
%    \begin{macrocode}
    \ccSetProperty{intext-skip-top}{\intextsep}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{intext-skip-bottom}{<skip>} vertical space between
%   non-floating floats and the following text body
%    \begin{macrocode}
    \ccSetProperty{intext-skip-bottom}{\intextsep}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{float-skip-top}{<skip>} vertical space between text
%   body and following floating floats
%    \begin{macrocode}
    \ccSetProperty{float-skip-top}{\z@}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{float-skip-bottom}{<skip>} vertical space between floating
%   floats and following text body
%    \begin{macrocode}
    \ccSetProperty{float-skip-bottom}{\z@}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{sub-float-sep}{<skip>} horizontal space between
%   sub-floats
%    \begin{macrocode}
    \ccSetProperty{sub-float-sep}{\ccf@sub@sep}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{margin-inner}{<skip>} inner margins of floats in
%   twopage mode, i.\,e., left margin on odd pages and right margin on
%   even pages, respectively.
%    \begin{macrocode}
    \ccSetProperty{margin-inner}{\z@}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{margin-outer}{<skip>} outer margin of floats in
%   twopage mode, i.\,e., right margin on odd pages and left margin on
%   even pages, respectively.
%    \begin{macrocode}
    \ccSetProperty{margin-outer}{\z@}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{margin-left}{<skip>} horizontal space between the
%   left page area boundary and the float.
%    \begin{macrocode}
    \ccSetProperty{margin-left}{\z@}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{margin-right}{<skip>} horizontal space between the
%   right page area boundary and the float.
%    \begin{macrocode}
    \ccSetProperty{margin-right}{\z@}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{before-float}{<any>} is the code that is executed
%   before a float's content is evaluated.
%    \begin{macrocode}
    \ccSetProperty{before-float}{\parindent\z@}%
%    \end{macrocode}
% \end{Property}
%
%
% \subsubsection{Properties for Float-Type Handlers}
%
% \begin{Property}{subfloat-content}{<any>} is the material that is
%   put into the \lstinline{\ccf@sub@box} for further processing.
%    \begin{macrocode}
    \ccSetProperty{subfloat-content}{\ccUseComp{Content}}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{float-render}{<any>} the output routine for
%   top-level float type specific contents
%    \begin{macrocode}
    \ccSetProperty{float-render}{\ccUseComp{Content}}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{subfloat-render}{<any>} the output routine for
%   second-level float type specific contents.
%    \begin{macrocode}
    \ccSetProperty{subfloat-render}{\ccUseComp{Content}}%
%    \end{macrocode}
% \end{Property}
%
%
% \subsubsection{Properties for Captions}
%
% \begin{Property}{caption-face}{<any>} style applied to both top and
%   bottom placed captions
%    \begin{macrocode}
    \ccSetProperty{caption-face}{}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{caption-face-top}{<any>} style applied to top
%   placed captions only
%    \begin{macrocode}
    \ccSetProperty{caption-face-top}{}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{caption-face-bottom}{<any>} style applied to bottom
%   placed captions only
%    \begin{macrocode}
    \ccSetProperty{caption-face-bottom}{}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{source-face}{<any>} style applied to the printed
%   \lstinline{Source} Component.
%    \begin{macrocode}
    \ccSetProperty{source-face}{}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{legend-face}{<any>} style applied to the printed
%   \lstinline{Legend} Component.
%    \begin{macrocode}
    \ccSetProperty{legend-face}{}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{caption-sep-top}{<skip>} vertical space between top
%   caption and content, i.\,e., the skip \textit{after} the top
%   placed caption.
%    \begin{macrocode}
    \ccSetProperty{caption-sep-top}{\z@}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{caption-sep-top}{<skip>} vertical space between
%   bottom caption and content, i.e., the skip \textit{before} the
%   bottom placed caption.
%    \begin{macrocode}
    \ccSetProperty{caption-sep-bottom}{\z@}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{caption-top}{<any>} the content of the top placed
%   caption\UsageProperty{number-face}\UsageProperty{number-sep}
%    \begin{macrocode}
    \ccSetProperty{caption-top}{%
      \ccIfComp{Number}{{\ccUseProperty{number-face}\ccUseComp{Number}\ccUseProperty{number-sep}}}{}%
      \ccUseComp{Caption}%
    }%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{caption-bottom}{<any>} the content of the bottom
%   placed
%   caption\UsageProperty{legend-face}\UsageProperty{source-face}
%    \begin{macrocode}
    \ccSetProperty{caption-bottom}{%
      \ccIfComp{Legend}{{\ccUseProperty{legend-face}\ccUseComp{Legend}}}{}%
      \ccIfComp{Source}{%
        \ccIfComp{Legend}{\par\nopagebreak}{}%
          {\ccUseProperty{source-face}%
           \ccUseComp{Source}}}{}}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{subcaption-face}{<any>} the style of captions of
%   second level floats
%    \begin{macrocode}
    \ccPropertyLet{subcaption-face}{caption-face}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{subcaption-face-top}{<any>} the style of top placed
%   captions of second level floats\UsageProperty{caption-face-top}
%    \begin{macrocode}
    \ccSetProperty{subcaption-face-top}{\ccUseProperty{caption-face-top}}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{subcaption-face-bottom}{<any>} the style of bottom
%   placed captions of second level
%   floats\UsageProperty{caption-face-bottom}
%    \begin{macrocode}
    \ccSetProperty{subcaption-face-bottom}{\ccUseProperty{caption-face-bottom}}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{subcaption-add-sep-top}{<skip>} additional vertical
%   space between top caption and top sub-caption
%    \begin{macrocode}
    \ccSetProperty{subcaption-add-sep-top}{\z@}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{subcaption-add-sep-bottom}{<skip>} additional
%   vertical space between bottom sub-caption and bottom caption
%    \begin{macrocode}
    \ccSetProperty{subcaption-add-sep-bottom}{\z@}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{subcaption-sep-top}{<skip>} vertical space between
%   top placed sub-captions and content, i.\,e., the space
%   \textit{after} top placed
%   sub-captions.\UsageProperty{caption-sep-top}
%    \begin{macrocode}
    \ccSetProperty{subcaption-sep-top}{\ccUseProperty{caption-sep-top}}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{subcaption-sep-top}{<skip>} vertical space between
%   content and top placed sub-captions, i.\,e., the space before
%   bottom placed sub-captions.\UsageProperty{caption-sep-bottom}
%    \begin{macrocode}
    \ccSetProperty{subcaption-sep-bottom}{\ccUseProperty{caption-sep-bottom}}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{subcaption-top}{<any>} the content of top placed
%   sub-captions\UsageProperty{caption-top}
%    \begin{macrocode}
    \ccSetProperty{subcaption-top}{\ccUseProperty{caption-top}}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{subcaption-bottom}{<any>} the content of bottom
%   placed sub-captions\UsageProperty{caption-bottom}
%    \begin{macrocode}
    \ccSetProperty{subcaption-bottom}{\ccUseProperty{caption-bottom}}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{subcaption-valign-top}{[top|bottom|middle]}
%   vertical alignment of neighboring top-placed sub-captions
%    \begin{macrocode}
    \ccSetProperty{subcaption-valign-top}{top}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{subcaption-valign-bottom}{[top|bottom|middle]}
%   vertical alignment of neighboring bottom-placed sub-captions
%    \begin{macrocode}
    \ccSetProperty{subcaption-valign-bottom}{top}%
%    \end{macrocode}
% \end{Property}
%
%
% \subsubsection{Properties for Counters}
%
% \begin{Property}{auto-number-prefix}{<any>} Prefix for
%   auto-generated Number components
%    \begin{macrocode}
    \ccSetProperty{auto-number-prefix}{\csname\ccfCapType name\endcsname}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{auto-number-prefix-sep}{<any>} Separator between
%   the auto-generated number prefix and the auto-generated Number
%   component.
%    \begin{macrocode}
    \ccSetProperty{auto-number-prefix-sep}{~}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{numbering}{[auto|<any>]} if \texttt{auto}, float
%   counters in instances without the Number component are generated
%   automatically. Any other value suppresses auto-numbering.
%    \begin{macrocode}
    \ccSetProperty{numbering}{auto}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{numbering}{[auto|<any>]} if \texttt{auto}, subfloat
%   counters in instances without the Number component are generated
%   automatically. Any other value suppresses auto-numbering.
%
%   \textbf{Note}: this Property has only effect when subfloats are
%   second-level. In first-level sub-floats, the \texttt{numbering}
%   Property is used.
%    \begin{macrocode}
    \ccSetProperty{sub-numbering}{}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{number-sep}{<any>} separator bewteen the printed
%   float number and the caption
%    \begin{macrocode}
    \ccSetProperty{number-sep}{\enskip}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{number-face}{<any>} style of number, additional to
%   caption-format
%    \begin{macrocode}
    \ccSetProperty{number-face}{\bfseries}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{sub-number-sep}{<any>} separator between number and
%   caption in sub-floats
%    \begin{macrocode}
    \ccSetProperty{sub-number-sep}{\,}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{sub-number-style}{[arabic|Alph|alph|roman|Roman]}
%   numbering style for automatically generated subfloat counters
%    \begin{macrocode}
    \ccSetProperty{sub-number-style}{alph}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{sub-number-face}{<any>} style of the number of a
%   subfloat
%    \begin{macrocode}
    \ccSetProperty{sub-number-face}{}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{sub-number-before}{<any>} stuff that is put
%   immediately before the automatically generated subfloat counter
%    \begin{macrocode}
    \ccSetProperty{sub-number-before}{(}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{sub-number-before}{<any>} stuff that is put
%   immediately after the automatically generated subfloat counter
%    \begin{macrocode}
    \ccSetProperty{sub-number-after}{)}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{sub-number-format}{<any>} the format of the
%   number\UsageProperty{float-number}\UsageProperty{sub-number}\UsageProperty{sub-number-sep}
%    \begin{macrocode}
    \ccSetProperty{sub-number-format}{%
      \ccUseProperty{float-number}%
      \ccUseProperty{sub-number-sep}%
      \ccUseProperty{sub-number}}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{label-pos}{[top|bottom]} position of the cross
%   reference anchor, refering to top or bottom placed captions.
%    \begin{macrocode}
    \ccSetProperty{label-pos}{top}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{sublabel-pos}{[top|bottom]} position of the cross
%   reference anchor for sub-floats, refering to top or bottom placed
%   sub-captions.
%    \begin{macrocode}
    \ccSetProperty{sublabel-pos}{top}%
%    \end{macrocode}
% \end{Property}
%
% \subsubsection{Properties for List-Of Entries}
%
% \begin{Property}{list-of-page-sep}{<any>} separator between the
%   listof-entry and the page
%    \begin{macrocode}
    \ccSetProperty{list-of-page-sep}{\dotfill}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{list-of-number-face}{<any>} style of the
%   listof-entry
%    \begin{macrocode}
    \ccPropertyLet{list-of-number-face}{list-of-caption-face}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{list-of-number-sep}{<any>} separator between the
%   number and the listof entry.
%    \begin{macrocode}
    \ccSetProperty{list-of-number-sep}{\enskip}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{list-of-number-align}{[left|center|right]}
%   horizontal alignment of the listof number within its local hbox.
%    \begin{macrocode}
    \ccSetProperty{list-of-number-align}{left}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{list-of-number-format}{<any>} format of the number
%   in listof
%   entries.\UsageProperty{list-of-number-face}\UsageProperty{list-of-number-sep}
%    \begin{macrocode}
    \ccSetProperty{list-of-number-format}{%
      \bgroup
        \ccUseProperty{list-of-number-face}%
        \ccUseComp{ListofNumber}%
        \ccUseProperty{list-of-number-sep}%
      \egroup}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{list-of-parfillskip}{<skip>} parfillskip of an
%   entry in the listof
%    \begin{macrocode}
    \ccSetProperty{list-of-parfillskip}{-\rightskip}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{list-of-margin-right}{<skip>} right margin of the
%   listof entry
%    \begin{macrocode}
    \ccSetProperty{list-of-margin-right}{\@pnumwidth \@plus 1fil}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{list-of-margin-left}{[auto|<skip>]} right margin of
%   the listof entry
%    \begin{macrocode}
    \ccSetProperty{list-of-margin-left}{auto}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{list-of-indent}{[auto|<dimen>]} horizontal offset
%   of the first line of an listof-entry, relative to
%   \texttt{margin-left}.
%    \begin{macrocode}
    \ccSetProperty{list-of-indent}{auto}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{list-of-block}{<any>} format of the entire listof
%   entry.\UsageProperty{list-of-caption-sep}\UsageProperty{list-of-page-sep}
%    \begin{macrocode}
    \ccSetProperty{list-of-block}{%
      \ccUseProperty{list-of-caption-face}%
      \ccIfComp{ListofNumber}
        {\ccUseComp{list-of-hang-number}}
        {\leftskip0pt}%
      \ccUseComp{ListofCaption}%
      \ccUseProperty{list-of-page-sep}\ccUseComp{ListofPage}%
    }%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{list-of-before-entry}{<any>} material inserted at
%   the beginning of each listof
%   entry\UsageProperty{list-of-margin-left}\UsageProperty{list-of-margin-right}\UsageProperty{list-of-parfillskip}
%    \begin{macrocode}
    \ccSetProperty{list-of-before-entry}{%
      \ccGobble
      \leftskip\ccUseProperty{list-of-margin-left}\relax%
      \rightskip \ccUseProperty{list-of-margin-right}\relax%
      \parfillskip \ccUseProperty{list-of-parfillskip}\relax
      \parindent\z@
      \@afterindenttrue
      \interlinepenalty\@M
      \leavevmode
      \null\nobreak
    }% list-of-float appearance
%    \end{macrocode}
% \end{Property}
% \begin{Property}{list-of-after-entry}{<any>} material inserted at
%   the end of a listof entry.
%    \begin{macrocode}
    \ccSetProperty{list-of-after-entry}{\par}%
  }% /Properties
  \ccDeclareType{Attributes}{%
%    \end{macrocode}
% \begin{Attribute}{class}{<string>} is the class of the Float.
%    \begin{macrocode}
    \ccDeclareAttributeHandler{class}{\xdef\ccf@current@class{\ccAttrVal}}%
%    \end{macrocode}
% \end{Attribute}
% \begin{Attribute}{break-caption}{<bool>} whether or not the caption is
%   allowed to break across pages
%    \begin{macrocode}
    \ccDeclareAttributeHandler*{break-caption}[\@ccf@break@captfalse]{\@ccf@break@capttrue}%
%    \end{macrocode}
% \end{Attribute}
% \begin{Attribute}{float-pos}{[(h|t|p|b)*|h!]} the float position of
%   the float. \texttt{h!} means that the float is not actually
%   floating and is equivalent to omitting the Attribute.
%    \begin{macrocode}
    \ccDeclareAttributeHandler{float-pos}[\let\ccf@floatpos\@empty]{\ccf@attr@pos{\ccAttrVal}}%
%    \end{macrocode}
% \end{Attribute}
% \begin{Attribute}{orientation}{landscape} is whether the float is
%   rotated by 90° (landscape) or not (if omitted, default)
%    \begin{macrocode}
    \ccDeclareAttributeHandler{orientation}{\ccf@attr@orient{\ccAttrVal}}
%    \end{macrocode}
% \end{Attribute}
% \begin{Attribute}{debug}{<flag>} if set, additional debugging is
%   written into the shell and log file.
%    \begin{macrocode}
    \ccDeclareAttributeHandler*{debug}[\let\ccf@debug\relax]{\let\ccf@debug\ccf@attr@debug}
%    \end{macrocode}
% \end{Attribute}
% \begin{Attribute}{no-same-height}{<flag>} if set, the same-height
%   calculations are de-activated for this float.
%    \begin{macrocode}
    \ccDeclareAttributeHandler*{no-same-height}{\@ccf@sameheightfalse}%
%    \end{macrocode}
% \end{Attribute}
%    \begin{macrocode}
  }
}% /Container
%    \end{macrocode}
% \end{Property}
%
%
% \subsection{The Generic float Environment}
%
% This section defines the macros for the float's Container-specific
% LaTeX environment.
%
% \begin{macro}{\ccf@float} is a mid-level Macro that provides the
%   common floating {\LaTeX} environment. \#1 is the float
%   environment's kv-attribute list.
%   \begin{description}
%   \item[\#1] float position (optional)\UsageProperty{before-float}
%   \end{description}
%    \begin{macrocode}
\def\ccf@float{\cc@opt@empty\@ccf@float}
\def\@ccf@float[#1]{%
  \par
  \begingroup
    \@cc@is@finalfalse
    \global\advance\ccf@int@cnt\@ne
    \ccEvalType{FloatEnvInfo}%
    \ccf@reset@defaults
    \ccToggleCountedConditionals
    \ccEvalType{Properties}%
    \ccIfPropVal{subfloat-same-height}{true}{\global\@ccf@sameheighttrue}{\global\@ccf@sameheightfalse}
    \ccEvalAttributes{#1}%
    \ccf@eval@class
    \ccf@set@hsize
    \ccf@get@seps
    \ccEvalType{Components}%
    \ccUseProperty{before-float}%
    \ccf@set@env
    \ifx\ccf@floatpos\@empty\else\savenotes\fi
    \@cc@is@finaltrue
    \ignorespaces}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\endccf@float} is the end of the common float
%   environment.
%    \begin{macrocode}
\def\endccf@float{%
    \ccf@begin@env
      \@cc@is@finalfalse
      \ccf@set@top@sep
      \ccf@int@sub@flt@cnt=\ccSubFloatCnt\relax
      \ccSubFloatCnt=\z@\relax
      \cc@iterate{\ccSubFloatCnt}{\z@}{\the\ccf@int@sub@flt@cnt}
        {\ccf@create@counter
         \ccf@compose@listof}%
      \ccSubFloatCnt=\ccf@int@sub@flt@cnt\relax
      \ccf@test@caption{0}{}{top}%
      \ccf@test@caption{0}{}{bottom}%
      \bgroup
        \@cc@is@finaltrue
%    \end{macrocode}
% Floats as a whole are tagged as \DescribeTag{Aside} when PDF/UA
% standard is 2.0, or else as \DescribeTag{Div}.
%    \begin{macrocode}
        \ccIfCompFromVal{titlepage}{PDFUAID}{2}
          {\ccaStructStart{Aside}}
          {\ccaStructStart{Div}}%
        \edef\ccf@parstruct@id{\ccaGetCurStruct{idx}}%
        \hsize\ccf@total@width
        \ccf@process
        \ccIfCompFromVal{titlepage}{PDFUAID}{2}
          {\ccaStructEnd{Aside}}
          {\ccaStructEnd{Div}}%
        \par
      \egroup
      \ccSavePage
      \ccf@set@bot@sep
    \ccf@end@env
    \ccf@debug%
    \ifx\ccf@floatpos\@empty\else\spewnotes\fi
  \endgroup
  \ccf@store@dimens
  \global\let\ccf@current@class\relax
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ccf@store@dimens} writes the float's final dimensions
%   into the aux file.
%    \begin{macrocode}
\def\ccf@store@dimens{%
  \immediate\write\@auxout
    {\string\expandafter\string\gdef\string\csname\space cc-float-\the\ccf@int@cnt-dimens\string\endcsname{%
        {\the\ccf@total@width}%
        {\the\ccf@total@height}%
        {\the\ccf@total@depth}%
      }}%
  }
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{The SubFloat Environment}
%
% \subsubsection{The SubFloat Sub-Container}
%
% Second-level floats (or SubFloats) are sub-containers of the float
% container.
%
% \begin{macro}{\ccSubFloat} is the user-level environment for sub-floats
%    \begin{macrocode}
\def\ccSubFloat{%
  \ifx\ccf@is@subfloat\relax
    \PackageError{coco-floats.sty}{Nested ccSubFloats detected!}{You cannot (yet) nest a `ccSubFloat' environment into another `ccSubFloat' environment!}%
  \else
    \global\let\ccf@is@subfloat\relax
    \global\advance\ccSubFloatCnt\@ne
  \fi
  \global\cslet{ccf@made@label@for@\the\ccSubFloatCnt}\relax
  \ignorespaces}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\endccSubFloat} is the end of the sub-float environment\UsageProperty{subfloat-content}
%    \begin{macrocode}
\def\endccSubFloat{%
  \ifhmode\unskip\fi
  \setbox\ccf@sub@box\hbox{\ccGobble
    \let\includegraphics\ccf@measuresubgraphics
    \ccUseProperty{subfloat-content}%
  }%
  \expandafter\xdef\csname ccf@\cc@cur@cont @width-\the\ccSubFloatCnt\endcsname{\the\wd\ccf@sub@box}%
  \expandafter\xdef\csname ccf@\cc@cur@cont @height-\the\ccSubFloatCnt\endcsname{\the\ht\ccf@sub@box}%
  \expandafter\xdef\csname ccf@\cc@cur@cont @depth-\the\ccSubFloatCnt\endcsname{\the\dp\ccf@sub@box}%
  \@tempdima=\dimexpr\the\ht\ccf@sub@box+\the\dp\ccf@sub@box\relax
  \@tempdimb=\dimexpr\the\wd\ccf@sub@box\relax
  \ifdim\@tempdima>\ccf@sub@maxheight\relax
    \global\ccf@sub@maxheight=\@tempdima\relax
  \fi
  \global\setbox\ccf@sub@box\box\voidb@x
  \global\let\ccf@is@subfloat\@undefined
  \aftergroup\ignorespaces
}
%    \end{macrocode}
% \end{macro}
%
%
% \subsubsection{Printing the Subfloats}
%
% \begin{macro}{\ccfRenderSubFloats} iterates through the single
%   sub-floats and renders them in a nice row. \#1 is the subfloat
%   counter, \#2 is the Component name that contains the actual
%   contents of the sub-float, for \lstinline{\ccPrefix Figure} it is
%   \lstinline{Fig}, for \lstinline{\ccPrefix Table} it is
%   \lstinline{Content}.
%    \begin{macrocode}
\long\def\ccfRenderSubFloats#1#2{%
  \leavevmode
  \savenotes
  \ifnum#1>\@ne\hfill\fi
  \vtop\bgroup
    \expandafter\hsize\csname  cc@\cc@cur@cont @res@width-#1\endcsname\relax
    \let\includegraphics\ccf@includesubgraphics
    \leavevmode
    \ccf@render@sub{#1}{#2}%
  \egroup
  \spewnotes
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ccf@render@sub} renders a single sub-float. For
%   the arguments, see \lstinline{\ccfRenderSubFloats}, above.
%    \begin{macrocode}
\long\def\ccf@render@sub#1#2{%
  \ccSubFloatCnt=#1\relax
  \ccf@make@subcaption{top}%
  \bgroup\strut\ccUseComp{#2}\strut\par\egroup%
  \ccf@make@subcaption{bottom}}
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Attribute Handlers}
%
% The following macros handle the Attributes of Float Container instances.
% \begin{macro}{\ccf@eval@class} expands the style class specific
%   Properties.
%    \begin{macrocode}
\def\ccf@eval@class{%
  \ccUseStyleClass{default}{\ccfCapType}%
  \ifx\ccf@current@class\relax\else
    \ccUseStyleClass{\ccf@current@class}{\ccfCapType}%
  \fi}
%    \end{macrocode}
% \end{macro}
% 
% \begin{macro}{\ccf@attr@pos} is the handler for determining the
%   float position. Some float Properties and Attributes restrict and
%   override the explicit float positions, e.g., fully rotated floats
%   must be positioned in \lstinline{p} mode (i.e., as float
%   page).
%   \begin{ArgList}
%   \item[1] is the value of the float-pos Attribute. It may be any
%     combination of \texttt{h}, \texttt{t}, \texttt{p}, \texttt{b};
%     or \texttt{h!}, which means that the float is non-floating
%     (which is equivalent to an omitted \texttt{float-pos} Attribute)
% \end{ArgList}
%    \begin{macrocode}
\def\ccf@attr@pos#1{%
  \edef\ccf@floatpos{#1}%
  \def\@tempa{h!}\ifx\ccf@floatpos\@tempa\let\ccf@floatpos\@empty\fi
  \def\@tempa{h}\ifx\ccf@floatpos\@tempa\def\ccf@floatpos{htbp!}\fi
  \ifx\ccf@do@dbl\relax
    \ifx\ccf@floatpos\@empty\def\ccf@floatpos{htpb!}\fi% 11514
    \linewidth\dimexpr2\columnwidth+\columnsep\relax
    \hsize\linewidth\relax
  \fi
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ccf@attr@orient} is the handler for the
%   \texttt{orientation} Attribute.
%   \begin{ArgList}
%   \item[1] is the value of the \texttt{orientation}
%     Attribute. Currently, the only value that does things is
%     \texttt{landscape}.
% \end{ArgList}
%    \begin{macrocode}
\def\ccf@attr@orient#1{%
  \ccIfStrEqual{#1}{landscape}
    {\linewidth\textheight
     \hsize\linewidth
     \global\let\ccf@landscape\@empty
     \def\ccf@floatpos{p}}{}}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ccf@attr@debug} prints some debug information to
%   \lstinline{stdout} for a single float that has the Attribute
%   \lstinline{debug} set.
%    \begin{macrocode}
\def\ccf@attr@debug{%
  \message{^^J[CoCo Float Debug]^^J
      Textheight:\space\the\textheight^^J
      Type:\space\space\space\space\space\space\space\cc@cur@cont^^J
\ifx\ccfCapType\cc@str@figure
      Path: \space\space\space\space\space\space\ccf@fig@path^^J
\fi
      Class:\space\space\space\space\space\space\ccf@current@class^^J
      Floatpos:\space\space\space\ccf@floatpos^^J
      Environ:\space\space\space\space\expandafter\noexpand\ccf@begin@env...\expandafter\noexpand\ccf@end@env^^J
      Subfloat:\space\space\space               \the\ccSubFloatCnt^^J
\ifnum\ccSubFloatCnt=\z@
      Width:\space\space\space\space\space\space\the\ccf@total@width^^J
      Height:\space\space\space\space\space\the\ccf@total@height^^J
      Depth:\space\space\space\space\space\space\the\ccf@total@depth^^J
\else
      Width \the\ccSubFloatCnt:\space\space\space\space\space\space\expandafter\meaning\csname ccf@\cc@cur@cont @width-\the\ccSubFloatCnt\endcsname^^J
      Height \the\ccSubFloatCnt:\space\space\space\space\space     \expandafter\meaning\csname ccf@\cc@cur@cont @height-\the\ccSubFloatCnt\endcsname^^J
      Depth \the\ccSubFloatCnt:\space\space\space\space\space\space\expandafter\meaning\csname ccf@\cc@cur@cont @depth-\the\ccSubFloatCnt\endcsname^^J
\fi}}
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Handling of List-of Entries}
%
% \begin{macro}{\ccf@generate@listof@handlers} generates handlers
%   for listof-entries.
%   \begin{description}
%   \item[\#1] is the file ending
%   \item[\#2] is the caption type
%   \item[\#3] is the Container name
%   \end{description}
%    \begin{macrocode}
\def\ccf@generate@listof@handlers#1#2#3{%
%    \end{macrocode}
% \begin{macro}{cc@listof@extract@data}
%   The first macro that is dynamicly defined, is the Component
%   collector.
%   \begin{description}
%   \item[\#\#1] is a numeric level that represents the order of the
%     listof-entries
%   \item[\#\#2] is the caption type
%   \item[\#\#3] is the content of the \lstinline{l@<level>} macro
%   \item[\#\#4] is the page number associated with that entry.\UsageProperty{list-of-page-face}
%   \end{description}
%    \begin{macrocode}
  \expandafter\gdef\csname cc@#2@extract@data\endcsname##1##2##3##4{%
    \ccSetContainer{#3}%
    \def\ccfCapType{#2}%
    \ccEvalType[#3]{Properties}%
    \ccDeclareComponent{ListofCaption}{}{}%
    \ccDeclareComponent{ListofLegend}{}{}%
    \ccDeclareComponent{ListofSource}{}{}%
    \ccDeclareComponent{ListofNumber}{}{}%
    \ccDeclareComponent{ListofPage}{}{}%
    \ccComponent{ListofPage}{\ccUseProperty{list-of-page-face}##4}%
    \cc@expand@l@contents{##3}{#3}{Listof}{Caption}%
    \cc@format@number{list-of-}{Listof}{##1}%
  }%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\cc@listof@print@entry}
%   The second dynamically defined macro is the entry renderer. It
%   applies the Listof properties and selects the components to be
%   printed. \#\#1 is the caption type of the float.\UsageProperty{list-of-before-entry}\UsageProperty{list-of-block}\UsageProperty{list-of-after-entry}
%    \begin{macrocode}
  \expandafter\gdef\csname cc@#2@print@entry\endcsname##1{%
    \bgroup
      \UseHook{cc/listof/##1/before}% was list-of-before-hook-##1
      \ccUseProperty{list-of-before-entry}%
      \ccUseProperty{list-of-block}%
      \UseHook{cc/listof/##1/after}% was list-of-after-hook-##1
      \ccUseProperty{list-of-after-entry}%
    \egroup}%
%    \end{macrocode}
% \DescribeHook{cc/listof/[type]/before} is exanded before the List-of
% entry for a float of type \lstinline{[type]} is printed
%    \begin{macrocode}
  \NewHook{cc/listof/#2/before}%
%    \end{macrocode}
% \DescribeHook{cc/listof/[type]/after} is exanded after the Listof
% entry for a float of type \lstinline{[type]} is printed, but before
% the Property \UsageProp{list-of-after-entry} is called.
%    \begin{macrocode}
  \NewHook{cc/listof/#2/after}%
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \begin{macro}{\ccf@addcontentsline} fork of \LaTeX's
%   \lstinline{\addtocontents} macro.
%    \begin{macrocode}
\def\ccf@addcontentsline{%
  \ccWhenComp{ListofEntry}{%
    \protected@write\@auxout
      {\ccGobble}%
      {\string\@writefile{\ccf@cap@list@type}
        {\protect\ccContentsline
          {\ifnum\ccSubFloatCnt>\z@\ccIfAttr{\ccfCapType}{subfloat}{sub}{}\fi\ccfCapType}
          {\ccUseComp{ListofEntry}}
          {\thepage}
          {\@currentHref}\protected@file@percent}}\relax}}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ccf@check@empty} is a wrapper for CoCoTeX kernel's \lstinline{\cc@check@empty}
%    \begin{macrocode}
\def\ccf@check@empty#1{\cc@check@empty{\cc@cur@cont}{#1-\the\ccSubFloatCnt}{Listof}}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ccf@compose@listof} is the Component Group Handler
%   for \lstinline{Listof} Components.
%    \begin{macrocode}
\def\ccf@compose@listof{%
  \ccf@check@empty{Number}%
  \ccf@check@empty{Caption}%
  \ccf@check@empty{Legend}%
  \ccf@check@empty{Source}%
  \let\ccf@listof@entry\relax
  \ccWhenComp{ListofCaption}{\csgappto{ccf@listof@entry}{\string\ccComponent{ListofCaption}{\ccUseComp{ListofCaption}}}}%
  \ccWhenComp{ListofNumber}{\csgappto{ccf@listof@entry}{\string\ccComponent{ListofNumber}{\ccUseComp{ListofNumber}}}}%
  \ccWhenComp{ListofLegend}{\csgappto{ccf@listof@entry}{\string\ccComponent{ListofLegend}{\ccUseComp{ListofLegend}}}}%
  \ccWhenComp{ListofSource}{\csgappto{ccf@listof@entry}{\string\ccComponent{ListofSource}{\ccUseComp{ListofSource}}}}%
  \ifx\ccf@listof@entry\relax\else
    \bgroup
      \ccGobble
      \protected@edef\@ccf@listof@entry{\ccf@listof@entry}%
      \ccComponentEA{ListofEntry}{\@ccf@listof@entry}%
    \egroup
  \fi
}%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ccf@write@listof}
%   The last macro to be defined here is the list-of writer. This
%   macro is responsible to write the entry into TeX's auxiliary file
%   system.
%    \begin{macrocode}
\def\ccf@write@listof{%
  \ccUnlessAttr{\ccfCapType}{nolist}
    {\ifnum\ccSubFloatCnt=\z@\relax
       \ccIfAttr{\ccfCapType}{subfloat}
         {\ccSubFloatCnt=\z@\relax
          \cc@iterate{\ccSubFloatCnt}{\z@}{\the\ccf@int@sub@flt@cnt}
            {\ccf@addcontentsline}}%
         {\ccf@addcontentsline}%
     \else
       \ccIfAttr{\ccfCapType}{subfloat}{}{\ccf@addcontentsline}%
     \fi}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Label and Referencing mechanisms}
%
% \subsubsection{Generation of Number Components}
%
% \begin{macro}{\ccf@create@counter} checks for the various parameters
%   that control whether or not a Number component is auto-generated
%   for each sub-float.
%    \begin{macrocode}
\def\ccf@create@counter{%
  \ccIfAttrIsSet{\ccfCapType}{nonumber}{}
    {\ccUnlessComp{Number}
      {\ccIfPropVal{numbering}{auto}
        {\ccIfAttr{\ccfCapType}{subfloat}
          {\ifnum\ccSubFloatCnt=\z@\relax
             \ccf@set@top@counter%
           \else
             \ccIfPropVal{sub-numbering}{auto}
               {\ccf@set@subcounter}{}%
           \fi}
          {\ccf@set@top@counter}}{}}}}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ccf@set@top@counter} generates first level float
%   counter.
%    \begin{macrocode}
\def\ccf@set@top@counter{%
  \ccWhenComp{Caption}{%
    \global\expandafter\advance\csname c@\ccfCapType\endcsname\@ne\relax
    \ccdefFromProperty\ccf@name@prefix{auto-number-prefix}%
    \ccdefFromProperty\ccf@name@sep{auto-number-prefix-sep}%
    \protected@edef\@tempa{\ccf@name@prefix\ccf@name@sep\expandafter\the\csname c@\ccfCapType\endcsname}%
    \ccComponentEA{Number}{\@tempa}%
  }%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\ccf@set@subcounter} generates second level counters
%   for numbered sub-floats. \#1 is the sub-float counter.
%    \begin{macrocode}
\def\ccf@set@subcounter{%
%    \end{macrocode}
% \begin{Property}{float-number}{<any>} the counter of a first-level
%   float
%    \begin{macrocode}
  \ccSetPropertyVal{float-number}{\csname  cc@\cc@cur@cont @Number-0\endcsname}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{sub-number}{<any>} the counter of a second-level
%   float\UsageProperty{sub-number-face}\UsageProperty{sub-number-before}\UsageProperty{sub-number-style}\UsageProperty{sub-number-after}\UsageProperty{sub-number-format}
%    \begin{macrocode}
  \ccSetPropertyVal{sub-number}{%
    \begingroup
      \expandonce{\ccUseProperty{sub-number-face}}%
      \relax\ccUseProperty{sub-number-before}%
      \csname @\ccUseProperty{sub-number-style}\endcsname{\the\ccSubFloatCnt}%
      \ccUseProperty{sub-number-after}%
    \endgroup}%
  \ccComponent{Number}{\ccUseProperty{sub-number-format}}%
}
%    \end{macrocode}
% \end{Property}
% \end{macro}
%
% \subsubsection{Generation of {\LaTeX} Labels}
%
% \begin{macro}{\ccfCreateLabel} creates labels
%    \begin{macrocode}
\def\ccfCreateLabel{%
  \ccIfComp{Number}
    {\def\cc@fallback@anchor{%
       \ccGobble
       \ccdefFromComp\@currentlabel{Number}%
       \ccdefFromComp\@currentlabelname{ListofCaption}}%
     \def\cc@labelname@comp{Caption}}
   {\def\cc@fallback@anchor{\phantomsection}}%
  \expandafter\ccCreateLabel\expandafter{\ccfCapType}}
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Processing the Float}
%
% \subsubsection{Sizes, Spacing and Margins}
%
% \begin{macro}{\ccf@set@hsize} calculates the available maximum
%   width for the float contents and captions according to the values
%   of the \lstinline{margin-right} and the \lstinline{margin-left}
%   properties.\UsageProperty{sub-float-sep}\UsageProperty{margin-left}\UsageProperty{margin-right}\UsageProperty{margin-inner}\UsageProperty{margin-outer}
%    \begin{macrocode}
\def\ccf@set@hsize{%
  \expandafter\ccf@sub@sep\ccUseProperty{sub-float-sep}\relax%
  \global\ccf@total@width=\hsize\relax
  \expandafter\ccf@margin@l\ccUseProperty{margin-left}\relax
  \expandafter\ccf@margin@r\ccUseProperty{margin-right}\relax
  \expandafter\ccf@margin@i\ccUseProperty{margin-inner}\relax
  \expandafter\ccf@margin@o\ccUseProperty{margin-outer}\relax
  \ccf@set@margins
  \global\advance\ccf@total@width-\ccf@margin@r\relax
  }
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ccf@set@margins} realises inner and outer margins
%   via the left and right margins.
%    \begin{macrocode}
\def\ccf@set@margins{%
  \ccTestPage
  \if@cc@odd
    \advance\ccf@margin@l\ccf@margin@i
    \advance\ccf@margin@r\ccf@margin@o
  \else
    \advance\ccf@margin@l\ccf@margin@o
    \advance\ccf@margin@r\ccf@margin@i
  \fi
}
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Processing the Contents of the Float Environment}
%
% \begin{macro}{\ccf@process} calculates the dimensions of the content
%   of a float environment (including captions and spacing) and
%   eventually prints the contents using the \UsageProp{float-render}
%   and \UsageProp{subfloat-render} Properties.
%    \begin{macrocode}
\def\ccf@process{%
  \ifx\ccf@has@capt@top\@empty\leavevmode\fi
  \ccf@make@outer@caption{top}%
  \ifnum\the\ccSubFloatCnt=\z@\relax
    \bgroup\advance\hsize-\ccf@margin@l
      \@cc@is@finaltrue
      \ccUseProperty{float-render}%
    \egroup
  \else
    \ccf@test@subcapt
    \@cc@is@finalfalse
    \ccf@calc@sameheight
    \def\ccf@prefix{sub}%
    \ifx\ccf@has@subcapt@top\@empty\ccf@calc@row@ht{top}\fi%
    \ifx\ccf@has@subcapt@bottom\@empty\ccf@calc@row@ht{bottom}\fi%
    \@cc@is@finaltrue
    \ccUseProperty{subfloat-render}%
    \let\ccf@prefix\@empty
  \fi
  \ccf@make@outer@caption{bottom}%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ccf@calc@row@ht} calculates the heights of all
%   captions in the same row.\UsageProperty{subcaption-face}\UsageProperty{caption-face}\UsageProperty{subcaption-face-top}\UsageProperty{caption-face-top}\UsageProperty{subcaption-face-bottom}\UsageProperty{caption-face-bottom}
%   \begin{ArgList}
%   \item[1] determins if the \lstinline{top} or \lstinline{bottom}
%     row is calculated.
% \end{ArgList}
%    \begin{macrocode}
\def\ccf@calc@row@ht#1{%
  \@tempcnta\z@
  \@tempdima\z@
  \cc@iterate{\@tempcnta}{\@ne}{\ccSubFloatCnt}{%
    \setbox\z@\vbox{%
      \ccSubFloatCnt\@tempcnta\relax
      \expandafter\hsize\expandafter\dimexpr\csname  cc@\cc@cur@cont @res@width-\the\@tempcnta\endcsname\relax
      \ccGobble
      \ccUseProperty{\ccf@prefix caption-face}%
      \ccUseProperty{\ccf@prefix caption-face-#1}%
      \leavevmode
      \strut\ccUseProperty{caption-#1}\strut%
      }%
    \expandafter\ifdim\dimexpr\ht\z@+\dp\z@\relax>\@tempdima \@tempdima\dimexpr\ht\z@+\dp\z@\relax\fi
  }%
  \expandafter\edef\csname ccf@capt@row@height@#1\endcsname{\the\@tempdima}%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\ccf@calc@sameheight} calculates the ratio between
%   each sub-float's height and the height of the largest sub-float
%    \begin{macrocode}
\def\ccf@calc@sameheight{%
  \if@ccf@sameheight
    \@tempdima=\z@\relax
    \@tempcnta=\z@\relax
    \ccf@calc@width=\ccf@total@width\relax
    \advance\ccf@calc@width-\ccf@margin@l\relax
    \cc@iterate{\@tempcnta}{\@ne}{\ccSubFloatCnt}{%
      \edef\@tempa{\CalcRatio{\ccf@sub@maxheight}{\csname ccf@\cc@cur@cont @height-\the\@tempcnta\endcsname}}%
      \ifnum\the\@tempcnta>\@ne\relax
        \advance\ccf@calc@width-\ccf@sub@sep\relax%
      \fi
      \expandafter\@tempdimc\csname ccf@\cc@cur@cont @width-\the\@tempcnta\endcsname\relax
      \@tempdimb=\@tempa\@tempdimc\relax
      \csedef{cc@\cc@cur@cont @adj@width-\the\@tempcnta}{\the\@tempdimb}%
      \advance\@tempdima\@tempdimb
    }%
    \@tempcnta=\z@\relax
    \@tempdimb=\z@\relax
    \@tempdimc=\z@\relax
    \cc@iterate{\@tempcnta}{\@ne}{\ccSubFloatCnt}{%
      \edef\@tempa{\CalcRatio{\csname  cc@\cc@cur@cont @adj@width-\the\@tempcnta\endcsname}{\@tempdima}}%
      \csedef{cc@\cc@cur@cont @res@width-\the\@tempcnta}{\dimexpr\@tempa\ccf@calc@width\relax}%
      \@tempdimc\dimexpr\csname ccf@\cc@cur@cont @height-\the\@tempcnta\endcsname\relax
      \@tempdimc\dimexpr\@tempa\@tempdimc\relax
      \ifdim\@tempa\@tempdimb<\@tempdimc\@tempdimb\@tempdimc\relax\fi
    }%
  \else
    \cc@iterate{\@tempcnta}{\@ne}{\ccSubFloatCnt}{%
      \csletcs{cc@\cc@cur@cont @res@width-\the\@tempcnta}{ccf@\cc@cur@cont @width-\the\@tempcnta}
    }%
  \fi
  \csedef{cc@\cc@cur@cont @res@height}{\the\@tempdimb}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Caption mechanism}
%
%
% \begin{macro}{\ccf@test@caption} tests if the current sub-float has
%   any top or bottom caption that needs to be printed.
%   \begin{description}
%   \item[\#1] is the value of the sub-float counter
%   \item[\#2] indicates if the caption belongs to the whole float
%     (empty) or a sub-float (\texttt{sub})
%   \item[\#3] \lstinline{top} or \lstinline{bottom}
%   \end{description}
%   We compare the caption of the current \lstinline{\SubCounter}
%   level with a caption of a non-existing, negative, float level in
%   case there is non-expandable material hard-coded into the
%   \lstinline{caption-#3} Property. If we were to compare the width
%   of the \lstinline{\hbox} with \lstinline{\z@}, this scenario would
%   give us false positives.
%
%   \textbf{Warning:} Long captions can cause the hbox's width to
%   exceed \lstinline{\maxdimen}. To avoid \LaTeX\ errors in this
%   case, we compare \lstinline{sp} instead of \lstinline{pt}. This,
%   however, means that if the difference is less than 1pt, the test
%   fails and no caption is printed!\UsageProperty{caption-top}\UsageProperty{caption-bottom}\UsageProperty{subcaption-top}\UsageProperty{subcaption-bottom}
%    \begin{macrocode}
\def\ccf@test@caption#1#2#3{%
  \@cc@is@finalfalse
  \setbox\cc@tempboxa\hbox{\ccGobble\ccSubFloatCnt=0#1\relax\ccUseProperty{#2caption-#3}\relax}%
  \setbox\cc@tempboxb\hbox{\ccGobble\ccSubFloatCnt\m@ne\relax\ccUseProperty{#2caption-#3}\relax}%
  \edef\my@wda{\expandafter\strip@pt\wd\cc@tempboxa sp}%
  \edef\my@wdb{\expandafter\strip@pt\wd\cc@tempboxb sp}%
  \ifdim\my@wda>\my@wdb\relax
    \expandafter\global\expandafter\let\csname ccf@has@#2capt@#3\endcsname\@empty
  \fi
  \@cc@is@finaltrue
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ccf@test@subcapt} tests if the current float has
%   any top or bottom captions that need to be printed
%    \begin{macrocode}
\def\ccf@test@subcapt{%
  \cc@iterate{\@tempcnta}{\@ne}{\ccSubFloatCnt}{%
    \ccf@test@caption{\the\@tempcnta}{sub}{top}%
    \ccf@test@caption{\the\@tempcnta}{sub}{bottom}%
  }%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ccf@capt@top@offset} determines the spacing inserted
%   \textbf{above both captions}.\UsageProperty{caption-sep-bottom}\UsageProperty{subcaption-sep-bottom}\UsageProperty{subcaption-add-sep-bottom}
%    \begin{macrocode}
\def\ccf@capt@top@offset#1{%
  \ccIfStrEqual{#1}{top}{}{%
    \par\if@ccf@break@capt\else\nopagebreak\fi%
    \expandafter\@tempskipa\ccUseProperty{\ccf@prefix caption-sep-bottom}\relax%
    \advance\@tempskipa\dimexpr-\topskip+\dp\strutbox\relax
    \if@ccf@break@capt\advance\@tempskipa\dimexpr-\baselineskip-\ht\strutbox+\topskip\relax\fi
    \ifx\ccf@has@subcapt@bottom\@empty
      \ifnum\the\ccSubFloatCnt=\z@
        %% subcapt-bot exists and capt-bot is rendered
        \advance\@tempskipa\dimexpr\dp\strutbox\relax
        \expandafter\advance\expandafter\@tempskipa\ccUseProperty{subcaption-add-sep-bottom}\relax%
      \fi
    \fi
    \vskip\@tempskipa
    \leavevmode
  }}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ccf@capt@bottom@offset} determines the spacing inserted \textbf{below the
%   captions}.\UsageProperty{caption-sep-top}\UsageProperty{subcaption-sep-top}\UsageProperty{subcaption-add-sep-top}
%    \begin{macrocode}
\def\ccf@capt@bottom@offset#1{%
  \ccIfStrEqual{#1}{top}
    {\@tempskipa=\z@\relax
     \expandafter\advance\expandafter\@tempskipa\ccUseProperty{\ccf@prefix caption-sep-top}%
     \ifnum\the\ccSubFloatCnt=\z@\relax
       \ifx\ccf@has@subcapt@top\@empty
         %% subcapt-top exists and capt-top is rendered
         \advance\@tempskipa\dimexpr\ht\strutbox-\topskip-\p@\relax
         \expandafter\advance\expandafter\@tempskipa\ccUseProperty{subcaption-add-sep-top}\relax%
       \else
         \advance\@tempskipa\dimexpr-\dp\strutbox\relax
       \fi
     \fi
     \vskip\@tempskipa
     \par\if@ccf@break@capt\else\nopagebreak\fi}
   {\ifnum\the\ccSubFloatCnt>\z@\relax
      \vskip\dp\strutbox
    \fi}}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ccf@make@caption} prints the caption.
%   \begin{description}
%   \item[\#1] is the placement (\texttt{top}, \texttt{bottom})
%   \item[\#2] is the vertical alignment (\texttt{top}, \texttt{middle}, \texttt{bottom})\UsageProperty{caption-face}\UsageProperty{caption-face-top}\UsageProperty{caption-face-bottom}\UsageProperty{caption-top}\UsageProperty{caption-bottom}\UsageProperty{label-pos}\UsageProperty{subcaption-face}\UsageProperty{subcaption-face-top}\UsageProperty{subcaption-face-bottom}\UsageProperty{subcaption-top}\UsageProperty{subcaption-bottom}\UsageProperty{sublabel-pos}
% \end{description}
%    \begin{macrocode}
\long\def\ccf@make@caption#1#2{%
  \ccf@capt@top@offset{#1}%
  \ifnum\the\ccSubFloatCnt=\z@\relax
    \def\ccf@caption@box{%
      \ifx\ccf@landscape\@empty
        \setbox\@tempboxa\vbox\bgroup\hsize\textheight
      \else
        \hskip\ccf@margin@l%
         \setbox\@tempboxa\vbox\bgroup\advance\hsize-\ccf@margin@l%
      \fi}%
  \else
    \expandafter\cc@tempskipa\csname ccf@capt@row@height@#1\endcsname\relax
    \expandafter\advance\expandafter\cc@tempskipa\dimexpr-\baselineskip+\topskip\relax
    \def\ccf@caption@box{\setbox\@tempboxa\vbox to \cc@tempskipa\bgroup}%
  \fi
  \ccf@caption@box%
    \ccIfStrEqual{#2}{top}{}{\if@ccf@break@capt\else\vss\fi}%
    \ccUseProperty{\ccf@prefix caption-face}%
    \ccUseProperty{\ccf@prefix caption-face-#1}%
%    \end{macrocode}
% The caption as a whole is tagged with \DescribeTag{Caption}.
%    \begin{macrocode}
    \ccaStructStart{Caption}%
    \cc@topstrut\ccUseProperty{\ccf@prefix caption-#1}\strut%
    \ccaStructEnd{Caption}%
    \ifx\ccf@measure\relax\else
      \ccIfPropVal{label-pos}{#1}{%
        \ccfCreateLabel%
        \ccf@write@listof%
      }{}%
    \fi
    \ccIfStrEqual{#2}{bottom}{}{\if@ccf@break@capt\else\vss\fi}%
  \egroup%
  \if@ccf@break@capt\unvbox\@tempboxa\else\box\@tempboxa\fi%
  \ccf@capt@bottom@offset{#1}%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ccf@make@outer@caption} is a shell for the outer
%   captions. \#1 is the placement (\texttt{top} or \texttt{bottom})
%    \begin{macrocode}
\def\ccf@make@outer@caption#1{%
%    \end{macrocode}
% now, we print the actual captions, if they contain contents.
%    \begin{macrocode}
  \expandafter\ifx\csname ccf@has@capt@#1\endcsname\@empty
    \setbox\z@\vbox{%
      \@cc@is@finalfalse
      \let\ccf@measure\relax
      \ccGobble
      \ccSubFloatCnt\z@
      \ccf@make@caption{#1}{top}%
    }%
    \immediate\write\@auxout{\string\expandafter\string\gdef\string\csname\space ccFloat\the\ccf@int@cnt Cap#1\string\endcsname{\the\dimexpr \ht\z@+\dp\z@\relax}}%
    \bgroup
      \@cc@is@finaltrue
      \savenotes
      \if@ccf@break@capt\else\nopagebreak\fi
      \ccSubFloatCnt\z@
      \ccf@make@caption{#1}{top}%
      \spewnotes
    \egroup
    \ccIfStrEqual{#1}{top}{\if@ccf@break@capt\else\nopagebreak\fi}{}%
  \fi}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ccf@make@subcaption} creates the caption for
%   subfloats. \#1 is the position (\lstinline{top} or
%   \lstinline{bottom}).\UsageProperty{subcaption-valign-top}\UsageProperty{subcaption-valign-bottom}\UsageProperty{caption-valign-bottom}\UsageProperty{caption-valign-bottom}
%    \begin{macrocode}
\def\ccf@make@subcaption#1{%
  \expandafter\ifx\csname ccf@has@\ccf@prefix capt@#1\endcsname\@empty
    \ccf@make@caption{#1}{\ccUseProperty{\ccf@prefix caption-valign-#1}}%
  \fi}
%    \end{macrocode}
% \end{macro}
%
%
% \section{Generic User-Level Float Containers}
%
% \begin{macro}{\ccDeclareFloat} is a user-level macro used to
%   declare a new \lstinline{ccFloat} environment.
%   \begin{ArgList}
%   \item*[1] Name of the float Container from which the declared
%     Container should inherit Properties (\textit{optional})
%   \item[2] top-level name of the float environment (e.g.,
%     \lstinline{\ccPrefix Table}, \lstinline{\ccPrefix Figure})
%   \item[3] caption type (e.g., \texttt{table}, \texttt{figure})
%   \item[4] list (e.g., \texttt{lot}, \texttt{lof})
%   \item[5] additional Component body, use this to add to Types or
%     introduce custom Handlers to the Float Container.
%   \end{ArgList}
%    \begin{macrocode}
\def\ccDeclareFloat{\cc@opt@empty\ccf@declare@float}
\long\def\ccf@declare@float[#1]#2#3#4#5{%
%    \end{macrocode}
% First, we check if the Container already exists. If so, we issue an
% error message. May we force the style programmers learn to make use
% of \CoCoTeX's extensive toolbox.
%    \begin{macrocode}
  \ifcsdef{cc@container@#2}{%
    \ccPackageError{Float}{}
        {Attempt to re-define pre-existing float Container `#2'}
        {You cannot re-define an existing float Container. Use
\string\ccAddToType{<Type>}{#2}{<code>} to alter the #2 container!}}{}%
%    \end{macrocode}
% Otherwise, we declare the new Container and invoke all the
% Initializers.
%    \begin{macrocode}
  \def\ccf@parent{#1}%
  \ccDeclareContainer{#2}{%
    \ccPackageInfo{Floats}{}{Declaring float `#2'}%
    \ifx\ccf@parent\@empty
      \ccInherit{Properties,Components,Attributes}{float}
    \else
      \ccInherit{Properties,Components,Attributes}{\ccf@parent}
    \fi
    \ccDeclareType{FloatEnvInfo}{%
      \ccSetContainer{#2}%
      \def\ccfCapType{#3}%
      \def\ccf@cap@list@type{#4}%
    }% /FloatEnvInfo
%    \end{macrocode}
% The macro actually defines two {\LaTeX} environments; a normal one
% for one-column floats, and a starred one for page-wide floats in
% two-column mode.
%    \begin{macrocode}
    \ccDeclareEnv[#2]{\ccf@float}{\endccf@float}%
    \ccDeclareEnv[#2*]{\if@twocolumn\let\ccf@do@dbl\relax\else\fi\ccf@float}{\if@twocolumn\let\ccf@do@dbl\relax\fi\endccf@float}%
    \ccDeclareType{Components}{}%
    \ccDeclareType{Properties}{}%
%    \end{macrocode}
% Generating the Handlers for the list-of entries and define the
% corresponding \lstinline{l@} macros
%    \begin{macrocode}
    \ccf@generate@listof@handlers{#4}{#3}{#2}%
    \bgroup
      \def\cc@cur@cont{#2}%
      \cc@init@l@[list-of]{#3}{0}{#3}% Generate listof-Entries for first level floats
      \cc@init@l@[list-of]{#4}{1}{sub#3}% Generate listof-Entries for sub-floats
    \egroup
    #5
  }% /container
}
%    \end{macrocode}
% \end{macro}
%
%
% \section{Image Containers}
%
% \subsection{Abstract Graphics Container}
%
% \DescribeContainer{Graphic} is an abstract Container that represents
% an image file.
%    \begin{macrocode}
\ccDeclareContainer{Graphic}{%
  \ccDeclareType{Components}{%
    \def\cc@counted@comp@scheme#1{#1-\the\ccSubFloatCnt}%
%    \end{macrocode}
% \begin{Component}{Fig} holds the \lstinline{includegraphics} with the path to
%   and the options for the actual image file.
%    \begin{macrocode}
    \ccfMakeComp{Fig}%
%    \end{macrocode}
% \end{Component}
% \begin{Component}{AltText} is the alternative text for
%   accessibility.
%    \begin{macrocode}
    \ccfMakeComp{AltText}%
%    \end{macrocode}
% \end{Component}
%    \begin{macrocode}
  }%
  \ccDeclareType{Properties}{}%
}
%    \end{macrocode}
%
%
% \subsection{Floating Figure Container}
%
% \DescribeContainer{Figure} is the user-level Container for
% display-style images or image clusters including their respective
% captions. Figures may either be placed as free-standing in-situ
% blocks or as floats.
%    \begin{macrocode}
\ccDeclareFloat{Figure}{figure}{lof}{%
  \ccInherit{Properties,Components}{Graphic}%
  \ccDeclareType{Properties}{%
%    \end{macrocode}
% \begin{Property}{subfloat-same-height}{[true|false]} Whether all
%   images in subfloats sould be scaled to the same height
%   (\texttt{true}) or not (\texttt{false}).
%    \begin{macrocode}
    \ccSetProperty{subfloat-same-height}{true}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{subfloat-content}{<any>}
%    \begin{macrocode}
    \ccSetProperty{subfloat-content}{%
      \ifx\ccf@no@figs\relax
        \rule{0pt}{1pt}\rule{1pt}{0pt}%
      \else
        \ccUseComp{Fig}%
      \fi}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{float-render}{<any>} figure specific output
%   routine.
%    \begin{macrocode}
    \ccSetProperty{float-render}{\ccfFigureRender}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{subfloat-render}{<any>} figure specific output
%   routine for sub-floats.
%    \begin{macrocode}
    \ccSetProperty{subfloat-render}{\ccfSubFigureRender}%
  }%
}
%    \end{macrocode}
% \end{Property}
%
%
% \subsection{Figure Output Routines}
%
% \begin{macro}{\ccfFigureRender} tells the float Container how the
%   main content Component if Figure-type Floats is to be rendered. It
%   is called via the \UsageProperty{float-render} Property.
%    \begin{macrocode}
\def\ccfFigureRender{%
  \bgroup
    \ifx\ccf@landscape\@empty
      \hsize\dimexpr\textwidth-\ccf@margin@r-\ccf@margin@l\relax%
    \fi
    \let\includegraphics\ccf@includesubgraphics
    \hskip\ccf@margin@l
    \strut\ccUseComp{Fig}\strut
  \egroup}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ccfSubFigureRender} tells the abstract float
%   Container how the main content Component of Figure-type sub-floats
%   are to be rendered. It is called via the
%   \UsageProperty{subfloat-render} Property.
%    \begin{macrocode}
\def\ccfSubFigureRender{%
  \hskip\ccf@margin@l
  \cc@iterate{\@tempcnta}{\@ne}{\ccSubFloatCnt}{%
    \ccfRenderSubFloats{\the\@tempcnta}{Fig}%
  }}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ccf@includesubgraphics} is an override of \LaTeX's
%   \lstinline{\includegraphics} patched to adjust for maximum width
%   and height, and to capture the \lstinline{alt} key in order to
%   pass it down to \lstinline{ltpdfa}.
%
%   In order to capture multiple images in the same Figure Container
%   (i.e. real or fake Sub-Floats), tagging as \DescribeTag{Figure} of
%   images takes place here, as does assignment of alternative
%   text(s). Those can be submitted by the \UsageComponent{AltText}
%   Component or by the \lstinline{alt} key in the optional argument
%   of \lstinline{\includegraphics}. If both are given, the
%   \lstinline{alt} key takes precedence. If neither is given, a
%   \lstinline{--} is inserted.
%    \begin{macrocode}
\def\ccf@includesubgraphics{\cc@opt@empty\@ccf@includesubgraphics}%
\def\@ccf@includesubgraphics[#1]#2{%
  \def\@igopts{max width=\hsize,max height=\vsize,width=\hsize}%
  \if!#1!\else
    \apptocmd\@igopts{,#1}{}{}%
  \fi
  \gdef\ccf@fig@path{#2}%
  \if@cc@is@final
    \ccaStructStart{Figure}%
    \ccaAddPlacement{Block}%
  \fi%
  \expandafter\ccf@ltx@includegraphics\expandafter[\@igopts]{#2}%
  \if@cc@is@final
    \ifx\relax\cca@Gin@alt\relax
      \ccIfComp{AltText}
        {\ccaAddAltText{\ccUseComp{AltText}}}
        {\ccaAddAltText{--}}%
    \else
      \ccaAddAltText{\cca@Gin@alt}%
    \fi
    \ccaStructEnd{Figure}%
  \fi
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ccf@measuresubgraphics} is an override of \LaTeX's
%   \lstinline{\includegraphics} that is used to measure the natural
%   dimensions of the included image. It also checks if the
%   \lstinline{\includegraphics} has either an height or width
%   explicitly given. if so, we de-activate the same-height
%   calculations for the entire float.
%    \begin{macrocode}
\def\ccf@measuresubgraphics{\cc@opt@empty\@ccf@measuresubgraphics}
\def\@ccf@measuresubgraphics[#1]#2{%
  \begingroup
    \setkeys{Gin}{#1}%
    \ifx\Gin@ewidth\Gin@exclamation
      \ifx\Gin@eheight\Gin@exclamation\else
        \global\@ccf@sameheightfalse
      \fi
    \else
      \global\@ccf@sameheightfalse
    \fi
  \endgroup
  \ccf@ltx@includegraphics[#1]{#2}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Inline Figures}
%
% \subsubsection{Inline Figure Container}
%
% \DescribeContainer{InlineFigure} is the user-level Container for
% inline graphics (e.\,g., images in tables or symbols inside the main
% text body). Note that this Container is \textit{not} derived from
% the abstract \texttt{float} Container. Also, there is no {\LaTeX}
% environment for that Container but a simple macro.
%    \begin{macrocode}
\ccDeclareContainer{InlineFigure}{%
  \ccInherit{Properties,Components}{Graphic}%
  \ccDeclareType{Attributes}{}%
  \ccDeclareType{Properties}{%
%    \end{macrocode}
% \begin{Property}{smash}{[true|false]} whether the image is allowed
%   to stretch the line it is in (false) or not (true) if the height
%   exceeds \lstinline{\baselineskip}.
%    \begin{macrocode}
    \ccSetProperty{smash}{false}
%    \end{macrocode}
% \end{Property}
% \begin{Property}{vertical-align}{[top|middle|bottom]} the vertical
%   alignment of the inline image relative to the baseline of the
%   surrounding text. If the value is \lstinline{bottom}, the bottom
%   border of the image is aligned with the baseline, \lstinline{top}
%   aligns the top border of the image at
%   $\text{baseline} + \text{\texttt{\string\ht\string\strutbox}}$,
%   \lstinline{middle} centers the image at
%   $\text{baseline} +
%   0.5\times\text{\texttt{\string\ht\string\strutbox}}$.
%    \begin{macrocode}
    \ccSetProperty{vertical-align}{bottom}
%    \end{macrocode}
% \end{Property}
% \begin{Property}{float-render}{<any>} specific output routine for
%   inline figures
%    \begin{macrocode}
    \ccSetProperty{float-render}{\ccUseComp{Fig}}
  }%
}
%    \end{macrocode}
% \end{Property}
%
%
% \subsubsection{Inline Figure User Macro}
%
% \begin{macro}{\ccInlineFigure} is the Handler for an inline figure's
%   main content Component.
%   \begin{ArgList}
%   \item*[1] is the attribute list for the figure
%   \item[2] is the Container Body
%   \end{ArgList}
%    \begin{macrocode}
\def\ccInlineFigure{\cc@opt@empty\cc@inline@figure}
\def\cc@inline@figure[#1]#2{%
  \begingroup
    \ccSetContainer{InlineFigure}%
    \def\ccfCapType{figure}%
    \ccToggleCountedConditionals
    \ccEvalType{Properties}%
    \ccEvalAttributes{#1}%
    \ccf@eval@class
    \ccEvalType{Components}%
    \ignorespaces
    #2%
    \ccSubFloatCnt=\z@\relax
    \bgroup
      \ccUseProperty{float-render}%
    \egroup
    \ccf@debug%
    \ccf@store@dimens
  \endgroup
}
\csdef{\ccPrefix InlineFigure}{\ccInlineFigure}%
%    \end{macrocode}
% \end{macro}
%
%
% \section{Table Containers}
%
% \subsection{The Abstract Tabular Container}
%
% {\CoCoTeX}'s float module supports the three basic Standard {\LaTeX}
% tabular environments (\lstinline{tabular}, \lstinline{tabularx} and
% \lstinline{tabulary}) as well as \texttt{htmltab} from the
% \lstinline{htmltabs} package. For the measuring to work correctly,
% we need to render the tables as a whole and store the result inside
% \lstinline{\ccf@floatbox} for measuring and further processing.
%
% \DescribeContainer{Tabular} is an abstract Container that represents
% raw table data. Its main purpose is to provide a unified interface
% to patch some of {\LaTeX}'s standard \lstinline{tabular}
% environments, as well as the \lstinline{htmltab} environment, it the
% \lstinline{htmltabs} package is loaded.
%    \begin{macrocode}
\ccDeclareContainer{Tabular}{%
  \ccDeclareType{Properties}{}%
  \ccDeclareType{Components}{%
    \ccf@reserve@tabular
  }%
}
%    \end{macrocode}
% \begin{macro}{\ccf@reserve@tabular} is a shell macro that
%   temporarily stores the default macro definitions for various
%   tabular environments and patches them such that the contents are
%   stored inside the \lstinline{\ccf@floatbox}. The macro is called
%   at the very beginning of the Table Container's environemnt and the
%   patches only hold inside that environment. Thus, all tabular
%   environments can be used in their vanilla state outside \CoCoTeX's
%   Table environments.
%    \begin{macrocode}
\def\ccf@reserve@tabular{%
  \ccf@reserve@tab{}%
  \ccf@reserve@tab{x}%
  \ccf@reserve@tab{y}%
  \ccf@reserve@htmltab%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ccf@reserve@tab} stores the default definitions for a
%   specific vanilla-{\LaTeX} tabular environment and re-defines the
%   macros in a way that the tabulars are stored in the
%   \lstinline{\ccf@floatbox} instead of printed onto the page.
%    \begin{macrocode}
\def\ccf@reserve@tab#1{%
  \csletcs{orig@tabular#1}{tabular#1}%
  \csletcs{orig@endtabular#1}{endtabular#1}%
  \csdef{tabular#1}{%
    \global\setbox\ccf@floatbox
    \vbox\bgroup
      \if!#1!\else
        \let\tabular\orig@tabular
        \let\endtabular\orig@endtabular
      \fi
      \csname orig@tabular#1\endcsname}%
  \csdef{endtabular#1}{\csname orig@endtabular#1\endcsname\egroup}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{The User-Level Table Container}
%
% \DescribeContainer{Table} is a user-level Container for
% display-style tables including their captions. They may wither be
% places as free-standing in-situ blocks or as floats.
%    \begin{macrocode}
\ccDeclareFloat{Table}{table}{lot}{%
  \ccInherit{Properties,Components}{Tabular}%
  \ccDeclareType{Properties}{%
    \ccSetProperty{subcaption-valign-top}{bottom}%
    \ccSetProperty{subfloat-content}{%
      \PackageError{coco-floats.sty}
        {ccSubFloat does not support sub-tables (yet)!}
        {You cannot yet use a tables within the `ccSubFloat'!}%
      }%
    \ccSetProperty{float-render}{\ccfTableRender}%
    \ccSetProperty{subfloat-render}{\ccfSubTableRender}%
  }%
}
%    \end{macrocode}
% \begin{macro}{\ccf@reserve@htmltab} special handler for tables using
%   the \lstinline{htmltabs} package:
%    \begin{macrocode}
\AtBeginDocument{%
  \@ifpackageloaded{htmltabs}{%
    \def\ccf@reserve@htmltab{%
      \let\ccf@add@style\@empty
      \ifx\ccf@floatpos\@empty
        \expandafter\ifx\csname \ccPrefix Float\the\ccf@int@cnt Captop\endcsname\relax\else
          \htInitSkip\csname \ccPrefix Float\the\ccf@int@cnt Captop\endcsname
          \advance\htInitSkip\ccf@sep@top%
        \fi
        \expandafter\ifx\csname \ccPrefix Float\the\ccf@int@cnt Capbottom\endcsname\relax\else
          \htAddToBottom\csname \ccPrefix Float\the\ccf@int@cnt Capbottom\endcsname
          \advance\htAddToBottom\ccf@sep@bottom%
        \fi
      \else
        \def\ccf@add@style{;break-table:false;}%
      \fi
      \edef\cc@tempa{margin-left:\ccf@margin@l\ccf@add@style}%
      \expandafter\htAddStyle\expandafter{\cc@tempa}%
      \global\setbox\htTableBox\box\voidb@x
      \let\htOutputTable\relax
    }}{\let\ccf@reserve@htmltab\relax}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{The Table Output Handler}
%
% \begin{macro}{\ccfGetTableContent} returns the
%   \lstinline{\ccf@floatbox} if it is not un-itialized or void.
%    \begin{macrocode}
\def\ccfGetTableContent{%
  \ifx\htTableBox\@undefined\else
    \ifvoid\htTableBox\else
      \let\ccf@floatbox\htTableBox%
    \fi\fi}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ccfTableRender} is the content of the
%   \UsageProperty{float-render} Property specific for tables.
%    \begin{macrocode}
\def\ccfTableRender{%
  \ccfGetTableContent
  \ccComponent{Content}{\unvbox\ccf@floatbox}%
  \ccUseComp{Content}%
  \ccaStructStart{Table}%
  \ifx\ht@structID@THead\@undefined\else\ccaMoveStruct{\ht@structID@THead}\fi%
  \ifx\ht@structID@TBody\@undefined\else\ccaMoveStruct{\ht@structID@TBody}\fi%
  \ifx\ht@structID@TFoot\@undefined\else\ccaMoveStruct{\ht@structID@TFoot}\fi%
  \par\if@ccf@break@capt\else\nopagebreak\fi
  \vskip\dp\strutbox
  \ccaStructEnd{Table}%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ccfSubTableRender} Is the content of the
%   table-specific \UsageProperty{subfloat-render} Property
%
%   \textbf{Note} that table sub-floats aren't allowed yet, so this
%   definition is un-used at the moment. TeX will crash with an error
%   message before this Property is ever expanded.
%    \begin{macrocode}
\def\ccfSubTableRender{%
  \cc@iterate{\@tempcnta}{\@ne}{\ccSubFloatCnt}{%
    \ccfGetTableContent
    \@cc@is@finalfalse
    \ccComponent{Content}{\unvbox\ccf@floatbox}%
    \@cc@is@finaltrue
    \ccfRenderSubFloats{\the\@tempcnta}{Content}%
  }}
%    \end{macrocode}
% \end{macro}
%
%
% \section{Other Float-Related Macros}
%
% \begin{macro}{\ccFloatBarrier} can be used to force all pending floats
% to be printed at the next shipout.
%    \begin{macrocode}
\def\ccFloatBarrier{\AtBeginShipoutNext{\clearpage}}
%    \end{macrocode}
% \end{macro}
%
%
% Output Driver for the \lstinline{coco-floats.sty}.
%    \begin{macrocode}[numbers=none,gobble=1]
%</floats>
%    \end{macrocode}
