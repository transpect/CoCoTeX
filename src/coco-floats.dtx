% \chapter{coco-floats.dtx}
% This module provides handlers for floating objects like tables and
% figures common to all {\CoCoTeX} projects
%
%    \begin{macrocode}[gobble=1]
%<*floats>
%    \end{macrocode}
%    \begin{macrocode}
%%
%% module for CoCoTeX that extends floating objects.
%%
%% Maintainer: p.schulz@le-tex.de
%%
%% lualatex  -  texlive > 2019
%%
\NeedsTeXFormat{LaTeX2e}[2018/12/01]
\ProvidesPackage{coco-floats}
    [\filedate \fileversion CoCoTeX floats module]
\DeclareOptionX{nofigs}{\global\let\tp@nofigs\relax}
\ProcessOptionsX
%    \end{macrocode}
% \section{Package Setup}
% \subsection{Hard requirements}
%    \begin{macrocode}
\RequirePackage{coco-common}
\RequirePackage{rotating}
\RequirePackage{grffile}
\RequirePackage{footnote}
\RequirePackage[Export]{adjustbox}
\usepackage{stfloats}
\setcounter{dblbotnumber}{5}
%    \end{macrocode}
% \subsection{Document Class Option overrides}
%
% for automatic typesetting and float positioning, we set very high
% tolerances in macros from \LaTeX's standard \section{.clo} files:
%    \begin{macrocode}
\def\topfraction{0.9}
\def\textfraction{0.1}
\def\bottomfraction{0.8}
\def\totalnumber{8}
\def\topnumber{8}
\def\bottomnumber{8}
\def\floatpagefraction{0.8}
\@fptop\z@
\@fpbot\@flushglue
%    \end{macrocode}
%
% \subsection{Internal registers}
%
% Some reserved box registers for measuring, the first one,
% \lstinline{\tp@floatbox}, is for the whole float, the second one,
% \lstinline{\tp@subfltbox}, is for a single sub-float. The third one,
% \lstinline{\tp@calcfltbox}, is used to calculate the overall
% dimensions of the float.
%    \begin{macrocode}
\newbox  \tp@floatbox
\newbox  \tp@subfltbox
\newbox  \tp@calcfltbox
%    \end{macrocode}
% Internal counters: \lstinline{\tpSubFloatCnt} counts the sub-floats
% within a single float, \lstinline{\tp@int@flt@cnt} is the internal
% global counter for all floats.
%    \begin{macrocode}
\newcount\tpSubFloatCnt       \tpSubFloatCnt=\z@\relax
\newcount\tp@int@flt@cnt      \tp@int@flt@cnt\z@
%    \end{macrocode}
% Various dimension registers that store dimensions and spaces of floats and sub-floats:
% \begin{itemize}
% \item \lstinline{\tp@subflt@maxheight} stores and self-updates the
%   height of the largest sub-float inside a float
% \item \lstinline{\tp@subflt@sep} is the space between sub-floats
% \item \lstinline{\tp@total@flt@width} stores the cumulated overall
%   width of the entire float
% \item \lstinline{\tp@calc@flt@width} is an internal dimension used
%   to calculate the ratio between mutiple sub-floats that should be
%   scaled to the same height
% \item \lstinline{\tp@total@flt@height} is the overall height of a float
% \item \lstinline{\tp@total@flt@depth} is the overall depth of a float
% \end{itemize}
%    \begin{macrocode}
\newdimen\tp@subflt@maxheight \tp@subflt@maxheight=\z@\relax
\newdimen\tp@subflt@sep       \tp@subflt@sep=\fboxsep\relax
\newdimen\tp@total@flt@width  \tp@total@flt@width=\textwidth\relax
\newdimen\tp@calc@flt@width   \tp@calc@flt@width=\tp@total@flt@width\relax
\newdimen\tp@total@flt@height \tp@total@flt@height=\textwidth\relax
\newdimen\tp@total@flt@depth  \tp@total@flt@depth=\textwidth\relax
%    \end{macrocode}
% Those two dimensions are used to pass the \lstinline{intext-skip}
% and \lstinline{float-skip} Properties to the render engine for
% spacing above and below the float, respectively.
%    \begin{macrocode}
\newskip\tp@flt@sep@top      \tp@flt@sep@top=\z@\relax
\newskip\tp@flt@sep@bottom   \tp@flt@sep@bottom=\z@\relax
%    \end{macrocode}
% Internal dimensions for the horizontal margins (right, left, inner
% and outer, respectively)
%    \begin{macrocode}
\newdimen\tp@flt@marg@r       \tp@flt@marg@r=\z@\relax
\newdimen\tp@flt@marg@l       \tp@flt@marg@l=\z@\relax
\newdimen\tp@flt@marg@i       \tp@flt@marg@i=\z@\relax
\newdimen\tp@flt@marg@o       \tp@flt@marg@o=\z@\relax
%    \end{macrocode}
% Locally adjustable switch to allow captions to break across pages
%    \begin{macrocode}
\newif\if@tp@flt@break@capt   \@tp@flt@break@captfalse
%    \end{macrocode}
% String definitions for Property value comparisons
%    \begin{macrocode}
\def\tp@str@figure{figure}
\def\tp@str@table{table}
\def\tp@str@bottom{bottom}
\def\tp@str@top{top}
%    \end{macrocode}
%
% \subsection{AtBeginDocument hook}
%
%    \begin{macrocode}
\AtBeginDocument{%
%    \end{macrocode}
% implementing the \lstinline{nofigs} option, doing some minor
% adjustments to the \lstinline{htmltabs} package and store the final
% definition of includegraphics.
%    \begin{macrocode}
  \ifx\tp@nofigs\relax
    \renewcommand\includegraphics[2][]{}%
  \fi
  \global\let\tpltx@includegraphics\includegraphics
%    \end{macrocode}
% Adjustments to the \lstinline{htmltabs} package, if it is used:
%    \begin{macrocode}
  \@ifpackageloaded{htmltabs}
    {\global\let\tp@uses@htmltabs\relax
     \def\ht@adjust@linewidth{%
       \advance\ht@h@offset\leftskip
       \advance\ht@h@offset\@totalleftmargin
       %\advance\linewidth-\leftskip
       \advance\linewidth-\rightskip
     }%
    }{}%
%    \end{macrocode}
% In order to catch the actual dimensions of the float box, we need to
% hook into \LaTeX's \lstinline{\@endfloatbox} macro. This macro is
% low-level enough so it covers regular, double-column, and rotated
% floats. Those values will later be written into the \lstinline{.aux}
% file for each float. The values, together with the float's overall
% width, are stored in a macro called
% \lstinline{tp-float-\the\tp@int@flt@cnt-dimens}.
%    \begin{macrocode}
  \gappto\@endfloatbox{%
    \global\tp@total@flt@height=\ht\@currbox\relax%
    \global\tp@total@flt@depth=\dp\@currbox\relax%
  }%
}%

%    \end{macrocode}
%
% \section{Internal macros}
%
% \subsection{Generic resetter}
%
% \begin{macro}{\tp@flt@reset@defaults} resets the parameters for
%   sub-floats.
%   \begin{description}
%   \item[\#1] the caption type (e.g., \lstinline{figure}, \lstinline{table})
%   \item[\#2] abbreviation of the caption list (e.g., standard
%     {\LaTeX} uses \lstinline{lof} for the List of Figures,
%     \lstinline{lot} for the List of Tables)
%   \end{description}
%    \begin{macrocode}
\def\tp@flt@reset@defaults{%
  \global\tpSubFloatCnt=\z@
  \global\tp@total@flt@width=\z@
  \global\let\tp@has@capt@top\@undefined
  \global\let\tp@has@capt@bottom\@undefined
  \global\let\tp@has@subcapt@top\@undefined
  \global\let\tp@has@subcapt@bottom\@undefined
  \global\let\ccf@sub@contentsline@store\@empty
  \global\tp@subflt@maxheight=\z@\relax
  \@tempcnta=\z@\relax
  \tp@reset@components{\tp@cur@cont}%
  \let\tp@prefix\@empty
  \let\ht@cur@element\tp@captype
  \global\let\tp@current@class\relax
}
%    \end{macrocode}
% \end{macro}
%
% \subsection{Internal macros that handle Attributes}
%
% \begin{macro}{\tp@get@flt@attr} invokes the parser for the optional
%   argument of float environments.
%   \begin{description}
%   \item[\#1] is the content of the optional argument,
%   \item[\#2] is the caption type.
% \end{description}
%    \begin{macrocode}
\def\tp@get@flt@attr#1#2{%
  \if!#1!\else
    \tpParseAttributes{#2}{#1}%
    \tpIfAttr{#2}{class}
      {\global\letcs\tp@current@class{tp@#2@attr@class}%
       \tpUseClass{default}{\tp@captype}%
       \expandafter\tpUseClass\expandafter{\csname tp@#2@attr@class\endcsname}{\tp@captype}}
      {}%
      \tpIfAttr{#2}{break-caption}{\@tp@flt@break@capttrue}{}%
  \fi
  \tp@get@flt@pos{#2}}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tp@get@flt@pos} is the handler for determining the
%   floating position. Some float Properties and Attributes restrict
%   and override the explicit float positions, e.g., fully rotated
%   floats must be positioned in \lstinline{p} mode (i.e., as float
%   page). \#1 is the caption type.
%    \begin{macrocode}
\def\tp@get@flt@pos#1{%
  \tpIfAttr{#1}{float-pos}
    {\letcs\tp@fps{tp@#1@attr@float-pos}}
    {\let\tp@fps\@empty}%
  \def\@tempa{h!}\ifx\tp@fps\@tempa\let\tp@fps\@empty\fi
  \def\@tempa{h}\ifx\tp@fps\@tempa\def\tp@fps{htbp!}\fi
  \ifx\tp@do@dblfloat\relax
    \ifx\tp@fps\@empty\def\tp@fps{htpb!}\fi% 11514
    \linewidth\dimexpr2\columnwidth+\columnsep\relax
    \hsize\linewidth\relax
  \fi
  \tpIfAttrStr{#1}{orientation}{landscape}
    {\linewidth\textheight
     \hsize\linewidth
     \def\tp@fps{p}}
    {}}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tp@set@flt@env} determines the low-level {\LaTeX}
%   float environment depending on orientation and document options.
%   If no \lstinline{float-pos} is given (implicitely or determined),
%   the object is not treated as a float at all.
%    \begin{macrocode}
\def\tp@set@flt@env{%
  \ifx\tp@fps\@empty
    \let\tp@b@float\relax
    \let\tp@e@float\relax
    \ifhmode\par\fi
  \else
    \let\tp@b@float\tp@captype%
    \tpIfAttrStr{\tp@captype}{orientation}{landscape}
      {\edef\@tp@b@float{sideways\tp@b@float}%
       \edef\tp@b@float{\noexpand\begin{\@tp@b@float\ifx\tp@do@dblfloat\relax*\fi}}%
       \edef\tp@e@float{\noexpand\end{\@tp@b@float\ifx\tp@do@dblfloat\relax*\fi}}}
      {\edef\tp@flt@env{\ifx\tp@do@dblfloat\relax dbl\fi}%
       \edef\tp@b@float{\expandafter\noexpand\csname @x\tp@flt@env float\endcsname {\tp@captype}[\tp@fps]}%
       \edef\tp@e@float{\expandafter\noexpand\csname end@\tp@flt@env float\endcsname}}%
   \fi}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tp@flt@debug} prints some debug information to
%   \lstinline{stdout} for a single float that has the Attribute
%   \lstinline{debug} set.
%    \begin{macrocode}
\def\tp@flt@debug#1{%
  \tpIfAttr{#1}{debug}
  {\message{^^J[tp Float Debug]^^J
      Textheight:\space\the\textheight^^J
      Type:\space\space\space\space\space\space\space\tp@cur@cont^^J
\ifx\tp@captype\tp@str@figure
      Path: \space\space\space\space\space\space\@tp@fig@path^^J
\fi
      Class:\space\space\space\space\space\space\tp@current@class^^J
      Floatpos:\space\space\space\tp@fps^^J
      Environ:\space\space\space\space\expandafter\noexpand\tp@b@float...\expandafter\noexpand\tp@e@float^^J
      Subfloat:\space\space\space               \the\tpSubFloatCnt^^J
\ifnum\tpSubFloatCnt=\z@
      Width:\space\space\space\space\space\space\the\tp@total@flt@width^^J
      Height:\space\space\space\space\space\the\tp@total@flt@height^^J
      Depth:\space\space\space\space\space\space\the\tp@total@flt@depth^^J
\else
      Width \the\tpSubFloatCnt:\space\space\space\space\space\space\expandafter\meaning\csname tp@\tp@cur@cont @width-\the\tpSubFloatCnt\endcsname^^J
      Height \the\tpSubFloatCnt:\space\space\space\space\space     \expandafter\meaning\csname tp@\tp@cur@cont @height-\the\tpSubFloatCnt\endcsname^^J
      Depth \the\tpSubFloatCnt:\space\space\space\space\space\space\expandafter\meaning\csname tp@\tp@cur@cont @depth-\the\tpSubFloatCnt\endcsname^^J
\fi}}{}}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tp@get@seps} determines the top and bottom skips
%   dependent on float position and orientation
%    \begin{macrocode}
\def\tp@get@seps{%
  \ifx\tp@fps\@empty
    \expandafter\tp@flt@sep@top\dimexpr\tpUseProperty{intext-skip-top}\relax%
  \else
    \expandafter\tp@flt@sep@top\dimexpr\tpUseProperty{float-skip-top}\relax%
  \fi
    \tpIfAttrStr{\tp@captype}{orientation}{landscape}{}
      {\ifx\tp@fps\@empty
         \expandafter\tp@flt@sep@bottom\dimexpr\tpUseProperty{intext-skip-bottom}\relax%
       \else
         \expandafter\tp@flt@sep@bottom\dimexpr\tpUseProperty{float-skip-bottom}\relax%
       \fi}}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tp@set@*@sep} Hooks to apply top and bottom skips,
%   respectively.
%    \begin{macrocode}
\def\tp@set@top@sep{\addvspace{\tp@flt@sep@top}}
\def\tp@set@bot@sep{\addvspace{\tp@flt@sep@bottom}}
%    \end{macrocode}
% \end{macro}
%
% \section{Float Container and Component Declarations}
%
% \begin{macro}{\tpMakeFltComp} is a shortcut for float Component
%   declarations. \#1 is the generic name of the Component.
%    \begin{macrocode}
\def\tpMakeFltComp#1{%
  \tp@def@counted@comp{#1-\the\tpSubFloatCnt}{#1}{\ifx\tp@is@subflt\relax\else\tpSubFloatCnt=\z@\relax\fi}{}%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tpMakeFltCompL} is a shortcut to declare Float
%   Components together with their \lstinline{list-of} overrides. \#1
%   is the generic name of the Component.
%    \begin{macrocode}
\def\tpMakeFltCompL#1{%
  \tpMakeFltComp{#1}%
  \tpMakeFltComp{Listof#1}}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tp@flt@set@hsize} calculates the available maximum
%   width for the float contents and captions according to the values
%   of the \lstinline{margin-right} and the \lstinline{margin-left}
%   properties.
%    \begin{macrocode}
\def\tp@flt@set@hsize{%
  \expandafter\tp@subflt@sep\tpUseProperty{sub-float-sep}\relax%
  \global\tp@total@flt@width=\hsize\relax
  \expandafter\tp@flt@marg@l\tpUseProperty{margin-left}\relax
  \expandafter\tp@flt@marg@r\tpUseProperty{margin-right}\relax
  \expandafter\tp@flt@marg@i\tpUseProperty{margin-inner}\relax
  \expandafter\tp@flt@marg@o\tpUseProperty{margin-outer}\relax
  \tp@flt@set@margins
  \global\advance\tp@total@flt@width-\tp@flt@marg@r\relax
  }
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tp@flt@set@margins} realises inner and outer margins
%   via the left and right margins.
%    \begin{macrocode}
\def\tp@flt@set@margins{%
  \tp@test@page
  \if@tp@odd
    \advance\tp@flt@marg@l\tp@flt@marg@i
    \advance\tp@flt@marg@r\tp@flt@marg@o
  \else
    \advance\tp@flt@marg@l\tp@flt@marg@o
    \advance\tp@flt@marg@r\tp@flt@marg@i
  \fi
}
%    \end{macrocode}
% \end{macro}
% \begin{tpContainer}{float}
%    \begin{macrocode}
\DeclareContainer{float}{%
  \tpDeclareType{Components}{%
    \tpMakeFltCompL{Caption}%
    \tpMakeFltCompL{Legend}%
    \tpMakeFltCompL{Source}%
    \tpMakeFltCompL{Number}%
    \tpMakeFltComp{RefLabel}%
    \tpMakeFltComp{AltText}% neu: 2023-06-08; TODO: muss noch implementiert werden
  }%
  \tpDeclareType{Properties}{}%
}
%    \end{macrocode}
% \begin{macro}{\tpDeclareFloat} is the user-level macro used to
%   (re-)declare a (new) \lstinline{tpFloat} environment.
%   \begin{description}
%   \item[\#1] Name of the float Container from which the declared
%     Container should inherit Properties (\textit{optional})
%   \item[\#2] top-level name of the float environment (e.g.,
%     \texttt{tpTable}, \texttt{tpFigure})
%   \item[\#3] caption type (e.g., \texttt{table}, \texttt{figure})
%   \item[\#4] list (e.g., \texttt{lot}, \texttt{lof})
%   \item[\#5] Property list
%   \end{description}
%    \begin{macrocode}
\def\tpDeclareFloat{\cc@opt@empty\@tpDeclareFloat}
\long\def\@tpDeclareFloat[#1]#2#3#4#5{%
  \def\tp@float@parent{#1}%
%    \end{macrocode}
% If the float Container has already been declared, we only load its
% parent's Properties and Containers (if any), and add the override
% Properties to the Container's Property List. Otherwise, we would
% re-load the system's defaults and override the Properties of the
% earlier Declaration.
%    \begin{macrocode}
  \ifcsdef{tp@container@#2}{%
    \ccPackageInfo{Floats}{}{Appending to `#2'}%
    \ifx\tp@float@parent\@empty\else
      \ccPackageError{Float}{Type}
        {Attempt to change parent of pre-existing float^^JContainer `#2'}
        {You cannot use the optional argument of \string\tpDeclareFloat\space for pre-existing^^J%
float containers!^^J^^J%
Use \string\tpAddToType{<Type>}{#2}{<code>}\space to alter the #2 container!}
    \fi
    \tpAddToType{Properties}{#2}{#5}%
%    \end{macrocode}
% Other than Properties, the Float's default caption type or list-of
% handler may also be overridden by a re-definition.
%    \begin{macrocode}
    \tpAddToType{FloatEnvInfo}{#2}{%
      \def\tp@captype{#3}%
      \def\tp@caplisttype{#4}%
    }%
  }{%
%    \end{macrocode}
% Otherwise, we declare a new Container and invoke all the
% Initializers.
%    \begin{macrocode}
    \DeclareContainer{#2}{%
      \ccPackageInfo{Floats}{}{Declaring float `#2'}%
      \ifx\tp@float@parent\@empty
        \tpInherit{Properties,Components}{float}
      \else
        \tpInherit{Properties,Components}{\tp@float@parent}
      \fi
      \tpDeclareType{FloatEnvInfo}{%
        \tpNamespace{#2}%
        \def\tp@captype{#3}%
        \def\tp@caplisttype{#4}%
      }% /FloatEnvInfo
%    \end{macrocode}
% The macro actually defines two {\LaTeX} environments; a normal one
% for one-column floats, and a starred one for page-wide floats in
% two-column mode.
%    \begin{macrocode}
      \tpDeclareEnv[#2]{\tp@float}{\endtp@float}%
      \tpDeclareEnv[#2*]{\if@twocolumn\let\tp@do@dblfloat\relax\else\fi\tp@float}{\if@twocolumn\let\tp@do@dblfloat\relax\fi\endtp@float}%
      \tpDeclareType{Components}{%
        \tpUseProperty{float-handler}%
      }%
%    \end{macrocode}
% Generating the Handlers for the list-of entries and define the
% corresponding \lstinline{l@} macros
%    \begin{macrocode}
      \tp@flt@generate@listof@handlers{#4}{#3}{#2}%
      \bgroup
        \def\tp@cur@cont{#2}%
        \tp@init@l@[list-of]{#4}{0}{#3}% Generate listof-Entries for first level floats
        \tp@init@l@[list-of]{#4}{1}{sub#3}% Generate listof-Entries for sub-floats
      \egroup
      \tpDeclareType{Properties}{#5}%
    }% /container
  }% /ifcsdef{tp@container@#2}
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tp@flt@generate@listof@handlers} generates handlers
%   for listof-entries.
%   \begin{description}
%   \item[\#1] is the file ending
%   \item[\#2] is the caption type
%   \item[\#3] is the Container name
%   \end{description}
%    \begin{macrocode}
\def\tp@flt@generate@listof@handlers#1#2#3{%
%    \end{macrocode}
% \begin{macro}{tp@<list>@extract@data}
%   The first macro that is dynamicly defined, is the Component
%   collector.
%   \begin{description}
%   \item[\#\#1] is a numeric level that represents the order of the
%     listof-entries
%   \item[\#\#2] is the caption type
%   \item[\#\#3] is the content of the \lstinline{l@<level>} macro
%   \item[\#\#4] is the page number associated with that entry.
%   \end{description}
%    \begin{macrocode}
  \expandafter\gdef\csname tp@#1@extract@data\endcsname##1##2##3##4{%
    \tpNamespace{#3}%
    \tpEvalType[#3]{Properties}%
    \tpDeclareComp{ListofCaption}{}{}%
    \tpDeclareComp{ListofLegend}{}{}%
    \tpDeclareComp{ListofSource}{}{}%
    \tpDeclareComp{ListofNumber}{}{}%
    \tpDeclareComp{ListofPage}{}{}%
    \tpListofPage{\tpUseProperty{list-of-page-face}##4}%
    \tp@expand@l@contents{##3}{#3}{Listof}{Caption}%%
    \tp@format@number{list-of-}{Listof}{##1}%
  }%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\csname tp@<list>@print@entry\endcsname}
%   The second dynamically defined macro is the entry renderer. It
%   applies the Listof properties and selects the components to be
%   printed. \#\#1 is the caption type of the float.
%    \begin{macrocode}
  \expandafter\gdef\csname tp@#1@print@entry\endcsname##1{%
    \bgroup
      \tpUseHook{list-of-before-hook-##1}%
      \tpUseProperty{list-of-before-entry}%
      \tpUseProperty{list-of-block}%
      \tpUseHook{list-of-after-hook-##1}%
      \tpUseProperty{list-of-after-entry}%
    \egroup}%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\csname tp@make@listof@<type>\endcsname}
%   The last macro to be defined here is the list-of writer. This
%   macro is responsible to write the entry into TeX's auxiliary file
%   system. \#\#1 is the name of the ``level'' for the entry.
%    \begin{macrocode}
  \expandafter\gdef\csname tp@make@listof@#2\endcsname##1{%
    \tpGobble
    \tp@flt@check@empty{Number}{number}%
    \tp@flt@check@empty{Caption}{caption}%
    \tp@flt@check@empty{Legend}{legend}%
    \tp@flt@check@empty{Source}{source}%
    \tpIfAttrIsset{#2}{nolist}{}
      {\let\@tp@listof@entry\relax
      \tpIfComp{ListofCaption}{\csgappto{@tp@listof@entry}{\string\tpListofCaption{\tpUseComp{ListofCaption}}}}{}%
      \tpIfComp{ListofNumber}{\csgappto{@tp@listof@entry}{\string\tpListofNumber{\tpUseComp{ListofNumber}}}}{}%
      \tpIfComp{ListofLegend}{\csgappto{@tp@listof@entry}{\string\tpListofLegend{\tpUseComp{ListofLegend}}}}{}%
      \tpIfComp{ListofSource}{\csgappto{@tp@listof@entry}{\string\tpListofSource{\tpUseComp{ListofSource}}}}{}%
      \ifx\@tp@listof@entry\relax
        \ifx\tp@is@subflt\relax\else
          \ccf@restore@contentsline
        \fi
      \else
        \protected@edef\tp@listof@entry{\@tp@listof@entry}%
        \ifx\tp@is@subflt\relax
          \ccf@store@sub@contentsline{#1}{\tp@captype}{\expandonce{\tp@listof@entry}}%
        \else
          \ccf@addcontentsline{#1}{\tp@captype}{\expandonce{\tp@listof@entry}}%
          \ccf@restore@contentsline
        \fi
      \fi
    }%
  }%
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \begin{macro}{\ccf@store@sub@contentsline} saves the contentsline macros
%   for prematurely expanded captions.
%
%   If we immediatetly write the list-of entries for sub-floats into
%   the list-of files, they will be printed before their respective
%   parent entry. This is because sub-floats are processed before
%   their parent floats. To avoid the wrong order in the list-of, we
%   progressively store the sub-float's addcontentsline commands in
%   the \lstinline{\ccf@sub@contentsline@store} macro and expand it
%   after the list-of for the parent float has been processed.
%    \begin{macrocode}
\def\ccf@store@sub@contentsline#1#2#3{%
  \protected@xdef\ccf@sub@contentsline@store{\expandonce{\ccf@sub@contentsline@store}\noexpand\ccf@addcontentsline{#1}{#2}{#3}\relax}}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tp@restore@contetnsline} restores and expands the
%   list of sub-float addcontentsline commands, if there are any.
%    \begin{macrocode}
\def\ccf@restore@contentsline{%
  \ifx\ccf@sub@contentsline@store\@empty\else
    \ccf@sub@contentsline@store
    \global\let\ccf@sub@contentsline@store\@empty
  \fi
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ccf@addcontentsline} fork of \LaTeX's \lstinline{\addtocontents} macro
%   \begin{description}
%   \item[\#1] extension of the list file
%   \item[\#2] caption type; passed to the first argument of \LaTeX's \lstinline{\contentsline}
%   \item[\#3] the entry itself; passed to the second argument of \LaTeX's \lstinline{\contentsline}
%   \end{description}
%    \begin{macrocode}
\def\ccf@addcontentsline#1#2#3{%
  \protected@write\@auxout
    {\tpGobble}%
    {\string\@writefile{#1}{\protect\tpContentsline{#2}{#3}{\thepage}{\@currentHref}\protected@file@percent}}\relax
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tp@flt@check@empty} fork of CoCoTeX kernel's \lstinline{\tp@check@empty}, probably DEPRECATED(?)
%    \begin{macrocode}
\def\tp@flt@check@empty#1#2{%
  \ifx\tp@is@subflt\relax\else\tpSubFloatCnt\z@\fi
  \tpIfComp{Listof#1}
    {}
    {\tpIfComp{#1}
      {\csletcs{tp@\tp@cur@cont @Listof#1-\the\tpSubFloatCnt}{tp@\tp@cur@cont @#1-\the\tpSubFloatCnt}}
      {\csname Listof#1\endcsname{}}}}
%    \end{macrocode}
% \end{macro}
% \end{tpContainer}
%
% \section{Label and Referencing mechanisms}
%
% \begin{macro}{\ccf@create@counters} creates auto-numbered
%   counters. We advance the caption type only locally since they are
%   automatically and globally updated when
%   \lstinline{\tp@make@anchors} is called.
%    \begin{macrocode}
\def\ccf@create@counters{%
  \tpIfAttrIsset{\tp@captype}{nonumber}{}
    {\tpIfPropVal{numbering}{auto}
      {\tpIfComp{number-0}
         {}%
         {\expandafter\advance\csname c@\tp@captype\endcsname\@ne\relax
          \tp@set@label{0}%
          \expandafter\advance\csname c@\tp@captype\endcsname\m@ne\relax
         }%
       \ifnum\tpSubFloatCnt=\z@\relax\else
         \@tempcnta\z@
         \tp@iterate{\@tempcnta}{\@ne}{\tpSubFloatCnt}{%
           \tpIfComp{number-\the\@tempcnta}
             {}%
             {\tpIfAttr{\tp@captype}{subfloat}
                {\tp@set@sublabel{\the\@tempcnta}}
                {\expandafter\advance\csname c@\tp@captype\endcsname\@ne\relax
                 \tp@set@label{\the\@tempcnta}%
                 \expandafter\advance\csname c@\tp@captype\endcsname\m@ne\relax}}}%
       \fi}
      {}%
   }}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tp@set@label} generates the first level float counter. \#1 is the sub-float counter.
%    \begin{macrocode}
\def\tp@set@label#1{%
  \expandafter\expandafter\expandafter\edef\expandafter\csname tp@\tp@cur@cont @number-#1\expandafter\endcsname\expandafter{\csname the\tp@captype\endcsname}%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\tp@set@sublabel} generates second level counters for
%   numbered sub-floats. \#1 is the sub-float counter
%
% TODO: float-number und sub-number sollten beides Components sein, nicht Properties!
%    \begin{macrocode}
\def\tp@set@sublabel#1{%
  \tpSetValProp{float-number}{\csname tp@\tp@cur@cont @number-0\endcsname}%
  \tpSetValProp{sub-number}{%
    \begingroup
      \expandonce{\tpUseProperty{sub-number-face}}%
      \relax\tpUseProperty{sub-number-before}%
      \csname @\tpUseProperty{sub-number-style}\endcsname{#1}%
      \tpUseProperty{sub-number-after}%
    \endgroup}%
  \expandafter\expandafter\expandafter\edef\expandafter\csname tp@\tp@cur@cont @number-#1\expandafter\endcsname\expandafter{\tpUseProperty{sub-number-format}}%
}
%    \end{macrocode}
% \end{macro}
%
% The next two macros are a re-implementation of
% \lstinline{hyperref}'s anchor mechanism to make labels work. If no
% explicit label is given, the mechanism generates one, unique to each
% (sub)float.
% \begin{macro}{\tp@make@anchors} iterates through the (sub-)floats of
%   a \lstinline{float} Container instance and generates the anchor
%   (and hidden label, if necessary) for each of them
%    \begin{macrocode}
\def\tp@make@anchors{\@tempcnta\z@\tp@iterate{\@tempcnta}{\z@}{\tpSubFloatCnt}{\tp@make@anchor{\the\@tempcnta}}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\tp@make@anchors} generates the anchor and label of a
%   single (sub-)float. \#1 is the value of the internal sub-float counter.
%    \begin{macrocode}
\def\tp@make@anchor#1{%
  \bgroup
    \tpSubFloatCnt#1\relax
    \tpIfComp{RefLabel}
      {\expandafter\let\expandafter\@currentlabel\csname tp@\tp@cur@cont @number-\the\tpSubFloatCnt\endcsname}
      {\edef\@currentlabel{tp-\tp@cur@cont-number-\the\tp@int@flt@cnt}}%
    \expandafter\H@refstepcounter\expandafter{\tp@captype}%
    \expandafter\hyper@makecurrent\expandafter{\tp@captype}%
    \global\let\Hy@tempa\Hy@float@caption
    \expandafter\hyper@@anchor\expandafter{\@currentHref}{\relax}%
    \tpIfComp{RefLabel}
      {\expandafter\let\expandafter\@currentlabel\csname tp@\tp@cur@cont @number-\the\tpSubFloatCnt\endcsname
       \edef\@tempa{\tpUseComp{RefLabel}}%
       \expandafter\cc@ltx@label\expandafter{\@tempa}}{\relax}%
  \egroup}
%    \end{macrocode}
% \end{macro}
% 
% \begin{macro}{\ccfCreateLabel} creates
%    \begin{macrocode}
\def\ccfCreateLabel{%
  %\tpIfComp{Number}
  %  {\letcs\@currentlabel{tp@\tp@cur@cont @number-\the\tpSubFloatCnt}}
  %  {\letcs\@currentlabel{tp-\tp@cur@cont-number-\the\@tp@int@flt@cnt}}%
  %\expandafter\H@refstepcounter\expandafter{\tp@captype}%
  %\let\Hy@tempa\Hy@float@caption
  \def\cc@labelname@comp{Caption}
  %\expandafter\hyper@@anchor\expandafter{\@currentHref}{\relax}%
  \expandafter\ccCreateLabel\expandafter{\tp@captype}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \section{Processing the Float}
%
% \subsection{Common Float and Sub-Float Environments}
%
% \begin{macro}{\tp@float} is a mid-level Macro that provides the
%   common floating {\LaTeX} environment. \#1 is the float
%   environment's kv-attribute list.
%   \begin{description}
%   \item[\#1] float position (optional)
%   \end{description}
%    \begin{macrocode}
\def\tp@float{\cc@opt@empty\@tp@float}
\def\@tp@float[#1]{%
  \par
  \begingroup
    \global\advance\tp@int@flt@cnt\@ne
    \tpEvalType{FloatEnvInfo}%
    \tp@flt@reset@defaults
    \tpToggleCountedCond
    \tpEvalType{Properties}%
    \tp@get@flt@attr{#1}{\tp@captype}%
    \tp@flt@set@hsize
    \tp@get@seps
    \tpEvalType{Components}%
    \tpUseProperty{before-float}%
    \tp@set@flt@env
    \ifx\tp@fps\@empty\else\savenotes\fi
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\endtp@float} is the end of the common float
%   environment.
%    \begin{macrocode}
\def\endtp@float{%
    \tp@b@float
    \tp@set@top@sep
    \ccf@test@caption{0}{capt}{top}%
    \ccf@test@caption{0}{capt}{bottom}%
    \ccf@create@counters%
    \tp@flt@compose
    \tp@save@page
    \tp@set@bot@sep
    \tp@e@float
    \tp@flt@debug{\tp@captype}%
    \ifx\tp@fps\@empty\else\spewnotes\fi
  \endgroup
  \immediate\write\@auxout
    {\string\expandafter\string\gdef\string\csname\space tp-float-\the\tp@int@flt@cnt-dimens\string\endcsname{%
        {\the\tp@total@flt@width}%
        {\the\tp@total@flt@height}%
        {\the\tp@total@flt@depth}%
      }}%
  \global\let\tp@current@class\relax
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tpSubFloat} is the user-level environment for sub-floats
%
% TODO: transform into a Component Group
%    \begin{macrocode}
\def\tpSubFloat{%
  \ifx\tp@is@subflt\relax
    \PackageError{coco-floats.sty}{Nested tpSubFloats detected!}{You cannot (yet) nest a `tpSubFloat' environment into another `tpSubFloat' environment!}%
  \else
    \let\tp@is@subflt\relax
    \global\advance\tpSubFloatCnt\@ne
    \ignorespaces
  \fi}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\endtpSubFloat} is the end of the sub-float environment
%    \begin{macrocode}
\def\endtpSubFloat{%
  \tpUseProperty{subfloat-handler}%
  \expandafter\xdef\csname tp@\tp@cur@cont @width-\the\tpSubFloatCnt\endcsname{\the\wd\tp@subfltbox}%
  \expandafter\xdef\csname tp@\tp@cur@cont @height-\the\tpSubFloatCnt\endcsname{\the\ht\tp@subfltbox}%
  \expandafter\xdef\csname tp@\tp@cur@cont @depth-\the\tpSubFloatCnt\endcsname{\the\dp\tp@subfltbox}%
  \@tempdima=\dimexpr\the\ht\tp@subfltbox+\the\dp\tp@subfltbox\relax
  \@tempdimb=\dimexpr\the\wd\tp@subfltbox\relax
  \ifdim\@tempdima>\tp@subflt@maxheight\relax
    \global\tp@subflt@maxheight=\@tempdima\relax
  \fi
  \ignorespaces
  \tpIfAttr{\tp@captype}{subfloat}
    {\csname tp@make@listof@\tp@captype\endcsname{sub\tp@captype}}% real subfloats
    {\csname tp@make@listof@\tp@captype\endcsname{\tp@captype}}% subfloats are counted separately
  \setbox\tp@subfltbox\box\voidb@x
  \let\tp@is@subflt\@undefined
}
%    \end{macrocode}
% \end{macro}
%
% \subsection{Processing the Contents of the Float Environment}
%
% \begin{macro}{\tp@flt@process} prints the contents of a float
%   environment.
%    \begin{macrocode}
\def\tp@flt@process{%
  \tp@test@subcapt
  \ifx\tp@has@capt@top\@empty\leavevmode\fi
  \tp@make@outer@caption{top}%
  \ifnum\tpSubFloatCnt=\z@\relax
    \bgroup\advance\hsize-\tp@flt@marg@l
      \tpUseProperty{float-render}%
    \egroup
  \else
    \let\tp@is@subflt\relax
    \@cc@is@finalfalse
    \tp@flt@calc@sameheight
    \ifx\tp@has@subcapt@top\@empty\tp@flt@calc@row@ht{top}\fi%
    \ifx\tp@has@subcapt@bottom\@empty\tp@flt@calc@row@ht{bottom}\fi%
    \def\tp@prefix{sub}%
    \@cc@is@finaltrue
    \tpUseProperty{subfloat-render}%
    \let\tp@prefix\@empty
    \let\tp@is@subflt\@undefined
  \fi
  \tp@make@outer@caption{bottom}%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tp@flt@compose}
% This macro prints the entire float object.
%    \begin{macrocode}
\def\tp@flt@compose{%
  \bgroup
    \hsize\tp@total@flt@width
    \tp@flt@process
    %\tp@make@anchors%
    %% TODO: move to where the caption(s) are built
    \csname tp@make@listof@\tp@captype\endcsname{\tp@captype}% single float
    \par
  \egroup}

%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Caption mechanism}
%
%
% \begin{macro}{\ccf@test@caption} tests if the current sub-float has
%   any top or bottom caption that needs to be printed.
%   \begin{description}
%   \item[\#1] is the value of the sub-float counter
%   \item[\#1] indicates if the caption belongs to the whole float
%     (\lstinline{capt}) or a sub-float (\lstinline{subcapt})
%   \item[\#1] \lstinline{top} or \lstinline{bottom}
%   \end{description}
%   We compare the caption of the current \lstinline{\SubFloatCnt}
%   level with a caption of a non-existing Float level in case there
%   is non-expandable material hard-coded into the
%   \lstinline{caption-#3} Property. If we were to compare the width
%   of the \lstinline{\hbox} with \lstinline{\z@}, this scenario would
%   give us false positives.
%
%   \textbf{Warning:} Long captions can cause the hbox's width to
%   exceed \lstinline{\maxdimen}. To avoid \LaTeX\ errors in this
%   case, we compare \lstinline{sp} instead of \lstinline{pt}. This,
%   however, means that if the difference is less than 1pt, the test
%   fails and no caption is printed!
%    \begin{macrocode}
\def\ccf@test@caption#1#2#3{%
  \setbox\tp@tempboxa\hbox{\tpGobble\tpSubFloatCnt0#1\relax\tpUseProperty{caption-#3}\relax}%
  \setbox\tp@tempboxb\hbox{\tpGobble\tpSubFloatCnt\m@ne\relax\tpUseProperty{caption-#3}\relax}%
  \edef\my@wda{\expandafter\strip@pt\wd\tp@tempboxa sp}%
  \edef\my@wdb{\expandafter\strip@pt\wd\tp@tempboxb sp}%
  \ifdim\my@wda>\my@wdb\relax
    \expandafter\global\expandafter\let\csname tp@has@#2@#3\endcsname\@empty
  \fi
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tp@test@subcapt} tests if the current float has
%   any top or bottom captions that need to be printed
%    \begin{macrocode}
\def\tp@test@subcapt{%
  \tp@iterate{\@tempcnta}{\@ne}{\tpSubFloatCnt}{%
    \ccf@test@caption{\the\@tempcnta}{subcapt}{top}%
    \ccf@test@caption{\the\@tempcnta}{subcapt}{bottom}%
  }%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tp@capt@top@offset} determines the spacing inserted
%   \textbf{above both captions}.
%    \begin{macrocode}
\def\tp@capt@top@offset{%
  \ifx\@argi\tp@str@top
  \else
    \par\if@tp@flt@break@capt\else\nopagebreak\fi%
    \expandafter\@tempskipa\tpUseProperty{\tp@prefix caption-sep-bottom}\relax%
    \advance\@tempskipa\dimexpr-\topskip+\dp\strutbox\relax
    \if@tp@flt@break@capt\advance\@tempskipa\dimexpr-\baselineskip-\ht\strutbox+\topskip\relax\fi
    \ifx\tp@has@subcapt@bottom\@empty
      \ifnum\tpSubFloatCnt=\z@
        %% subcapt-bot exists and capt-bot is rendered
        \advance\@tempskipa\dimexpr\dp\strutbox\relax
        \expandafter\advance\expandafter\@tempskipa\tpUseProperty{subcaption-add-sep-bottom}\relax%
      \fi
    \fi
    \vskip\@tempskipa
    \leavevmode
  \fi}

%    \end{macrocode}
% \end{macro}
% \begin{macro} determines the spacing inserted \textbf{below the
%   captions}.
%    \begin{macrocode}
\def\tp@capt@bottom@offset{%
  \ifx\@argi\tp@str@top
    \@tempskipa\z@
    \expandafter\advance\expandafter\@tempskipa\tpUseProperty{\tp@prefix caption-sep-top}%
    %
    \ifnum\tpSubFloatCnt=\z@
      \ifx\tp@has@subcapt@top\@empty
        %% subcapt-top exists and capt-top is rendered
        \advance\@tempskipa\dimexpr\ht\strutbox-\topskip-\p@\relax
        \expandafter\advance\expandafter\@tempskipa\tpUseProperty{subcaption-add-sep-top}\relax%
      \else
        \advance\@tempskipa\dimexpr-\dp\strutbox\relax
      \fi
    \fi
    \vskip\@tempskipa
    \par\if@tp@flt@break@capt\else\nopagebreak\fi
  \else
    \ifnum\tpSubFloatCnt>\z@
      \vskip\dp\strutbox
    \fi
  \fi}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tp@make@caption} prints the caption.
%   \begin{description}
%   \item[\#1] is the placement (\texttt{top}, \texttt{bottom})
%   \item[\#2] is the vertical alignment (\texttt{top}, \texttt{middle}, \texttt{bottom})
%   \item[\#3] is the left margin.
% \end{description}
%    \begin{macrocode}
\long\def\tp@make@caption#1#2{%
  \protected@edef\@argi{#1}\protected@edef\@argii{#2}%
  \tp@capt@top@offset
  \ifnum\tpSubFloatCnt=\z@
    \def\next{%
      \tpIfAttrStr{\tp@captype}{orientation}{landscape}
        {\setbox\@tempboxa\vbox\bgroup\hsize\textheight}
        {\hskip\tp@flt@marg@l%
         \setbox\@tempboxa\vbox\bgroup\advance\hsize-\tp@flt@marg@l}%
      }%
  \else
    \expandafter\tp@tempskipa\csname tp@flt@capt@row@height@#1\endcsname\relax
    \expandafter\advance\expandafter\tp@tempskipa\dimexpr-\baselineskip+\topskip\relax
    \def\next{\setbox\@tempboxa\vbox to \tp@tempskipa\bgroup}%
  \fi
  \next%
    \ifx\@argii\tp@str@top\else\if@tp@flt@break@capt\else\vss\fi\fi
    \tpUseProperty{\tp@prefix caption-face}%
    \tpUseProperty{\tp@prefix caption-face-#1}%
    \cc@topstrut\tpUseProperty{caption-#1}\strut%
    \ifx\@argii\tp@str@bottom\else\if@tp@flt@break@capt\else\vss\fi\fi%
  \egroup%
  \ccfCreateLabel
  \if@tp@flt@break@capt\unvbox\@tempboxa\else\box\@tempboxa\fi%
  \tp@capt@bottom@offset
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tp@make@outer@caption} is a shell for the outer
%   captions. \#1 is the placement (\texttt{top}, \texttt{bottom})
%    \begin{macrocode}
\def\tp@make@outer@caption#1{%
  \def\@argi{#1}%
  \expandafter\ifx\csname tp@has@capt@#1\endcsname\@empty
    \setbox\z@\vbox{%
      \tpGobble
      \tpSubFloatCnt\z@
      \tp@make@caption{#1}{top}%
    }%
    \immediate\write\@auxout{\string\expandafter\string\gdef\string\csname\space tpFloat\the\tp@int@flt@cnt Cap#1\string\endcsname{\the\dimexpr \ht\z@+\dp\z@\relax}}%
    \bgroup
      \savenotes
      \if@tp@flt@break@capt\else\nopagebreak\fi
      \tpSubFloatCnt\z@
      \tp@make@caption{#1}{top}%
      \spewnotes
    \egroup
    \ifx\@argi\tp@str@top\if@tp@flt@break@capt\else\nopagebreak\fi\fi
  \fi
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tpRenderSubFloats} iterates through the single
%   sub-floats and renders them in a nice row.
%   \begin{description}
%   \item[\#1] is the subfloat counter,
%   \item[\#2] Component name that contains the actual contents of the
%     sub-float, for \lstinline{tpFigure} it is \lstinline{Fig}, for
%     \lstinline{tpTable} it is \lstinline{Content}.
% \end{description}
%    \begin{macrocode}
\long\def\tpRenderSubFloats#1#2{%
  \leavevmode
  \savenotes
  \ifnum#1>\@ne\hfill\fi
  \vtop\bgroup
    \expandafter\hsize\csname tp@\tp@cur@cont @res@width-#1\endcsname\relax
    \let\includegraphics\tp@includesubgraphics
    \tp@render@sub@float{#1}{#2}%
  \egroup
  \spewnotes
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tp@render@sub@float} renders a single sub-float. For
%   the arguments, see \lstinline{\tpRenderSubFloats}, above.
%    \begin{macrocode}
\long\def\tp@render@sub@float#1#2{%
  \tpSubFloatCnt=#1\relax
  \expandafter\ifx\csname tp@has@\tp@prefix capt@top\endcsname\@empty
    \tp@make@caption{top}{\tpUseProperty{\tp@prefix caption-valign-top}}%
  \fi
  \bgroup\strut\tpUseComp{#2}\strut\par\egroup%
  \expandafter\ifx\csname tp@has@\tp@prefix capt@bottom\endcsname\@empty
    \tp@make@caption{bottom}{\tpUseProperty{\tp@prefix caption-valign-bottom}}%
  \fi
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tp@flt@calc@row@ht} calculates the heights of all
%   captions in the same row.
%
%   \#1 determins if the \lstinline{top} or \lstinline{bottom} row is calculated.
%    \begin{macrocode}
\def\tp@flt@calc@row@ht#1{%
  \@tempcnta\z@
  \@tempdima\z@
  \tp@iterate{\@tempcnta}{\@ne}{\tpSubFloatCnt}{%
    \setbox\z@\vbox{%
      \tpSubFloatCnt\@tempcnta\relax
      \expandafter\hsize\expandafter\dimexpr\csname tp@\tp@cur@cont @res@width-\the\@tempcnta\endcsname\relax
      \tpGobble
      \tpUseProperty{\tp@prefix caption-face}%
      \tpUseProperty{\tp@prefix caption-face-#1}%
      \leavevmode
      \strut\tpUseProperty{caption-#1}\strut%
      }%
    \expandafter\ifdim\dimexpr\ht\z@+\dp\z@\relax>\@tempdima \@tempdima\dimexpr\ht\z@+\dp\z@\relax\fi
  }%
  \expandafter\edef\csname tp@flt@capt@row@height@#1\endcsname{\the\@tempdima}%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\tp@flt@calc@sameheight} calculates the ratio between
%   each sub-float's height and the height of the largest sub-float
%    \begin{macrocode}
\def\tp@flt@calc@sameheight{%
  \@tempdima=\z@\relax
  \@tempcnta=\z@\relax
  \tp@calc@flt@width=\tp@total@flt@width\relax
  \advance\tp@calc@flt@width-\tp@flt@marg@l\relax
  \tp@iterate{\@tempcnta}{\@ne}{\tpSubFloatCnt}{%
    \edef\@tempa{\CalcRatio{\tp@subflt@maxheight}{\csname tp@\tp@cur@cont @height-\the\@tempcnta\endcsname}}%
    \ifnum\@tempcnta>\@ne
      \advance\tp@calc@flt@width-\tp@subflt@sep\relax%
    \fi
    \expandafter\@tempdimc\csname tp@\tp@cur@cont @width-\the\@tempcnta\endcsname\relax
    \@tempdimb=\@tempa\@tempdimc\relax
    \expandafter\edef\csname  tp@\tp@cur@cont @adj@width-\the\@tempcnta\endcsname{\the\@tempdimb}%
    \advance\@tempdima\@tempdimb
  }%
  \@tempcnta=\z@\relax
  \@tempdimb=\z@\relax
  \@tempdimc=\z@\relax
  \tp@iterate{\@tempcnta}{\@ne}{\tpSubFloatCnt}{%
    \edef\@tempa{\CalcRatio{\csname tp@\tp@cur@cont @adj@width-\the\@tempcnta\endcsname}{\@tempdima}}%
    \expandafter\edef\csname tp@\tp@cur@cont @res@width-\the\@tempcnta\endcsname{\dimexpr\@tempa\tp@calc@flt@width\relax}%
    \@tempdimc\dimexpr\csname tp@\tp@cur@cont @height-\the\@tempcnta\endcsname\relax
    \@tempdimc\dimexpr\@tempa\@tempdimc\relax
    \ifdim\@tempa\@tempdimb<\@tempdimc\@tempdimb\@tempdimc\relax\fi
  }%
  \expandafter\edef\csname tp@\tp@cur@cont @res@height\endcsname{\the\@tempdimb}%
}
%    \end{macrocode}
% \end{macro}
%
% \section{Handlers for different float types}
%
% \subsection{Handlers for generic floats}
%
% \begin{macro}{\tpGenericRender} is the Component that contains
%   the contents of a generic float.
%    \begin{macrocode}
\def\tpGenericRender{\tpUseComp{Content}}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tpGenericHandler} is the generic content handler of a float
%    \begin{macrocode}
\def\tpGenericHandler{\tpMakeFltComp{Content}}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tpSubGenericHandler} is the generic handler of a sub-float.
%    \begin{macrocode}
\def\tpSubGenericHandler{}
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Handlers for figures}
%
% \begin{macro}{\tpFigureHandler} tells the float module the name,
%   main namespace, and main content Container of \lstinline{tpFigure}
%   type floats.
%    \begin{macrocode}
\def\tpFigureHandler{\tpMakeFltComp{Fig}}
%    \end{macrocode}
%
% \end{macro}
% \begin{macro}{\tp@flt@create@natural} is the actual handler for sub-figures.
%    \begin{macrocode}
\def\tp@flt@create@natural{\tpUseComp{Fig}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\tpSubFigureHandler} is the User-level macro that
%   defines the handler for sub-figures. It also contains code for the
%   \lstinline{nofigs} package option.
%    \begin{macrocode}
\def\tpSubFigureHandler{%
  \ifx\tp@nofigs\relax
    \setbox\tp@subfltbox\hbox{\rule{0pt}{1pt}\rule{1pt}{0pt}}%
  \else
    \setbox\tp@subfltbox\hbox{\tpGobble\tp@flt@create@natural}%
  \fi}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tpFigureRender} tells the module how
%   \lstinline{tpFigures} are to be rendered.
%    \begin{macrocode}
\def\tpFigureRender{%
  \bgroup
    \tpIfAttrStr{\tp@captype}{orientation}{landscape}
      {\hsize\dimexpr\textwidth-\tp@flt@marg@r-\tp@flt@marg@l\relax}%
      {}%
    \let\includegraphics\tp@includesubgraphics
    \hskip\tp@flt@marg@l
    \strut\tpUseComp{Fig}\strut
  \egroup}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tpSubFigureRender} tells the module how sub-floats of
%   \lstinline{tpFigure} type floats are to be rendered.
%    \begin{macrocode}
\def\tpSubFigureRender{%
  \hskip\tp@flt@marg@l
  \tp@iterate{\@tempcnta}{\@ne}{\tpSubFloatCnt}{%
    \tpRenderSubFloats{\the\@tempcnta}{Fig}%
  }}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tp@includesubgraphics} is an override of \LaTeX's
%   \lstinline{\includegraphics} patched to adjust for maximum width
%   and height.
%    \begin{macrocode}
\def\tp@includesubgraphics{\@ifnextchar [\@tp@includesubgraphics{\@tp@includesubgraphics[]}}%]
\def\@tp@includesubgraphics[#1]#2{%
  \ifx\tp@current@class\relax
    \def\@igopts{max width=\hsize,max height=\vsize}%
  \else
    \def\@igopts{width=\hsize}%
  \fi
  \if!#1!\else
    \def\@igopts{width=\hsize,#1}%
  \fi
  \gdef\@tp@fig@path{#2}%
  \expandafter\tpltx@includegraphics\expandafter[\@igopts]{#2}%
}

%    \end{macrocode}
% \end{macro}
%
%
%\subsection{Handlers for tables}
%
% \begin{macro}{\tp@reserve@tabular} is a shell macro that stores the
%   default macro definitions for various tabular mechanisms
%   (currently, only plain \lstinline{tabular}, \lstinline{tabulary},
%   \lstinline{tabularx}, and \lstinline{htmltabs} are supported as
%   content Component of \lstinline{tpTable})
%    \begin{macrocode}
\def\tp@reserve@tabular{%
  \@tp@reserve@tab{}%
  \@tp@reserve@tab{x}%
  \@tp@reserve@tab{y}%
  \@tp@reserve@htmltab%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@tp@reserve@tab} stores the default definitions for a
%   specific vanilla-{\LaTeX} tabular environment and re-defines the
%   macros in a way that the tabulars are stored in the
%   \lstinline{\tp@floatbox} instead of printed onto the page.
%    \begin{macrocode}
\def\@tp@reserve@tab#1{%
  \expandafter\expandafter\expandafter\let\expandafter\csname orig@tabular#1\expandafter\endcsname\csname tabular#1\endcsname
  \expandafter\expandafter\expandafter\let\expandafter\csname orig@endtabular#1\expandafter\endcsname\csname endtabular#1\endcsname
  \expandafter\def\csname tabular#1\endcsname{%
    \global\setbox\tp@floatbox
    \vbox\bgroup
      \if!#1!\else
        \let\tabular\orig@tabular
        \let\endtabular\orig@endtabular
      \fi
      \csname orig@tabular#1\endcsname}%
  \expandafter\def\csname endtabular#1\endcsname{\csname orig@endtabular#1\endcsname\egroup}%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@tp@reserve@htmltab} special handler for tables using
%   the \lstinline{htmltabs} package:
%    \begin{macrocode}
\AtBeginDocument{%
  \@ifpackageloaded{htmltabs}{%
    \def\@tp@reserve@htmltab{%
      \let\tp@addstyle\@empty
      \ifx\tp@fps\@empty
        \expandafter\ifx\csname tpFloat\the\tp@int@flt@cnt Captop\endcsname\relax\else
          \htInitSkip\csname tpFloat\the\tp@int@flt@cnt Captop\endcsname
          \advance\htInitSkip\tp@flt@sep@top%
        \fi
        \expandafter\ifx\csname tpFloat\the\tp@int@flt@cnt Capbottom\endcsname\relax\else
          \htAddToBottom\csname tpFloat\the\tp@int@flt@cnt Capbottom\endcsname
          \advance\htAddToBottom\tp@flt@sep@bottom%
        \fi
      \else
        \def\tp@addstyle{;break-table:false;}%
      \fi
      \edef\tp@tempa{margin-left:\tp@flt@marg@l\tp@addstyle}%
      \expandafter\htAddStyle\expandafter{\tp@tempa}%
      \global\setbox\htTableBox\box\voidb@x
      \let\htOutputTable\relax
    }}{\let\@tp@reserve@htmltab\relax}%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tpTableHandler} defines the content handler for \lstinline{tpTable}.
%    \begin{macrocode}
\def\tpTableHandler{%
  \tpMakeFltComp{Content}%
  \tp@reserve@tabular
  }
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tpGetTableContent} returns the \lstinline{tp@floatbox} if it is not un-itialized or void.
%    \begin{macrocode}
\def\tpGetTableContent{%
  \ifx\htTableBox\@undefined\else
    \ifvoid\htTableBox\else
      \let\tp@floatbox\htTableBox%
    \fi\fi}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tpSubTableHandler} is the handler for sub-tables. So
%   far, \lstinline{coco-floats.sty} does not support tables to be
%   sub-floats, so we just generate an Error message.
%    \begin{macrocode}
\def\tpSubTableHandler{%
  \PackageError{coco-floats.sty}{tpSubFloat does not support sub-tables (yet)!}{You cannot yet use a tables within the `tpSubFloat'!}%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tpTableRender} defines the Renderer for
%   \lstinline{tpTable} content Components
%    \begin{macrocode}
\def\tpTableRender{%
  \tpGetTableContent
  \tpContent{\unvbox\tp@floatbox}%
  \tpUseComp{Content}%
  \par\if@tp@flt@break@capt\else\nopagebreak\fi
  \vskip\dp\strutbox
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tpSubTableRender} Is the Renderer for table sub-floats (which we don't allow yet, so this definition is un-used at the moment)
%    \begin{macrocode}
\def\tpSubTableRender{%
  \tp@iterate{\@tempcnta}{\@ne}{\tpSubFloatCnt}{%
    \tpGetTableContent
    \tpContent{\unvbox\tp@floatbox}%
    \tpRenderSubFloats{\the\@tempcnta}{Content}%
  }}
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Helpers}
%
% \begin{macro}{\tpFloatBarrier} can be used to force all pending floats
% to be printed at the next shipout.
%    \begin{macrocode}
\def\tpFloatBarrier{\AtBeginShipoutNext{\clearpage}}
%    \end{macrocode}
% \end{macro}
%
% \section{Default Settings}
%
%    \begin{macrocode}
\tpAddToType{Properties}{float}{%
  \tpSetProperty{intext-skip-top}{\intextsep}%% non-float sep top
  \tpSetProperty{intext-skip-bottom}{\intextsep}%% non-float sep bottom
  \tpSetProperty{float-skip-top}{\z@}%% float sep top
  \tpSetProperty{float-skip-bottom}{\z@}%% float sep bottom
  \tpSetProperty{sub-float-sep}{\tp@subflt@sep}%% space between sub-floats
  \tpSetProperty{margin-inner}{\z@}%% left margin on odd pages/right margin on even pages
  \tpSetProperty{margin-outer}{\z@}%% right margin on odd pages/left margin on even pages
  \tpSetProperty{margin-left}{\z@}%% left margin
  \tpSetProperty{margin-right}{\z@}%% right margin
  \tpSetProperty{before-float}{\parindent\z@}%% executed before content is evaluated
  \tpSetProperty{float-handler}{\tpGenericHandler}% Alias for the caption type specific content handler
  \tpSetProperty{subfloat-handler}{\tpSubGenericHandler}% Alias for the caption type specific content handler
  \tpSetProperty{float-render}{\tpGenericRender}% Alias for the caption type specific content printer
  \tpSetProperty{subfloat-render}{\tpGenericRender}% Alias for the caption type specific content printer for sub-floats
  \tpSetProperty{subfloat-same-height}{}% if true, the subfloat must/can be adjusted to the same heights
  %% captions
  \tpSetProperty{caption-face}{}% style applied to top and bottom captions
  \tpSetProperty{caption-face-top}{}%% style applied to top captions
  \tpSetProperty{caption-face-bottom}{}%% style applied to bottom captions
  \tpSetProperty{source-face}{}% Format of source, additional to caption-format
  \tpSetProperty{legend-face}{}% Format of legend, additional to caption-format
  \tpSetProperty{caption-sep-top}{\z@}%% vertical space between top caption and content
  \tpSetProperty{caption-sep-bottom}{\z@}%% vertical space between content and bottom caption
  \tpSetProperty{caption-top}{%
    \tpIfComp{Number}{{\tpUseProperty{number-face}\tpUseComp{Number}\tpUseProperty{number-sep}}}{}%
    \tpUseComp{Caption}%
  }%
  \tpSetProperty{caption-bottom}{%
    \tpIfComp{Legend}{{\tpUseProperty{legend-face}\tpUseComp{Legend}}}{}%
    \tpIfComp{Source}{%
      \tpIfComp{Legend}{\par\nopagebreak}{}%
      {\tpUseProperty{source-face}%
       \tpUseComp{Source}}}{}}%
  \tpPropertyLet{subcaption-face}{caption-face}% style applied to top and bottom captions
  \tpSetProperty{subcaption-face-top}{\tpUseProperty{caption-face-top}}%% style applied to top captions
  \tpSetProperty{subcaption-face-bottom}{\tpUseProperty{caption-face-bottom}}%% style applied to bottom captions
  \tpSetProperty{subcaption-add-sep-top}{\z@}%% additional vertical space between top caption and top sub-caption
  \tpSetProperty{subcaption-add-sep-bottom}{\z@}%% additional vertical space between bottom sub-caption and bottom caption
  \tpSetProperty{subcaption-sep-top}{\tpUseProperty{caption-sep-top}}%% vertical space between top sub-caption and content
  \tpSetProperty{subcaption-sep-bottom}{\tpUseProperty{caption-sep-bottom}}%% vertical space between content and bottom sub-caption
  \tpSetProperty{subcaption-top}{\tpUseProperty{caption-top}}% in case, sub-float captions diverge from main caption
  \tpSetProperty{subcaption-bottom}{\tpUseProperty{caption-bottom}}% in case, sub-float captions diverge from main caption
  \tpSetProperty{subcaption-valign-top}{top}%% vertical alignment of neighboring top-placed sub-captions
  \tpSetProperty{subcaption-valign-bottom}{top}%% vertical alignment of neighboring bottom-placed sub-captions
  %% Numbers
  \tpSetProperty{numbering}{auto}%% automatic numbering for missing Number component
  \tpSetProperty{number-sep}{\enskip}% Separator between label and caption
  \tpSetProperty{number-face}{\bfseries}% Format of number, additional to caption-format
  \tpSetProperty{sub-number-sep}{\,}%% when sub-captions, this is placed between the float counter and the sub-float counter
  \tpSetProperty{sub-number-style}{alph}%% counting style of subcaption counters
  \tpSetProperty{sub-number-face}{}%% format of subcaption counters
  \tpSetProperty{sub-number-before}{(}% stuff that is put immediately before the sub counter
  \tpSetProperty{sub-number-after}{)}% stuff that is put immediately after the sub counter
  \tpSetProperty{sub-number-format}{% Format of the sub number
    \tpUseProperty{float-number}%
    \tpUseProperty{sub-number-sep}%
    \tpUseProperty{sub-number}}%
  %% List-of entries
  \tpSetProperty{list-of-page-sep}{\dotfill}%
  \tpPropertyLet{list-of-number-face}{list-of-caption-face}%
  \tpSetProperty{list-of-number-sep}{\enskip}%
  \tpSetProperty{list-of-number-align}{left}%
  \tpSetProperty{list-of-number-format}{%
    \bgroup
      \tpUseProperty{list-of-number-face}%
      \tpUseComp{ListofNumber}%
      \tpUseProperty{list-of-number-sep}%
    \egroup}%
  \tpSetProperty{list-of-parfillskip}{-\rightskip}%
  \tpSetProperty{list-of-margin-right}{\@pnumwidth \@plus 1fil}%
  \tpSetProperty{list-of-margin-left}{auto}%
  \tpSetProperty{list-of-indent}{auto}% list-of-float appearance
  \tpSetProperty{list-of-block}{%
    \tpUseProperty{list-of-caption-face}%
    \tpIfComp{ListofNumber}
      {\tpUseComp{list-of-hang-number}}
      {\leftskip0pt}%
    \tpUseComp{ListofCaption}%
    \tpUseProperty{list-of-page-sep}\tpUseComp{ListofPage}%
  }% list-of-float appearance
  \tpSetProperty{list-of-before-entry}{%
    \tpGobble
    \leftskip\tpUseProperty{list-of-margin-left}\relax%
    \rightskip \tpUseProperty{list-of-margin-right}\relax%
    \parfillskip \tpUseProperty{list-of-parfillskip}\relax
    \parindent\z@
    \@afterindenttrue
    \interlinepenalty\@M
    \leavevmode
    \null\nobreak
  }% list-of-float appearance
  \tpSetProperty{list-of-after-entry}{\par}% list-of-float appearance
}
%    \end{macrocode}
% \begin{tpContainer}{tpFigure} defines the defaults for the
%   \lstinline{tpFigure} Container.
%    \begin{macrocode}
\tpDeclareFloat{tpFigure}{figure}{lof}{%
  \tpSetProperty{subfloat-same-height}{true}% if true, the subfloat must/can be adjusted to the same heights
  \tpSetProperty{float-handler}{\tpFigureHandler}%
  \tpSetProperty{subfloat-handler}{\tpSubFigureHandler}%
  \tpSetProperty{float-render}{\tpFigureRender}%
  \tpSetProperty{subfloat-render}{\tpSubFigureRender}%
}
%    \end{macrocode}
% \end{tpContainer}
% \begin{tpContainer}{tpTable} defines the default Properties of the
%   \lstinline{tpTable} Container.
%    \begin{macrocode}
\tpDeclareFloat{tpTable}{table}{lot}{%
  \tpSetProperty{sub-caption-valign-top}{bottom}%
  \tpSetProperty{float-handler}{\tpTableHandler}%
  \tpSetProperty{subfloat-handler}{\tpSubTableHandler}%
  \tpSetProperty{float-render}{\tpTableRender}%
  \tpSetProperty{subfloat-render}{\tpSubTableRender}%
}
%    \end{macrocode}
% \end{tpContainer}
%    \begin{macrocode}[gobble=1]
%</floats>
%    \end{macrocode}
