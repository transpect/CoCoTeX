%    \end{macrocode}
% \chapter{transpect-common.dtx}
% This file provides some basic macros and facilities like macro
% hooks.
%
%    \begin{macrocode}
%%
%% module for le-tex transpect.cls that provides some commonly used base macros.
%%
%% Maintainer: p.schulz@le-tex.de
%%
%% lualatex  -  texlive > 2019
%%
\NeedsTeXFormat{LaTeX2e}[2018/12/01]
\ProvidesPackage{transpect-common}
    [\filedate \fileversion le-tex transpect common module]
%    \end{macrocode}
% prefix macro used to execute code after the next \lstinline{\fi}:
%    \begin{macrocode}
\def\afterfi#1\fi{\fi#1}
%    \end{macrocode}
% \lstinline{\afterbox} prevents indentation and additional spacing after
% environments. Intended to be used in combination with
% \lstinline{\aftergroup}.
%    \begin{macrocode}
\def\@afterbox{%
  \everypar{%
    \if@nobreak
      \@nobreakfalse
      \clubpenalty \@M
      \if@afterindent \else
        {\setbox\z@\lastbox}%
        \everypar{}%
      \fi
    \else
      \clubpenalty \@clubpenalty
      {\setbox\z@\lastbox}%
      \everypar{}%
    \fi}}
%    \end{macrocode}
% This macro is used to calculate the ratio between two integers.
%    \begin{macrocode}
\def\CalcRatio#1#2{\strip@pt\dimexpr\number\numexpr\number\dimexpr#1\relax*65536/\number\dimexpr#2\relax\relax sp}
%    \end{macrocode}
% Temporarily silence a macro with a mandatory argument that may or
% may not have an optional argument. Use it like this:
% \lstinline{\let\yourMacroWithOptArg\@gobbleopt}
%    \begin{macrocode}
\def\@gobbleopt#1#{\@gobble}
\def\tpGobble{%
  \let\footnote\@gobbleopt%
  \let\label\@gobble%
  \let\index\@gobbleopt}%
%    \end{macrocode}
% traverse step-wise through counter \#1, start at number \#2 until and including number \#3 and do at every loop \#4 (from \lstinline{forloop.sty}):
%    \begin{macrocode}
\long\def\tp@iterate#1#2#3#4{%
  \advance#1\@ne\relax
  #1=#2\relax%
  \expandafter\ifnum#1>#3\relax%
  \else
    #4%
    \tp@iterate{#1}{\the#1}{#3}{#4}%
  \fi}%
%    \end{macrocode}
%% \section{Hooks}
%% In this part we provide the facility to utilize Hooks to patch code
%% into different parts of the package depending on options and loaded
%% packages.
%    \begin{macrocode}
\RequirePackage{etoolbox}
\def\tpDeclareHook#1{\expandafter\global\expandafter\let\csname tp@hook@\tp@namespace @#1\endcsname\@empty}
\def\tpAddToHook#1#2{%
  \expandafter\ifx\csname tp@hook@\tp@namespace @#1\endcsname\relax
    \tpDeclareHook{#1}%
  \fi
  \csgappto{tp@hook@\tp@namespace @#1}{#2}%
}
\def\tpUseHook#1{\expandafter\ifx\csname tp@hook@\tp@namespace @#1\endcsname\relax\else\csname tp@hook@\tp@namespace @#1\endcsname\fi}
%    \end{macrocode}
%
% \section{Macros}
% Defines Macros that are only valid within their Namespace.
% \begin{description}
% \item[\#1] is the top-level macro name
% \item[\#2] is code that is executed \textit{before} assignment of the user's value
% \item[\#3] is code that is executed \textit{after} assignment of the user's value
% \item[\#4] is the internal identifier. The macro that is build is \lstinline{\csname tp@<current namespace>@<id>\endcsname}
% \end{description}
%    \begin{macrocode}
\def\tpProvideMacro#1#2#3#4{%
  \ltx@LocalExpandAfter\global\expandafter\let\csname tp@\tp@namespace @#4\endcsname\relax
  \expandafter\long\expandafter\def\csname #1\endcsname##1{#2\expandafter\long\expandafter\def\csname tp@\tp@namespace @#4\endcsname{##1}\ignorespaces#3}
}
\def\tpNamespace#1{\def\tp@namespace{#1}}
%    \end{macrocode}
% High level command to use Data field \#1.
%    \begin{macrocode}
\def\tpUseMacro#1{\csname tp@\tp@namespace @#1\endcsname\relax}
%    \end{macrocode}
% High level macro that executes \#2 if Macro \#1 is non-empty, and \#3 if it is empty.
%    \begin{macrocode}
\long\def\tpIfMacro#1#2#3{\expandafter\ifx\csname tp@\tp@namespace @#1\endcsname\relax#3\else#2\fi}

%    \end{macrocode}
%
% \section{Attributes}
% In this part, we provide some macros to parse enviroment
% attributes. Curtesy of the \lstinline{htmltabs} package.
%
%
%    \begin{macrocode}
\begingroup
\catcode`"=12
%    \end{macrocode}
% High level wrapper for the attribute parser; \#1 is the parent node of the attribute, \#2 is the attribute chain
%    \begin{macrocode}
\gdef\tpParseAttributes#1#2{%
  \if!#1!\else
    \if!#2!\else
      \def\tp@cur@node{#1}%
      \@tp@parse@attributes #2,,\@nil
    \fi\fi}
%    \end{macrocode}
% the actual, recursively applying, parser:
%    \begin{macrocode}
\gdef\tp@parse@kv#1=#2=#3\@nil{%
  \edef\@argii{#2}%
  \ifx\@argii\@empty
    \expandafter\let\csname tp@\tp@cur@node @attr@#1\endcsname\@empty%
  \else
    \ifx #2 =\else
      \expandafter\def\csname tp@\tp@cur@node @attr@#1\endcsname{#2}%
    \fi
  \fi}
\gdef\@tp@parse@attributes #1,#2,\@nil{%
  \if!#1!\else
    \tp@parse@kv#1==\@nil
    \if!#2!\else
      \@tp@parse@attributes#2,\@nil
    \fi\fi}
\endgroup

%    \end{macrocode}
% \section{Properties}\label{sec:common:props}
% This high level macro provides the property-value interface for
% transpect namespaces. \#1 is the name of the property, \#2 is the value assigned to that property.
%    \begin{macrocode}
\DeclareRobustCommand{\tpSetProperty}[2]{\expandafter\long\expandafter\protect\expandafter\def\csname tp@\tp@namespace @#1\endcsname{#2}}
%    \end{macrocode}
% This high-level macro is the same as \lstinline{\tpSetProperty}
% except that it expands the value \#2 before assigning it to the
% property macro with the name \#1. This can be used to assign the
% current value of a variable macro, dimension, counter or
% length to a property.
%    \begin{macrocode}
\DeclareRobustCommand{\tpSetValProp}[2]{\def\@tempa{\tpSetProperty{#1}}\expandafter\@tempa\expandafter{#2}}
%    \end{macrocode}
% High level command to use a previously set property.
%    \begin{macrocode}
\def\tpUseProperty#1{\csname tp@\tp@namespace @#1\endcsname}
%    \end{macrocode}
% Check if property \#1 is non-empty If so, do \#2, otherwise do \#3.
%    \begin{macrocode}
\DeclareRobustCommand{\tpIfProp}[3]{\long\def\@tempa{}%
  \expandafter\ifx\csname tp@\tp@namespace @#1\endcsname\@tempa#3\else#2\fi\ignorespaces}
%    \end{macrocode}
% Check if a property \#1's value is equal to \#2.
% If so, do \#3, otherwise do \#4.
%    \begin{macrocode}
\DeclareRobustCommand{\tpIfPropVal}[4]{\long\def\@tempa{#2}%
  \expandafter\ifx\csname tp@\tp@namespace @#1\endcsname\@tempa\relax#3\else#4\fi\ignorespaces}
%    \end{macrocode}
% Add to namespace-specific defaults; \#1 is the namespace, \#2 is a block of property assignments.
%    \begin{macrocode}
\DeclareRobustCommand{\tpAddToDefault}[2]{\csgappto{tp@#1@default}{#2}}
%    \end{macrocode}
% This macro recursivly loads a namespace's properties, the properties
% of parent namespaces, and the default properties (in reverse
% order). \#1 is the macro family, \#2 is the namespace.
%    \begin{macrocode}
\def\tpCascadeProps#1#2{%
  \csname tp@#2@default\endcsname
  \expandafter\ifx\csname tp@#2@#1@parent\endcsname\relax\else
    \tp@inherit@props{#1}{#2}%
  \fi
  \csname tp@#2@#1@properties\endcsname
}
%    \end{macrocode}
% This low-level macro recursivly loads properties from parent
% namespaces, if they exist. \#1 is the parent (may be empty), \#2 is
% the macro family.
%    \begin{macrocode}
\def\tp@inherit@props#1#2{%
  \edef\@tempa{\csname tp@#2@#1@parent\endcsname}%
  \expandafter\ifx\csname tp@#2@\@tempa @parent\endcsname\relax\else
    \expandafter\tp@inherit@props\expandafter{\@tempa}{#2}%
  \fi
  \csname tp@#2@#1@properties\endcsname
}
%    \end{macrocode}
% \section{Classes}
% CSS-like classes, technically nothing but property lists.
%
% The top-level macro \lstinline|\tpDeclareClass[#1]{#2}[#3]{#4}| has
% four arguments, two of which are optional. \#2 is the name of the
% class. If this argument is empty, the special class name
% \lstinline{default} is used. \#4 is the declaration block of the
% class. This argument usually containsa set of property assignments
% using the \lstinline|\tpSetProperty{<prop>}{<val>}| macro, see
% Sect.~\ref{sec:common:props}. The first optional argument \#1 is the
% classe's namespace. Using namespaces, you can have classes of the
% same name for different namespaces, e.g., a \lstinline{default}
% class for each float and heading namespaces. The second optional
% argument \#3 is the parent class. Properties from that class are
% loaded automatically prior to the loading of the current class. This
% applies recursively allowing for a cascading of property values,
% like in CSS.
%    \begin{macrocode}
\long\def\tpDeclareClass{\@ifnextchar [{\@tp@set@class}{\@tp@set@class[default]}}%]
\long\def\@tp@set@class[#1]#2{\@ifnextchar [{\tp@set@class[#1]{#2}}{\tp@set@class[#1]{#2}[]}}%]
\long\gdef\tp@default@class@default{}
\long\def\tp@set@class[#1]#2[#3]#4{%
  \def\@argii{#2}\ifx\@argii\@empty\let\@argii\tp@str@default\fi%
  \if!#3!\else
    \expandafter\long\expandafter\def\csname tp@#1@class@\@argii @parent\endcsname{#3}%
  \fi
  \expandafter\long\expandafter\def\csname tp@#1@class@\@argii\endcsname{#4}%
}
%    \end{macrocode}
% High level macro to expand and “activate” a class's properties,
% those of its recursive ancestor classes, and the default class
% respecting the currently active namespace. \#1 is the class name,
% \#2 is the namespace.
%    \begin{macrocode}
\def\tpUseClass#1#2{%
  \expandafter\ifx\csname tp@#2@class@#1\endcsname\relax
    \expandafter\ifx\csname tp@default@class@#1\endcsname\relax
      \PackageError{transpect.cls}{Class `#1' with scope `#2' not defined!}{Please declare the class `#1'!}%
    \fi
  \fi
  \csname tp@default@class@#1\endcsname%
  \expandafter\ifx\csname tp@#2@class@#1@parent\endcsname\relax\else
    \expandafter\tpUseClass\expandafter{\csname tp@#2@class@#1@parent\endcsname}{#2}%
  \fi
  \csname tp@#2@class@#1\endcsname}

%    \end{macrocode}
%
% \section{Misc}
%
% \subsection{minusvspace}
% Counterpart to \LaTeX's \lstinline{\addvspace}: if the value of
% \lstinline{\minusvspace} is larger than \lstinline{\lastskip},
% \lstinline{\lastskip} is used. Otherwise, the value of
% \lstinline{\minusvspace} is used.
%    \begin{macrocode}
\def\@xminusvskip{%
  \ifdim\lastskip<\@tempskipb
  \else
    \ifdim\@tempskipb<\z@
      \ifdim\lastskip<\z@
      \else
        \advance\@tempskipb\lastskip
        \vskip-\lastskip
        \vskip \@tempskipb
      \fi
    \fi
  \fi}
\def\minusvspace#1{%
  \ifvmode
     \if@minipage\else
       \ifdim \lastskip =\z@
%    \end{macrocode}
% Compatibility to texlive pre 2020:
%    \begin{macrocode}
         \ifx\@vspace@calcify\@undefined
           \vskip #1\relax
         \else
           \@vspace@calcify{#1}%
         \fi
       \else
       \setlength\@tempskipb{#1}%
         \@xminusvskip
       \fi
     \fi
  \else
    \@noitemerr
  \fi}
%    \end{macrocode}
%
% \subsection{Masks}
% These macros are intended to mask non-content markup, like page- or
% line breaking commands in order to find and remove or alter them
% easier.
%
%    \begin{macrocode}
\let\hack\@firstofone
\let\Hack\@firstofone
\let\hackfor\@gobble
\let\Hackfor\@gobble
