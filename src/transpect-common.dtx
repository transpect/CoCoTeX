% \chapter{transpect-common.dtx}
% This file provides some basic macros and facilities like macro
% hooks.
%    \begin{macrocode}[gobble=1]
%<*common>
%    \end{macrocode}
% \section*{Common workflow of the headings module}
%
% The transpect-common module contains definition of some commonly used macros. This style
% \begin{enumerate}
% \item defines the macros used to set up properties, components, classes, and hooks
% \item defines the macros used in the content-list facilities (table of contents, list of figures, list of tables, etc.)
% \item defines the macros used for indentation of labels/numbers
% \item defines the macros used to re-build the label-side of \LaTeX's internal referencing mechanism
% \end{enumerate}
%
% \section{Style Preface}
%    \begin{macrocode}
%%
%% module for le-tex transpect.cls that provides some commonly used base macros.
%%
%% Maintainer: p.schulz@le-tex.de
%%
%% lualatex  -  texlive > 2019
%%
\NeedsTeXFormat{LaTeX2e}[2018/12/01]
\ProvidesPackage{transpect-common}
    [\filedate \fileversion le-tex transpect common module]
\RequirePackage{iftex}
%    \end{macrocode}
%
% \section{Common low level macros}
% Contains common macros used in the transpect-tex modules and that
% are intended for macro and stylesheet programming.
%    \begin{macrocode}
\RequirePackage{transpect-kernel}
%    \end{macrocode}
%
% \subsection{Common Variables}
%    \begin{macrocode}
%
\def\tp@str@default{default}
\def\tp@str@table{table}
\def\tp@str@figure{figure}
%    \end{macrocode}
% prefix macro used to execute code after the next \lstinline{\fi}:
%    \begin{macrocode}
\def\afterfi#1\fi{\fi#1}
\def\tp@topstrut{\vrule\@width\z@\@height\topskip\@depth\dimexpr\baselineskip-\topskip\relax}
%    \end{macrocode}
% \lstinline{\afterbox} prevents indentation and additional spacing after
% environments. Intended to be used in combination with
% \lstinline{\aftergroup}.
%    \begin{macrocode}
\def\@afterbox{%
  \everypar{%
    \if@nobreak
      \@nobreakfalse
      \clubpenalty \@M
      \if@afterindent \else
        {\setbox\z@\lastbox}%
        \everypar{}%
      \fi
    \else
      \clubpenalty \@clubpenalty
      {\setbox\z@\lastbox}%
      \everypar{}%
    \fi}}
%    \end{macrocode}
% hard requirements for all transpect derivates:
%    \begin{macrocode}
\usepackage{xcolor}
%    \end{macrocode}
% Including the \lstinline{graphicx} package and catching case-insensitive
% graphics file's endings from Word:
%    \begin{macrocode}
\usepackage{graphicx}
\DeclareGraphicsRule{.EPS}{eps}{.EPS}{}
%    \end{macrocode}
% This macro is used to calculate the ratio between two integers.
%    \begin{macrocode}
\def\CalcRatio#1#2{\strip@pt\dimexpr\number\numexpr\number\dimexpr#1\relax*65536/\number\dimexpr#2\relax\relax sp}
\newcount\tpModulo
\def\CalcModulo#1#2{\tpModulo=\numexpr#1-(#1/#2)*#2\relax}
%    \end{macrocode}
% Some temporary boxes that won't interfere with LaTeX's temporary
% boxes.
%    \begin{macrocode}
\newbox\tp@tempboxa
\newbox\tp@tempboxb
\newskip\tp@tempskipa
%    \end{macrocode}
% Temporarily silence a macro with a mandatory argument that may or
% may not have an optional argument. Use it like this:
% \lstinline{\let\yourMacroWithOptArg\@gobbleopt}
%    \begin{macrocode}
\long\def\@gobbleopt{\@ifnextchar[\@@gobbleopt{\@@gobbleopt[]}}%]
\long\def\@@gobbleopt[#1]#2{}%
\def\tpGobble{%
  \renewcommand\footnote[2][\the\c@footnote]{\def\@thefnmark{##1}\@makefnmark}%
  \renewcommand\index[2][]{}%
  \renewcommand\marginpar[2][]{}%
  \renewcommand\glossary[2][]{}%
  \let\label\@gobble
}%
%    \end{macrocode}
%
% \section{Attributes}
% In this part, we provide some macros to parse enviroment
% attributes. Curtesy of the \lstinline{htmltabs} package.
%
%    \begin{macrocode}
\begingroup
\catcode`"=12
%    \end{macrocode}
% High level wrapper for the attribute parser; \#1 is the parent node of the attribute, \#2 is the attribute chain
%    \begin{macrocode}
\gdef\tpParseAttributes#1#2{%
  \if!#1!\else
    \if!#2!\else
      \def\tp@cur@node{#1}%
      \@tp@parse@attributes #2,,\@nil
    \fi\fi}
%    \end{macrocode}
% the actual, recursively applying, parser:
%    \begin{macrocode}
\gdef\tp@parse@kv#1=#2=#3\@nil{%
  \edef\@argii{#2}%
  \ifx\@argii\@empty
    \expandafter\let\csname tp@\tp@cur@node @attr@#1\endcsname\@empty%
  \else
    \ifx #2 =\else
      \expandafter\def\csname tp@\tp@cur@node @attr@#1\endcsname{#2}%
    \fi
  \fi}
\gdef\@tp@parse@attributes #1,#2,\@nil{%
  \if!#1!\else
    \tp@parse@kv#1==\@nil
    \if!#2!\else
      \@tp@parse@attributes#2,\@nil
    \fi\fi}
\endgroup

%    \end{macrocode}
% \section{Properties}\label{sec:common:props}
% This high level macro provides the property-value interface for
% transpect namespaces. \#1 is the name of the property, \#2 is the value assigned to that property.
%    \begin{macrocode}
\DeclareRobustCommand{\tpSetProperty}[2]{\expandafter\long\expandafter\protect\expandafter\def\csname tp@\tp@cur@cont @#1\endcsname{#2}}
%    \end{macrocode}
% This high-level macro is a variant of \lstinline{\tpSetProperty}
% except that it expands the value \#2 \textit{once} before assigning
% it to the property macro with the name \#1. This can be used to
% assign the current value of a variable macro, dimension, counter or
% length to a property.
%    \begin{macrocode}
\DeclareRobustCommand{\tpSetValProp}[2]{\def\@tempa{\tpSetProperty{#1}}\expandafter\@tempa\expandafter{#2}}
%    \end{macrocode}
% This is another variant of \lstinline{\tpSetProperty} that
% \textit{fully expands} it's value in \#2 before the Property is
% stored. Use this if you need to use conditionals to determine the
% actual values of Properties that otherwise expect fixed named or
% dimensional values.
%    \begin{macrocode}
\DeclareRobustCommand{\tpSetPropertyX}[2]{\expandafter\long\expandafter\protect\expandafter\edef\csname tp@\tp@cur@cont @#1\endcsname{#2}}
%    \end{macrocode}
% High level command to use a previously set property.
%    \begin{macrocode}
\def\tpUseProperty#1{\csname tp@\tp@cur@cont @#1\endcsname}
%    \end{macrocode}
% Check if property \#1 is non-empty If so, do \#2, otherwise do \#3.
%    \begin{macrocode}
\DeclareRobustCommand{\tpIfProp}[3]{\long\def\@tempa{}%
  \expandafter\ifx\csname tp@\tp@cur@cont @#1\endcsname\@tempa#3\else#2\fi\ignorespaces}
%    \end{macrocode}
% Check if a property \#1's value is equal to \#2.
% If so, do \#3, otherwise do \#4.
%    \begin{macrocode}
\DeclareRobustCommand{\tpIfPropVal}[4]{\long\def\@tempa{#2}%
  \expandafter\ifx\csname tp@\tp@cur@cont @#1\endcsname\@tempa\relax#3\else#4\fi\ignorespaces}
%    \end{macrocode}
% Add to namespace-specific defaults; \#1 is the namespace, \#2 is a block of property assignments.
%    \begin{macrocode}
\DeclareRobustCommand{\tpAddToDefault}[2]{\csgappto{tp@#1@default}{#2}}
%    \end{macrocode}
% This macro recursivly loads a namespace's properties, the properties
% of parent namespaces, and the default properties (in reverse
% order). \#1 is the current namespace, \#2 is the top-level namespace.
%    \begin{macrocode}
\def\tpCascadeProps#1#2{%
  \csname tp@#2@default\endcsname
  \expandafter\ifx\csname tp@#2@#1@parent\endcsname\relax\else
    \expandafter\tp@inherit@props\expandafter{\csname tp@#2@#1@parent\endcsname}{#2}%
  \fi
  \csname tp@#2@#1@properties\endcsname
}
%    \end{macrocode}
% This low-level macro recursivly loads properties from parent
% namespaces, if they exist. \#1 is the parent (may be empty), \#2 is
% the macro family.
%    \begin{macrocode}
\def\tp@inherit@props#1#2{%
  \expandafter\ifx\csname tp@#2@#1@parent\endcsname\relax\else
    \edef\@tempa{\csname tp@#2@#1@parent\endcsname}%
    \expandafter\tp@inherit@props\expandafter{\@tempa}{#2}%
  \fi
  \csname tp@#2@#1@properties\endcsname
}
%    \end{macrocode}
% \section{Classes}
% CSS-like classes, technically nothing but property lists.
%
% The top-level macro \lstinline|\tpDeclareClass[#1]{#2}[#3]{#4}| has
% four arguments, two of which are optional. \#2 is the name of the
% class. If this argument is empty, the special class name
% \lstinline{default} is used. \#4 is the declaration block of the
% class. This argument usually containsa set of property assignments
% using the \lstinline|\tpSetProperty{<prop>}{<val>}| macro, see
% Sect.~\ref{sec:common:props}. The first optional argument \#1 is the
% class' namespace. Using namespaces, you can have classes of the
% same name for different namespaces, e.g., a \lstinline{default}
% class for each float and heading namespaces. The second optional
% argument \#3 is the parent class. Properties from that class are
% loaded automatically prior to the loading of the current class. This
% applies recursively allowing for a cascading of property values,
% like in CSS.
%    \begin{macrocode}
\long\def\tpDeclareClass{\@ifnextchar [{\@tp@set@class}{\@tp@set@class[default]}}%]
\long\def\@tp@set@class[#1]#2{\@ifnextchar [{\tp@set@class[#1]{#2}}{\tp@set@class[#1]{#2}[]}}%]
\long\gdef\tp@default@class@default{}
\long\def\tp@set@class[#1]#2[#3]#4{%
  \def\@argii{#2}\ifx\@argii\@empty\let\@argii\tp@str@default\fi%
  \if!#3!\else
    \expandafter\long\expandafter\def\csname tp@#1@class@\@argii @parent\endcsname{#3}%
  \fi
  \expandafter\long\expandafter\def\csname tp@#1@class@\@argii\endcsname{#4}%
}
%    \end{macrocode}
% High level macro to expand and “activate” a class's properties,
% those of its recursive ancestor classes, and the default class
% respecting the currently active namespace. \#1 is the class name,
% \#2 is the namespace.
%    \begin{macrocode}
\def\tpUseClass#1#2{%
  \expandafter\ifx\csname tp@#2@class@#1\endcsname\relax
    \expandafter\ifx\csname tp@default@class@#1\endcsname\relax
      \PackageError{transpect.cls}{Class `#1' with scope `#2' not defined!}{Please declare the class `#1'!}%
    \fi
  \fi
  \csname tp@default@class@#1\endcsname%
  \expandafter\ifx\csname tp@#2@class@#1@parent\endcsname\relax\else
    \expandafter\tpUseClass\expandafter{\csname tp@#2@class@#1@parent\endcsname}{#2}%
  \fi
  \csname tp@#2@class@#1\endcsname}
%    \end{macrocode}
%
% \subsection{minusvspace}
% Counterpart to \LaTeX's \lstinline{\addvspace}: if the value of
% \lstinline{\minusvspace} is larger than \lstinline{\lastskip},
% \lstinline{\lastskip} is used. Otherwise, the value of
% \lstinline{\minusvspace} is used.
%    \begin{macrocode}
\def\@xminusvskip{%
  \ifdim\lastskip<\@tempskipb
  \else
    \ifdim\@tempskipb<\z@
      \ifdim\lastskip<\z@
      \else
        \advance\@tempskipb\lastskip
        \vskip-\lastskip
        \vskip \@tempskipb
      \fi
    \fi
  \fi}
\def\minusvspace#1{%
  \ifvmode
     \if@minipage\else
       \ifdim \lastskip =\z@
%    \end{macrocode}
% Compatibility to texlive pre 2020:
%    \begin{macrocode}
         \ifx\@vspace@calcify\@undefined
           \vskip #1\relax
         \else
           \@vspace@calcify{#1}%
         \fi
       \else
       \setlength\@tempskipb{#1}%
         \@xminusvskip
       \fi
     \fi
  \else
    \@noitemerr
  \fi}
%    \end{macrocode}
%
% \subsection{Masks}
% These macros are intended to mask non-content markup, like page- or
% line breaking commands in order to find and remove or alter them
% easier.
%
%    \begin{macrocode}
\let\hack\@firstofone
\let\Hack\@firstofone
\let\hackfor\@gobble
\let\Hackfor\@gobble

%    \end{macrocode}
% \subsection{Determine actual page number}
%
% Largely adapted from the \lstinline{marginnote} package.
%
% Counting absolute page numbers may be misleading when the
% transpect-title module is loaded and the cover page is not followed
% by an empty page. Therefore, we save the default page counter from
% {\LaTeX} to evaluate it independently from the actual manner of
% counting.
%    \begin{macrocode}
\def\the@tp@thispage{}%
\newcount\tp@abspage \tp@abspage\z@ \def\thetp@abspage{\the\tp@abspage}
\newif\if@tp@odd \@tp@oddtrue
\AtBeginDocument{%
  \global\tp@abspage=\c@page\relax%
  \g@addto@macro\@outputpage{\global\tp@abspage\c@page}%
}
%    \end{macrocode}
% We split this into two parts. The first one is run before the
% floating object is placed. It will store the page according to the
% placement in the tex source code.
%    \begin{macrocode}
\def\tp@test@page{%
  \expandafter\ifx\csname the@tp@thispage\endcsname\@empty
    \gdef\the@tp@atthispage{1}%
  \else
    \expandafter\ifnum \the@tp@thispage=\tp@abspage%
      \begingroup
        \@tempcnta\the@tp@atthispage\relax
        \advance\@tempcnta\@ne\relax
        \xdef\the@tp@atthispage{\the\@tempcnta}%
      \endgroup
    \else
      \gdef\@tp@atthispage{1}%
    \fi
  \fi
  \xdef\the@tp@thispage{\the\tp@abspage}%
  \let\@tp@currpage\relax
  \expandafter\ifx\csname \tp@cur@cont-\the@tp@thispage-\the@tp@atthispage\endcsname\relax
    \ifodd\tp@abspage\relax\@tp@oddtrue\else\@tp@oddfalse\fi
  \else
    \edef\@tp@currpage{\expandafter\expandafter\expandafter\@firstofone\csname \tp@cur@cont-\the@tp@thispage-\the@tp@atthispage\endcsname}%
    \ifodd\@tp@currpage\relax\@tp@oddtrue\else\@tp@oddfalse\fi
  \fi
}
%    \end{macrocode}
% the second macro writes the actual position of the floating object
% into the aux files. This macro has to be placed inside the float
% environment/macro.
%    \begin{macrocode}
\def\tp@save@page{%
  \protected@write\@auxout{\def\the@tp@cur@cont{\tp@cur@cont}\let\thetp@abspage\relax}{%
    \string\expandafter\string\gdef\string\csname\space \tp@cur@cont-\the@tp@thispage-\the@tp@atthispage\string\endcsname{\thetp@abspage}}%
}

%    \end{macrocode}
%
% \section{Macros used in several modules}
%
% This macro looks if \#1 has already been defined (e.g., in an
% earlier tex run) and stores that inital value back in the aux files
% for the following runs. Useful if you want to store only the highest
% value of a parameter, like the maximum width of a heading number of
% a certain level.
%    \begin{macrocode}
\def\tp@restore@init#1#2{%
  \AtBeginDocument{%
    \expandafter\ifx\csname tp-#1-#2\endcsname\relax\else
      \immediate\write\@auxout{\string\expandafter\string\gdef\string\csname\space tp-#1-#2\string\endcsname{\csname tp-#1-#2\endcsname}}%
    \fi}}
%    \end{macrocode}
% This is a general line break macro intended to be re-defined if
% necessary without touching LaTeX's kernel macros.
%    \begin{macrocode}
\DeclareRobustCommand{\tpBreak}{\hfill\break}
%    \end{macrocode}
%
% \subsection{Content lists}
%
% This part contains macros to ``simplify'' the generation of content
% lists like the table of contents or list of figures/tables, etc.
%
% Entries in the list-files (e.\,g., \lstinline{\jobname.toc},
% \lstinline{\jobname.lof}, etc.) usually contain
% \lstinline{\contentsline} macros that expand to
% \lstinline{l@<level>}.  Whenever a level of components that are to
% be written in content lists is declared, the package automatically
% generates a \lstinline{\l@<level>} macro for this level of entries.
% The content-baring argument of \lstinline{\contentsline} (or
% \lstinline{l@<level>}, resp.) contains Components.
%
% Once a list file is read, those \lstinline{l@<level>} macros are
% expanded in two steps. Each entry constitutes a Namespace on its
% own, it therefore has a Namespace and can have multiple
% Components. The first step is the extraction phase, where the
% entry's Namespace is declared, the corresponding properties are
% initialised, and its Components are extracted
%
% This low-level macro is used to dynamically define
% \lstinline{l@<level>} macros. Optional \#1 is an override for
% counters that have to be restored, \#2 is the list file ending, \#3
% numeric level, \#4 is the level's name.
%    \begin{macrocode}
\def\tp@init@l@{\@ifnextchar[\@tp@init@l@{\@tp@init@l@[]}}%]
\def\@tp@init@l@[#1]#2#3#4{%
  \expandafter\ifx\csname c@#2depth\endcsname\relax
    \expandafter\global\expandafter\newcount\csname c@#2depth\endcsname
    \expandafter\global\csname c@#2depth\endcsname=0\relax
  \fi
  \expandafter\tp@restore@init\expandafter{\tp@cur@cont}{#1\if!#1!#2\fi-number-#3-maxwd}%
  \expandafter\tp@restore@init\expandafter{\tp@cur@cont}{#1\if!#1!#2\fi-number-#3-indent}%
  \expandafter\ifx\csname tp@#2@extract@data\endcsname\relax
    \expandafter\let\csname tp@#2@extract@data\endcsname\tp@extract@generic
  \fi
  \expandafter\ifx\csname tp@#2@print@entry\endcsname\relax
    \expandafter\let\csname tp@#2@print@entry\endcsname\tp@print@generic
  \fi
  \expandafter\long\expandafter\gdef\csname l@#4\endcsname##1##2{%
    \ifLuaTeX\suppresslongerror=1\fi
    \expandafter\ifnum \csname c@#2depth\endcsname<#3\relax
    \else
      \bgroup
        \long\def\tpTocLink####1{\hyper@linkstart{link}{\Hy@tocdestname}{####1}\hyper@linkend}%
        \csname tp@#2@extract@data\endcsname{#3}{#4}{##1}{##2}%
        \csname tp@#2@print@entry\endcsname{#4}%
      \egroup
    \fi
    \ifLuaTeX\suppresslongerror=0\fi
  }}

\def\tp@extract@generic#1#2#3#4{%
}
\def\tp@print@generic#1{%
}
%    \end{macrocode}
% This macro expands the content of the l@<level> macro and contains
% some code to catch and handle standard \LaTeX\ headings. \#1 is the
% content of the l@-macro, \#2 is the namespace, and \#3 is the
% Component prefix.
%    \begin{macrocode}
\def\tp@expand@l@contents#1#2#3#4{%
  \sbox\z@{\def\numberline##1{\expandafter\gdef\csname tp@#2@#3Number\endcsname{##1}}#1}%
  \ifdim\wd\z@>\z@
    \let\numberline\@gobble%
    \expandafter\xdef\csname tp@#2@#3#4\endcsname{#1}%
  \else
    #1%
  \fi}
%    \end{macrocode}
% This macro calculates number widths and prepares macros to be used
% by the user. \#1 is the internal Property prefix, \#2 is the
% user-level Component prefix, \#3 is the numerical list level.
%    \begin{macrocode}
\def\tp@format@number#1#2#3{%
  \tpSetProperty{#1formatted-number}{}%
  \tpIfComp{#2Number}{%
    \tpSetProperty{#1formatted-number}{%
      \bgroup
        \tpUseProperty{#1title-format}%
        \tpUseProperty{#1number-format}%
        \tpUseComp{#2Number}%
        \tpUseProperty{#1number-sep}%
      \egroup}%
    \sbox\z@{\tpUseProperty{#1formatted-number}}%
  }{%
    \sbox\z@{}%
  }%
  \tp@store@maxwd{#1number-#3-maxwd}{\the\wd\z@}%
  \tpSetValProp{#1number-width-level-max}{\csname tp-heading-#1number-#3-maxwd\endcsname}%
  \tp@store@maxwd{#1number-maxwd}{\the\wd\z@}%
  \tpSetValProp{#1number-width-max}{\csname tp-heading-#1number-#3-maxwd\endcsname}%
  \tpSetValProp{#1number-width}{\the\wd\z@}%
  \tp@get@indent{#1}{#3}%
  \tp@set@hang{#1}%
}
%    \end{macrocode}
% \subsection{Macro to determine indentation}
%
% Macro to determine and set the hanging indent of a counter. \#1 is
% the internal Property prefix.
%    \begin{macrocode}
\def\tp@set@hang#1{%
  \tpSetProperty{#1hang-number}{\tpUseProperty{#1formatted-number}}%
  \tpIfProp{#1indent}
    {\ifdim\tpUseProperty{#1indent}<\z@
        \tpSetProperty{#1hang-number}{%
          \hskip\tpUseProperty{#1indent}%
          \hbox to -\tpUseProperty{#1indent}{%
            \tpIfPropVal{#1number-align}{left}{}{\hss}%
            \tpUseProperty{#1formatted-number}%
            \tpIfPropVal{#1number-align}{right}{}{\hss}}}%
      \fi}{}}
%    \end{macrocode}
% Macro that determins the indent of the next higher level of the
% list. ``Higher'' meaning hierarchical, i.e. the index is lower. \#1
% is the Property prefix, \#2 is the numerical list level.
%    \begin{macrocode}
\def\tp@det@prev@indent#1#2{%
  \@tempcnta\numexpr#2-1\relax
  \ifdim\tpUseProperty{#1indent}<\z@\relax
    \@tempdimb=-\tpUseProperty{#1indent}\relax
  \else
    \@tempdimb=\tpUseProperty{#1indent}\relax
  \fi
  \expandafter\ifx\csname tp-\tp@cur@cont-#1\the\@tempcnta-indent\endcsname\relax
    \@tempdima=\@tempdimb\relax%
  \else
    \@tempdima\dimexpr \csname tp-\tp@cur@cont-#1\the\@tempcnta-indent\endcsname+\@tempdimb\relax
  \fi
  \tp@store@maxwd{#1#2-indent}{\the\@tempdima}%
  \tpSetProperty{#1margin-left}{\csname tp-\tp@cur@cont-#1#2-indent\endcsname}}
%    \end{macrocode}
% This low-level macro takes the csname of an unprefixed dimension and
% stores its value in the aux files iff the previous value of that
% conrol structure is lower than the current value.
%
% \#1 is the internal name of the property sans \lstinline{tp-}, \#2 is 
%    \begin{macrocode}
\def\tp@store@maxwd#1#2{%
  \expandafter\ifx\csname tp-\tp@cur@cont-#1\endcsname\relax
    \immediate\write\@auxout{\string\expandafter\string\gdef\string\csname\space tp-\tp@cur@cont-#1\string\endcsname{#2}}
    \expandafter\xdef\csname tp-\tp@cur@cont-#1\endcsname{#2}%
  \else
    \expandafter\ifdim\csname tp-\tp@cur@cont-#1\endcsname<#2\relax
      \immediate\write\@auxout{\string\expandafter\string\gdef\string\csname\space tp-\tp@cur@cont-#1\string\endcsname{#2}}%
      \expandafter\xdef\csname tp-\tp@cur@cont-#1\endcsname{#2}%
    \fi
  \fi}
%    \end{macrocode}
% Eventually, write the actually used values for margin-left and
% indent into the headings's Property list. \#1 is the internal
% property prefix, \#2 is the numerical list level.
%    \begin{macrocode}
\def\tp@get@indent#1#2{%
  \tpSetPropertyX{int-#1margin-left}{\tpUseProperty{#1margin-left}}%
  \tpSetPropertyX{int-#1indent}{\tpUseProperty{#1indent}}%
  \expandafter\let\expandafter\tp@tmp@numwd\csname tp-\tp@cur@cont-#1number-#2-maxwd\endcsname\relax
  \tpIfPropVal{int-#1margin-left}{auto-global}
    {\tpSetProperty{#1indent}{-\csname tp-\tp@cur@cont-#1number-maxwd\endcsname}%
     \tpSetProperty{#1margin-left}{\csname tp-\tp@cur@cont-#1number-maxwd\endcsname}}
    {\tpIfPropVal{int-#1margin-left}{auto}
       {\tpIfPropVal{int-#1indent}{auto}
          {\tpSetProperty{#1indent}{-\tp@tmp@numwd}}
          {\tpIfProp{int-#1indent}
             {\tpSetPropertyX{#1indent}{\tpUseProperty{int-#1indent}}}
             {\tpSetProperty{#1indent}{\z@}}}%
        \tp@det@prev@indent{#1}{#2}}
       {\tpIfProp{int-#1margin-left}
          {\tpIfPropVal{int-#1indent}{auto}
            {\tpSetProperty{#1indent}{-\tp@tmp@numwd}}
            {\tpIfProp{int-#1indent}
               {\tpSetPropertyX{#1indent}{\tpUseProperty{int-#1indent}}}
               {\tpSetProperty{#1indent}{\z@}}}}
         {\tpIfPropVal{int-#1indent}{auto}
            {\tpSetProperty{#1margin-left}{\tp@tmp@numwd}%
             \tpSetProperty{#1indent}{-\tp@tmp@numwd}}
            {\tpIfProp{int-#1indent}
               {\tpSetPropertyX{#1indent}{\tpUseProperty{int-#1indent}}%
                \tpSetProperty{#1margin-left}{\z@}}
               {\tpSetProperty{#1indent}{\z@}%
                \tpSetProperty{#1margin-left}{\z@}}}}}}%
    }
%    \end{macrocode}
% \subsection{Label generation and selection}
%
% \#1 is the language, \#2 is the internal reference name, and \#3 is the language specific label.
%    \begin{macrocode}
\def\tp@str@german{german}
\def\tp@str@english{english}

\def\tpSetBabelLabel#1#2#3{%
  \def\@lang{#1}%
  \expandafter\def\expandafter\@tempa\expandafter{\expandafter\def\csname #2name\endcsname{#3}}%
  \ifx\@lang\tp@str@german
    \expandafter\addto\expandafter\captionsgerman\expandafter{\@tempa}%
    \expandafter\addto\expandafter\captionsngerman\expandafter{\@tempa}%
  \else
    \ifx\@lang\tp@str@english
      \expandafter\addto\expandafter\captionsbritish\expandafter{\@tempa}%
      \expandafter\addto\expandafter\captionsUKenglish\expandafter{\@tempa}%
      \expandafter\addto\expandafter\captionsenglish\expandafter{\@tempa}%
      \expandafter\addto\expandafter\captionsamerican\expandafter{\@tempa}%
      \expandafter\addto\expandafter\captionsUSenglish\expandafter{\@tempa}%
    \else
    \fi
  \fi}
%    \end{macrocode}
%    \begin{macrocode}[gobble=1]
%</common>
%    \end{macrocode}
