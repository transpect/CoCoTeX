%    \end{macrocode}
% \chapter{transpect-common.dtx}
% This file provides some basic macros and facilities like macro
% hooks.
%
%    \begin{macrocode}
%%
%% module for le-tex transpect.cls that provides some commonly used base macros.
%%
%% Maintainer: p.schulz@le-tex.de
%%
%% lualatex  -  texlive > 2019
%%
\NeedsTeXFormat{LaTeX2e}[2019/01/01]
\ProvidesPackage{transpect-common}
    [2020/22/04 0.90 le-tex transpect common module]
%    \end{macrocode}
% prefix macro used to execute code after the next \lstinline{\fi}:
%    \begin{macrocode}
\def\afterfi#1\fi{\fi#1}
%    \end{macrocode}
% \lstinline{\afterbox} prevents indentation and additional spacing after
% environments. Intended to be used in combination with
% \lstinline{\aftergroup}.
%    \begin{macrocode}
\def\@afterbox{%
  \everypar{%
    \if@nobreak
      \@nobreakfalse
      \clubpenalty \@M
      \if@afterindent \else
        {\setbox\z@\lastbox}%
        \everypar{}%
      \fi
    \else
      \clubpenalty \@clubpenalty
      {\setbox\z@\lastbox}%
      \everypar{}%
    \fi}}
%    \end{macrocode}
% This macro is used to calculate the ratio between two integers.
%    \begin{macrocode}
\def\CalcRatio#1#2{\strip@pt\dimexpr\number\numexpr\number\dimexpr#1\relax*65536/\number\dimexpr#2\relax\relax sp}
%    \end{macrocode}
% Temporarily silence a macro that may (or may not) have an optional
% argument. Use it like this:
% \lstlisting{\let\yourMacroWithOptArg\@gobbleopt}
%    \begin{macrocode}
\def\@gobbleopt#1#{\@gobble}
\def\tpGobble{%
  \let\footnote\@gobbleopt%
  \let\label\@gobble%
  \let\index\@gobbleopt}%
%    \end{macrocode}
%% traverse step-wise through counter \#1, start at number \#2 until and including number \#3 and do at every loop \#4 (from \lstinline{forloop.sty}):
%    \begin{macrocode}
\long\def\sh@iterate#1#2#3#4{%
  \advance#1\@ne\relax
  #1=#2\relax%
  \expandafter\ifnum#1>#3\relax%
  \else
    #4%
    \sh@iterate{#1}{\the#1}{#3}{#4}%
  \fi}%
%    \end{macrocode}
%% \section{Hooks}
%% In this part we provide the facility to utilize Hooks to patch code into different parts of the package depending on options and loaded packages.
%    \begin{macrocode}
\RequirePackage{etoolbox}
\def\tpDeclareHook#1{\expandafter\global\expandafter\let\csname tp@hook@\tp@namespace @#1\endcsname\@empty}
\def\tpAddToHook#1#2{%
  \expandafter\ifx\csname tp@hook@\tp@namespace @#1\endcsname\relax
    \tpDeclareHook{#1}%
  \fi
  \csgappto{tp@hook@\tp@namespace @#1}{#2}%
}
\def\tpUseHook#1{\expandafter\ifx\csname tp@hook@\tp@namespace @#1\endcsname\relax\else\csname tp@hook@\tp@namespace @#1\endcsname\fi}
%    \end{macrocode}
%
% \section{Blocks}
% Blocks are bundled units of formatting elements. They provide three
% hooks: \lstinline{Before<Name><Level>},
% \lstinline{After<Name><Level>}, and
% \lstinline{<Name>Format<Level>}. The arguments are \#1:
% \lstinline{<Name>}, \#2 \lstinline{<Level>}.
%    \begin{macrocode}
\def\tpDeclareBlock#1#2{%
  \tpDeclareHook{Before#1#2}%
  \tpDeclareHook{#1Format#2}%
  \tpDeclareHook{After#1#2}%
}
%    \end{macrocode}
% The use-call function for Blocks
%    \begin{macrocode}
\def\tpUseBlock#1#2{%
  \expandafter\ifx\csname tp@\tp@namespace @#1\endcsname\relax\else
    \tpUseHook{Before#1#2}%
    {\tpUseHook{#1Format#2}\csname tp@\tp@namespace @#1\endcsname}%
    \tpUseHook{After#1#2}%
  \fi}
%    \end{macrocode}
% Defines macros that are only valid within their environment.
% \begin{description}
% \item[\#1] is the top-level macro name
% \item[\#2] is code that is executed \textit{before} assignment of the user's value
% \item[\#3] is code that is executed \textit{after} assignment of the user's value
% \item[\#4] is the internal identifier. The macro that is build is 
% \end{description}
%    \begin{macrocode}
\def\tpProvideMacro#1#2#3#4{%
  \ltx@LocalExpandAfter\global\expandafter\let\csname tp@\tp@namespace @#4\endcsname\relax
  \expandafter\long\expandafter\protected\expandafter\def\csname #1\endcsname##1{#2\ltx@LocalExpandAfter\long\expandafter\protected\expandafter\gdef\csname tp@\tp@namespace @#4\endcsname{##1}\ignorespaces#3}
}
\def\tpNamespace#1{\def\tp@namespace{#1}}
%    \end{macrocode}
% High level command to use Data field \#1.
%    \begin{macrocode}
\DeclareRobustCommand{\tpUseMacro}[1]{\csname tp@\tp@namespace @#1\endcsname\relax}
%    \end{macrocode}
% High level macro that executes \#2 if Macro \#1 is non-empty, and \#3 if it is empty.
%    \begin{macrocode}
\DeclareRobustCommand{\tpIfMacro}[3]{\expandafter\ifx\csname tp@\tp@namespace @#1\endcsname\relax#3\else#2\fi}


%    \end{macrocode}
%
% \section{Class handler}
%
% % TODO: in eigene csstex.sty auslagern und dann hier und in htmltabs einbinden
%
% Declaring float classes.
% \begin{description}
% \item[\#1] scope, e.g, \lstinline{figure} or \lstinline{table} (optional).
% \item[\#2] class name.  If left empty, \lstinline{default} is used
%   instead.
% \item[\#3] parent class (optional)
% \item[\#4] properties
% \end{description}
%    \begin{macrocode}
\def\CSSDeclareClass{\@ifnextchar [{\@css@set@class}{\@css@set@class[]}}%]

\def\@css@set@class[#1]#2{\@ifnextchar [{\css@set@class[#1]{#2}}{\css@set@class[#1]{#2}[]}}%]

\gdef\css@@class@default{}

\def\css@set@class[#1]#2[#3]#4{%
  \def\@argii{#2}\ifx\@argii\@empty\let\@argii\tp@str@default\fi%
  \if!#3!\else
    \expandafter\def\csname css@#1@class@\@argii @parent\endcsname{#3}%
  \fi
  \expandafter\def\csname css@#1@class@\@argii\endcsname{%
    #4%
  }%
}
%    \end{macrocode}
% High level macro to cascade the classes and to initialize the
% resulting properties
%    \begin{macrocode}

\def\cssUseClass#1{%
  \expandafter\ifx\csname css@\tp@captype @class@#1\endcsname\relax
    \expandafter\ifx\csname css@@class@#1\endcsname\relax
      \PackageError{transpect-flaots.sty}{Class `#1' not defined!}{Please declare the class `#1'!}%
    \fi
  \fi
  \let\ht@cur@element\tp@captype
  \csname css@@class@#1\endcsname%
  \expandafter\ifx\csname css@\tp@captype @class@#1@parent\endcsname\relax\else
    \expandafter\let\expandafter\@tempa\csname css@\tp@captype @class@#1@parent\endcsname
    \csname css@\tp@captype @class@\@tempa\endcsname
  \fi
  \csname css@\tp@captype @class@#1\endcsname%
}
%    \end{macrocode}
%
% \section{Attributes}
% In this part, we provide some macros to parse enviroment
% attributes. Curtesy of the \lstinline{htmltabs} package.
%
%
%    \begin{macrocode}
\begingroup
\catcode`"=12
%    \end{macrocode}
% High level wrapper for the attribute parser; \#1 is the parent node of the attribute, \#2 is the attribute chain
%    \begin{macrocode}
\gdef\cssParseAttributes#1#2{%
  \if!#1!\else
    \if!#2!\else
      \def\css@cur@node{#1}%
      \@css@parse@attributes #2,,\@nil
    \fi\fi}
%    \end{macrocode}
% the actual, recursively applying, parser:
%    \begin{macrocode}
\gdef\css@parse@kv#1=#2=#3\@nil{%
  \ifx!#2!\else
    \ifx #2==\else
      \expandafter\def\csname css@\css@cur@node @attr@#1\endcsname{#2}%
    \fi
  \fi}
\gdef\@css@parse@attributes #1,#2,\@nil{%
  \if!#1!\else
    \css@parse@kv#1==\@nil
    \if!#2!\else
      \@css@parse@attributes#2,\@nil
    \fi\fi}
\endgroup

%    \end{macrocode}
% \section{Properties}
% This high level macro provides the property-value interface for
% transpect environments.
%    \begin{macrocode}
\DeclareRobustCommand{\tpSetProperty}[2]{\expandafter\long\expandafter\protect\expandafter\def\csname tp@\tp@namespace @#1\endcsname{#2}}
\def\tpUseProperty#1{\csname tp@\tp@namespace @#1\endcsname}
%    \end{macrocode}
% Check if property \#1 is non-empty.
%    \begin{macrocode}
\DeclareRobustCommand{\tpIfProp}[3]{\long\def\@tempa{}%
  \expandafter\ifx\csname tp@\tp@namespace @#1\endcsname\@tempa#3\else#2\fi\ignorespaces}
%    \end{macrocode}
% Add to namespace-specific defaults, \#1 is the namespace, \#2 are the properties.
%    \begin{macrocode}
\DeclareRobustCommand{\tpAddToDefault}[2]{%
  \csgappto{tp@#1@default}{#2}%
}
%    \end{macrocode}
% This macro recursivly loads properties from parent environments. \#1 is the parent (may be empty), \#2 is the macro family.
%    \begin{macrocode}
\def\tp@inherit@props#1#2{%
  \expandafter\ifx\csname tp@#2@#1@parent\endcsname\relax\else\expandafter\tp@inherit@props\expandafter{\csname tp@#2@#1@parent\endcsname}{#2}\fi
  \csname tp@#2@#1@properties\endcsname
}
%    \end{macrocode}
% This macro recursivly loads default properties and propertiess from parent environments. \#1 is the parent (may be empty), \#2 is the environment name, \#3 is the macro family.
%    \begin{macrocode}
\def\tp@cascade@props#1#2#3{%
  \csname tp@#3@default\endcsname
  \if!#1!\else
    \expandafter\def\csname tp@#3@#2@parent\endcsname{#1}%
    \tp@inherit@props{#1}{#3}%
  \fi
}


\let\hack\@firstofone
\let\Hack\@firstofone
\let\hackfor\@gobble
\let\Hackfor\@gobble
