% \chapter{transpect-lists.dtx}
% This module provides handlers for lists like glossaries and descriptions.
%
%    \begin{macrocode}[gobble=1]
%<*lists>
%    \end{macrocode}
%    \begin{macrocode}
%%
%% module for le-tex transpect.cls that handles lists.
%%
%% Maintainer: marcus.hottenroth@le-tex.de
%%
%% lualatex – texlive ≥ 2019
%%
\NeedsTeXFormat{LaTeX2e}[2018/12/01]
\ProvidesPackage{transpect-lists}
    [\filedate \fileversion le-tex transpect lists module]
\RequirePackage{transpect-common}
\usepackage{enumerate}

\ifx\labelitemfont\@undefined\let\labelitemfont\relax\fi
\renewcommand\labelitemi  {\labelitemfont \textendash}
\setlength\leftmargini{\parindent}%

\def\@listi{%
  \leftmargin\leftmargini
  \parsep \z@
  \listparindent\parindent
  \topsep .5\baselineskip % Hier Properties nutzen!
  \itemsep\z@}
\let\@listI\@listi

\def\@listii {\leftmargin\leftmarginii
              \labelwidth\leftmarginii
              \advance\labelwidth-\labelsep
              \topsep    \z@
              \parsep    \z@
              \itemsep   \parsep}
              
\def\@listiii{\leftmargin\leftmarginiii
              \labelwidth\leftmarginiii
              \advance\labelwidth-\labelsep
              \topsep    \z@
              \parsep    \z@
              \partopsep \z@
              \itemsep   \topsep}
              
\def\@@enum@[#1]{%
  \@enLab{}\let\@enThe\@enQmark
  \@enloop#1\@enum@
  \ifx\@enThe\@enQmark\@warning{The counter will not be printed.%
   ^^J\space\@spaces\@spaces\@spaces The label is: \the\@enLab}\fi
  \expandafter\edef\csname label\@enumctr\endcsname{\the\@enLab}%
  \expandafter\let\csname the\@enumctr\endcsname\@enThe
  \csname c@\@enumctr\endcsname7
  \@enum@}
  
\def\@enum@{%
  \list{\csname label\@enumctr\endcsname}%
  {%
    \usecounter{\@enumctr}%
    \labelsep\z@
    \labelwidth\leftmargin
    \def\makelabel##1{\hb@xt@\leftmargin{##1\hss}}}}

\def\itemize{%
  \ifnum \@itemdepth >\thr@@\@toodeep\else
    \advance\@itemdepth\@ne
    \edef\@itemitem{labelitem\romannumeral\the\@itemdepth}%
    \expandafter
    \list
      \csname\@itemitem\endcsname
      {\labelsep\z@
       \itemindent\z@
       \labelwidth\leftmargin
       \def\makelabel##1{\hb@xt@\leftmargin{##1\hss}}}%
  \fi}

\let\orig@doendpe\@doendpe
\def\endenumerate{\endlist
  \gdef\@doendpe{%
    \@endpetrue
    \everypar{{\setbox\z@\lastbox}\everypar{}\@endpefalse}%
    \global\let\@doendpe\orig@doendpe}}

\def\enditemize{\endlist
  \gdef\@doendpe{%
    \@endpetrue
    \everypar{{\setbox\z@\lastbox}\everypar{}\@endpefalse}%
    \global\let\@doendpe\orig@doendpe}}


% Counter for the description lists.
\newcount\tp@descriptionlist
% Macro for saving the maximum label widths associated with the respective list;
% 0pt as fallback value, if there is no *.aux file yet.
\global\newdimen\tp@maxLabelWidth%
\def\tp@getMaxLabelWidth{%
  \global\tp@maxLabelWidth=0pt%
}

\renewenvironment{description}[1][]{%
  \small
  % Read maximum label width for this list from the *.aux file and save as \tp@maxLabelWidth.
  \tp@getMaxLabelWidth
  \list{}%
   {\labelwidth\tp@maxLabelWidth
    \leftmargin\dimexpr\tp@maxLabelWidth+\labelsep\relax
    \topsep .5\baselineskip
    \itemsep\z@
    \partopsep\z@
    \parsep\z@
    \itemindent\z@
    \def\makelabel##1{%
      \sbox\z@{##1}%
      \ifdim\tp@maxLabelWidth<\wd\z@\relax
        \global\tp@maxLabelWidth=\wd\z@\relax
      \fi
      \hb@xt@\labelwidth{\unhbox\z@\hss}%
    }%
   }%
}{\endlist
\immediate\write\@auxout{\string\g@addto@macro\string\tp@getMaxLabelWidth{\string\ifnum\string\the\tp@descriptionlist=\the\tp@descriptionlist\relax\string\global\string\tp@maxLabelWidth=\the\tp@maxLabelWidth\string\fi}}%
\global\advance\tp@descriptionlist by 1
\gdef\@doendpe{%
    \@endpetrue
    \everypar{{\setbox\z@\lastbox}\everypar{}\@endpefalse}%
    \global\let\@doendpe\orig@doendpe}}
    
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Environment declarations, transpect framework style.
% Supposed to eventually replace all the definitions above.

% Copied from the transpect-headings.sty module.
% Inheritance mechanism known from headings also applies here.

\def\tp@ifstring#1#2{%
  \edef\@tempa{#1}%
  \edef\@tempb{#2}%
  \ifx\@tempa\@tempb\relax%
}

% Convert a number to a lowercase letter.
\def\tp@numToLCLetter#1{%
  \count255=\lccode`a%
  \advance\count255 by -1%
  \advance\count255 by #1%
  \char\count255%
}

% Convert a number to an uppercase letter.
\def\tp@numToUCLetter#1{%
  \count255=\uccode`A%
  \advance\count255 by -1%
  \advance\count255 by #1%
  \char\count255%
}

\tpAddToDefault{list}{%
  \tpSetProperty{after-skip}{\z@}
  \tpSetProperty{before-skip}{\z@}
  \tpSetProperty{label-char}{} % Only applies with label-type »char« (or empty).
  \tpSetProperty{label-delimiter}{}
  \tpSetProperty{label-sep}{0\p@}
  \tpSetProperty{label-type}{char} % Label types: char (use label-char; default), number, Alpha, alpha, Roman, roman.
  \tpSetProperty{label-width}{0\p@} % Label width is internally increased to width of label character.
  \tpSetProperty{left-margin}{0\p@}
  \tpSetProperty{item-indent}{0\p@}
}


\long\def\tpDeclareList{\@ifnextchar[{\@tpDeclareList}{\@tpDeclareList[]}}%]
\long\def\@tpDeclareList[#1]#2#3{%
  \tpNamespace{list}%
  \expandafter\def\csname tp@list@name\endcsname{#2}%
  %
  \if!#1!\else\expandafter\protect\expandafter\def\csname tp@list@#3@parent\endcsname{#1}\fi%
  \expandafter\protect\expandafter\def\csname tp@list@#2@properties\endcsname{#3}%
  %\tp@init@hooks{#2}%
  %\tp@restore@init{heading}{number-#2-maxwd}%
  %
  %
  %
  % Define the macro for list with name/class #2.
  \expandafter\def\csname tpUseList#2\endcsname{%
    \if!#1!\else\edef\tp@list@parent{#1}\fi%
    \tpNamespace{list}%
    \tpCascadeProps{#2}{list} % Load the namespace defaults defined in \tpAddToDefault, the parent properties (if any), and the specific list properties.
  }
}


\def\tpList{\@ifnextchar [{\@list}{\@list[]}}%]

\def\endtpList{%
  \endlist
  \expandafter\ifx\csname tpUseList\tp@list@name\endcsname\relax
    \PackageError{transpect.cls}{List \tp@list@name\space unknown!}{A list with name \tp@list@name\space is unknown. Use the \string\tpDeclareList\space macro to declare list types.}%
  \else
    \csname tpUseList\tp@list@name\endcsname%
    \vskip\tpUseProperty{after-skip}
  \fi
  \gdef\@doendpe{%
    \@endpetrue
    \everypar{{\setbox\z@\lastbox}\everypar{}\@endpefalse}%
    \global\let\@doendpe\orig@doendpe%
  }
}


\def\@list[#1]#2{%
  \newbox\tp@labelbox%
  \global\newcount\tp@itemNumber%
  % Load the properties
  %\tpParseAttributes{list}{#1}%
  \edef\tp@list@name{#2}%
  \tpCascadeProps{#2}{list}%
  
  \vskip\tpUseProperty{before-skip}
  
  \tpIfPropVal{label-type}{char}{%
    \tp@itemNumber=-1
  }{%    
    \tp@itemNumber=\z@% 
  }%
  \tpIfPropVal{label-type}{number}{%
    \tpSetProperty{label-char}{888}%
    \edef\tp@convertNumber##1{##1}
  }{}%
  \tpIfPropVal{label-type}{Alpha}{%
    \tpSetProperty{label-char}{M}%
    \edef\tp@convertNumber##1{\tp@numToUCLetter{##1}}
  }{}%
  \tpIfPropVal{label-type}{alpha}{%
    \tpSetProperty{label-char}{m}%
    \edef\tp@convertNumber##1{\tp@numToLCLetter{##1}}
  }{}%
  \tpIfPropVal{label-type}{Roman}{%
    \tpSetProperty{label-char}{XXX}%
    \newcommand\tp@convertNumber[1]{\MakeUppercase{\romannumeral##1}}
  }{}%
  \tpIfPropVal{label-type}{roman}{%
    \tpSetProperty{label-char}{xxx}%
    \newcommand\tp@convertNumber[1]{\romannumeral##1\relax}
  }{}%
  % Set the label width based on the potentially longest label string.
  \setbox\tp@labelbox = \hbox{\tpUseProperty{label-char}\tpUseProperty{label-delimiter}}%
  \ifdim\wd\tp@labelbox > \tpUseProperty{label-width}\relax%
    \tpSetProperty{label-width}{\the\wd\tp@labelbox}%
  \fi%
  
  \list{%
    % Label. Uses [] in description items. Empty otherwise.%
  }{%
    \labelwidth\tpUseProperty{label-width}%
    \labelsep\dimexpr\tpUseProperty{label-sep}+\tpUseProperty{item-indent}\relax%
    \leftmargin\dimexpr\tpUseProperty{left-margin}+\tpUseProperty{label-width}+\tpUseProperty{label-sep}\relax%
    \topsep0mm%
    \partopsep0mm%
    \itemindent\tpUseProperty{item-indent}%
    \def\makelabel##1{%
      \ifnum\tp@itemNumber > -1\relax%
        \global\advance\tp@itemNumber by \@ne\relax%
        \tpSetProperty{label-char}{\tp@convertNumber{\the\tp@itemNumber}}%
      \fi
      \ifx\empty##1\empty%
        \hbox to \dimexpr\tpUseProperty{label-width}\relax{\tpUseProperty{label-char}\tpUseProperty{label-delimiter}\hss}%
      \else%
        \hbox to \dimexpr\tpUseProperty{label-width}\relax{##1\hss}%
      \fi%
    }%
  }%  
}

\def\tp@list@load@props{\csname tp@list@\tp@list@name @properties\endcsname}
%\def\tp@extended@ht@macros{%
%  \tp@provide@ext@hd@macros{Abstract}%
%  \tp@provide@ext@hd@macros{Keywords}%
%  \tp@provide@ext@hd@macros{DOI}%
%}
%\def\tp@provide@ext@hd@macros#1{%
%  \tpProvideComp{tp#1}{}{}{#1}%
%  \tpProvideComp{tp#1Title}{}{}{#1Title}%
%}
%\def\tp@provide@hd@macros#1{%
%  \tpProvideComp{tp#1}{}{}{#1}%
%  \tpProvideComp{tpToc#1}{}{}{Toc#1}% toc overrides
%  \tpProvideComp{tpRun#1}{}{}{Run#1}% running overrides
%  \tpProvideComp{tpBM#1}{}{}{BM#1}% bookmark overrides
%}
  
    
    
%    \end{macrocode}
%    \begin{macrocode}[gobble=1]
%</lists>
%    \end{macrocode}
