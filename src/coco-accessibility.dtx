% \chapter{coco-accessibility.dtx}
%
% This file provides code for the interaction between the {\CoCoTeX}
% framwork and the \lstinline{ltpfdfa} package.
%
% \textbf{Please consider this module as highly experimental!}
%
% There are two files created from this dtx: one
% \lstinline{coco-accessibility.sty} and one
% \lstinline{coco-accrssibility.lua}.
%
%
% \section{TeX code}
%
%    \begin{macrocode}[gobble=1]
%<*a11y-sty>
%    \end{macrocode}
% File preamble
%    \begin{macrocode}
%%
%% Accessibility features for \textit{xerif} projects.
%%
%% Maintainer: p.schulz@le-tex.de
%%
%% lualatex  -  texlive > 2018
%%
\NeedsTeXFormat{LaTeX2e}[2018/12/01]
\ProvidesPackage{coco-common}
    [\filedate \fileversion CoCoTeX common module]
%    \end{macrocode}
% The \lstinline{ltpdfa} package is a hard requirement for the
% accessibility features of {\CoCoTeX}
%    \begin{macrocode}
\RequirePackage[pdftex,pdflang=De,noautotag]{ltpdfa}%,nodetree,dospaces,doparas,,debug
%    \end{macrocode}
% PDF Document Information data are read from the xmp file, if one exists.
%    \begin{macrocode}
\addToConfig{metadata}{xmpfile=\jobname.xmp}

 %\edef\pdfobjcompresslevel{\pdfvariable objcompresslevel}
 %\pdfcompresslevel=0
 %\pdfobjcompresslevel=0


%    \end{macrocode}
% Loading lua modules for meta data processing.
%
% \textbf{Note:} \lstinline{ltpdfhyper.sty} deactivates all
% DocumentInfo processing (l. 367\,ff.), so the mechanism that passes
% the XMP meta data down to \lstinline{\hypersetup} has actually no
% practical effect at the moment.)
%    \begin{macrocode}
\directlua{ally = require('coco-accessibility')}
\directlua{ally.extract_meta()}

 % \setDocInfo{conformance}{pdfaid=2;level=A;pdfuaid=1}%

%    \end{macrocode}
% transformation of common combined glyphs (e.g. ligatures) into
% distinct unicode characters (cf. \lstinline{texdoc glyphtounicode}):
%    \begin{macrocode}
\protected\def\pdfglyphtounicode{\pdfextension glyphtounicode}
\input glyphtounicode
\edef\pdfgentounicode{\pdfvariable gentounicode}
\pdfgentounicode = 1


%    \end{macrocode}
% End of style source code.
%    \begin{macrocode}[gobble=1]
%</a11y-sty>
%    \end{macrocode}
%
%    \begin{macrocode}[gobble=1]
%<*a11y-lua>
%    \end{macrocode}
%
% \section{Lua code}
%
% \subsection{Local Variables, Tables, and Methods}
%
% \begin{macro}{ltpdfa} is an instance of the \lstinline{ltpdfa} Lua
%   table.
%    \begin{macrocode}
local ltpdfa = require('ltpdfa')
%    \end{macrocode}
% \end{macro}
% \begin{macro}{meta} is a table that holds the metadata that are
%   extracted from the \lstinline{\jobname.xmp} file.
%    \begin{macrocode}
local meta = {
  Author = '',
  Title = '',
  Creator = '',
  Producer = '',
  Keywords = ''
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{cocotex.extract_meta()}
%   This method loads the meta data from the
%   \lstinline{\jobname.xmp} and stores certain values to be accessed by LaTeX.
%    \begin{macrocode}
local function extract_meta()
  local xmpfile = ltpdfa.metadata.xmphandler.fromFile(ltpdfa.config.metadata.xmpfile)
  local f = io.open(xmpfile, "r")
  local content = f:read("*all")
  f:close()


  if (content:find('<dc:title>')) then
    meta.Title = content:gsub('.*<dc:title>[^<]*<rdf:Alt>[^<]*<rdf:li[^>]*>(.*)</rdf:li>[^<]*</rdf:Alt>[^<]*</dc:title>.*', "%1")
    -- log(">>>" .. meta.Title)
  end

  local authors
  local author = {}
  if (content:find('<dc:creator>')) then
    authors = content:gsub('.*<dc:creator>[^<]*<rdf:Seq>(.*)</rdf:Seq>[^<]*</dc:creator>.*', "%1")
    for k in string.gmatch(authors, "<rdf:li>([^>]+)</rdf:li>") do
      table.insert(author , k)
    end
    meta.Author = table.concat(author, ', ')
  end
end
%    \end{macrocode}
% \end{macro}
%
% \subsection{Public Methods}
%
% \begin{macro}{cocotex} is the base table that contains all public
%   methods and sub-tables available in the {\CoCoTeX}
%   framework. Here, it is defined unless it is already defined
%   elsewhere.
%    \begin{macrocode}
if type(cocotex) ~= 'table' then
  cocotex = {}
end
%    \end{macrocode}
% \end{macro}
% \begin{macro}{cocotex.ally} is a globally available namespace for
%   coco-accessibility specific lua tables.
%    \begin{macrocode}
cocotex.ally = {}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{cocotex.ally.extract_meta} is the globally available method to
%   trigger extraction of meta information from the xmp meta file.
%    \begin{macrocode}
cocotex.ally.extract_meta = extract_meta
%    \end{macrocode}
% \end{macro}
% \begin{macro}{cocotex.ally.meta} is the globally available table that
%   holds the extracted meta data.
%    \begin{macrocode}
cocotex.ally.meta = meta
%    \end{macrocode}
% \end{macro}
%
% After loading \lstinline{coco-accessibility.lua} via the
% \lstinline[language=Lua]{require()} method, a
% \lstinline[language=Lua]{cocotex.ally} table is returned.
%    \begin{macrocode}
return cocotex.ally
%    \end{macrocode}
% no more lua code.
%    \begin{macrocode}[gobble=1]
%</a11y-lua>
%    \end{macrocode}
