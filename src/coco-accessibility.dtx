% \chapter{coco-accessibility.dtx}
%
% This file provides code for the interaction between the {\CoCoTeX}
% framwork and the \lstinline{ltpfdfa} package.
%
% \textbf{Please consider this module as highly experimental!}
%
% There are two files created from this dtx: one
% \lstinline{coco-accessibility.sty} and one
% \lstinline{coco-accrssibility.lua}.
%
%
% \section{LaTeX code}
%
%    \begin{macrocode}[gobble=1]
%<*a11y-sty>
%    \end{macrocode}
% \subsection{General Processing}
%
% The coco-accessibility.sty starts with some general package
% information like name, current version and date of last changes.
%    \begin{macrocode}
%%
%% Accessibility features for \textit{xerif} projects.
%%
%% Maintainer: p.schulz@le-tex.de
%%
%% lualatex  -  texlive > 2018
%%
\NeedsTeXFormat{LaTeX2e}[2018/12/01]
\ProvidesPackage{coco-common}
    [\filedate \fileversion CoCoTeX common module]
%    \end{macrocode}
% \begin{macro}{\tp@if@ally} If the \lstinline{coco-ally} package is
%   loaded, the conditional from the \lstinline{coco-common} module is
%   re-defined to always expand the \texttt{true} branch and discard
%   the \texttt{false} branch:
%    \begin{macrocode}
\def\tp@if@ally{\expandafter\@firstoftwo}
%    \end{macrocode}
% \end{macro}
% The \lstinline{ltpdfa} package is a hard requirement for the
% accessibility features of {\CoCoTeX}:
%    \begin{macrocode}
\RequirePackage[pdftex,pdflang=De,noautotag]{ltpdfa}%,nodetree,dospaces,doparas,,debug
%    \end{macrocode}
% The local preferences for \CoCoTeX's accessibility features is done
% via the \lstinline{tpMeta} environment. Therefore, we hook the
% neccessary Components and Properties right into the
% \lstinline{titlepage} container. Therefore,
% \lstinline{coco-title.sty} is a hard requirement for \CoCoTeX's
% accessibility module:
%    \begin{macrocode}
\RequirePackage{coco-title}%
%    \end{macrocode}
%
% \subsection{Lua injection}
%
% Some features are realized by Lua code, so we tell LuaLaTeX to
% include the code that is generated from material later in this
% source file:
%    \begin{macrocode}
\directlua{ally = require('coco-accessibility')}
%    \end{macrocode}
%
%
% \subsection{XMP Integration}
%
% The first feature of \lstinline{coco-ally} is the integration of XMP
% meta data into the output PDF. Note that XMP integration is also a
% built-in feature of the \lstinline{coco-title} module. The following
% code provides a superior alternative to that via the
% \lstinline{ltpdfa} package.
%
% \begin{macro}{\tp@title@insert@xmp} is an override of the same macro
%   in \lstinline{coco-title.sty} (see. Sect.~\ref{sec:title:xmp}). If
%   the \lstinline{ally} document option is set, XMP inclusion is done
%   via the \lstinline{ltpdfa} package.
%
%   First we check if the specified xmp file exists. If it exists, the
%   \lstinline{DocumentInfo} is extracted from the XMP
%   file. Otherwise, we set the \lstinline{DocumentInfo} from the
%   contents of the \lstinline{titlepage} Container and let
%   \lstinline{ltpdfa} generate the \lstinline{xmp} file.
%    \begin{macrocode}
\def\tp@title@insert@xmp{%
  \edef\tp@xmp@file@name{\tpUseGComp{titlepage}{XmpFile}.xmp}%
  \IfFileExists{\tp@xmp@file@name}
    {\addToConfig{metadata}{xmpfile=\tp@xmp@file@name}%
     \directlua{ally.meta.extract()}}
    {\tpPackageWarning{A11y}{File}{%
\tp@xmp@file@name\space not found.^^J
Note that the ltpdfa package will create one^^J
from the Components given in the tpMeta Container.}}}
%    \end{macrocode}
% \end{macro}
%
% \subsection{Output Intent and ICC Profiles}
%
%
% First, we declare some Components that represent the three necessary
% parameters for the output intent:
%    \begin{macrocode}
\tpAddToType{Components}{titlepage}{%
%    \end{macrocode}
% \begin{tpComponent}{titlepage}{IccProfileFile} holds the path
%   (relative to the main tex file) and name of the .icc file.
%    \begin{macrocode}
  \tpDeclareGComp{IccProfileFile}
%    \end{macrocode}
% \end{tpComponent}
% \begin{tpComponent}{titlepage}{IccComponents} holds the number of
%   components in the color profile
%    \begin{macrocode}
  \tpDeclareGComp{IccComponents}
%    \end{macrocode}
% \end{tpComponent}
% \begin{tpComponent}{titlepage}{IccIdentifier} holds the identifier
%   of the color profile
%    \begin{macrocode}
  \tpDeclareGComp{IccIdentifier}}
%    \end{macrocode}
% \end{tpComponent}
% The Components are composed via a new Property
% \lstinline{output-intent} which we add to \lstinline{coco-title}'s
% Properties list:
%    \begin{macrocode}
\tpAddToType{Properties}{titlepage}{%
%    \end{macrocode}
% \begin{tpProperty}{titlepage}{output-intent} sends the output
%   intent information to the ltpdfa package. It must contain of three
%   data fields:
%   \begin{description}
%   \item[profile] with the name of the to-be-embedded
%     \lstinline{.icc} file,
%   \item[componetns] with an integer telling the pdfwriter how many
%     values are coded by each color (e.g., \lstinline{4} for cmyk,
%     \lstinline{3} for rgb)
%   \item[identifier] with the identifying name of the profile (e.g.,
%     \lstinline{Coated FOGRA39} for the included cmyk
%     profile, etc.)
% \end{description}
%    \begin{macrocode}
  \tpSetProperty{output-intent}{%
    profile=\tpIfComp{IccProfileFile}{\tpUseComp{IccProfileFile}}{suppl/\tp@color@enc.icc};%
    components=\tpIfComp{IccComponents}{\tpUseComp{IccComponents}}{\ifdefstring\tp@color@enc{cmyk}{4}{3}};%
    identifier=\tpIfComp{IccIdentifier}{\tpUseComp{IccIdentifier}}{\ifdefstring\tp@color@enc{cmyk}{Coated FOGRA39}{sRGB IEC61966-2.1}}%
  }}
%    \end{macrocode}
% \end{tpProperty}
% The Component Handler which links the new Components to that
% Property is added to titlepage's \lstinline{document-meta-hook}:
%    \begin{macrocode}
\tpAddToHook[titlepage]{document-meta-hook}{\edef\x{\noexpand\addToConfig{intent}{\tpUseProperty{output-intent}}}\x}
%    \end{macrocode}
%
% \subsection{Transformation of  Typographic Unicode characters}
%
% In order for screen readers to work correctly, some unicode
% characters that mask purely typographic glyphs (e.g., ligatures)
% need to be mapped to their underlaying orthographic characters. This
% is done via pdftex's \lstinline{glyphtounicode} tables:
%    \begin{macrocode}
\protected\def\pdfglyphtounicode{\pdfextension glyphtounicode}
\input glyphtounicode
\edef\pdfgentounicode{\pdfvariable gentounicode}
\pdfgentounicode = 1
%    \end{macrocode}
%
% \subsection{Encoding of the PDF-A Conformance}
% As before, the parameters for the PDF conformity level are encoded
% via specific Components in the titlepage Container:
%    \begin{macrocode}
\tpAddToType{Components}{titlepage}{%
%    \end{macrocode}
%
% \begin{tpContainer}{PDFAID} defines the PDF/A ID (Default: 2,
%   meaning: PDF/A-2)
%    \begin{macrocode}
  \tpDeclareGComp[2]{PDFAID}%
%    \end{macrocode}
% \end{tpContainer}
% \begin{tpContainer}{PDFALevel} defines the PDF/A Level (Default: A,
%   meaning PDF/A-2A)
%    \begin{macrocode}
  \tpDeclareGComp[A]{PDFALevel}%
%    \end{macrocode}
% \end{tpContainer}
% \begin{tpContainer}{PDFUAID} defines the PDF standard (Default: 1,
%   meaning: PDF/UA-1). Use \lstinline{\tpPDFUAID{}} (i.e. set it to
%   nothing) to make the document conform to the PDF/A standard, but
%   \textbf{not} to the PDF/UA standard.
%    \begin{macrocode}
  \tpDeclareGComp[1]{PDFUAID}}%
%    \end{macrocode}
% \end{tpContainer}
% The checking if the values are valid, and the separation of the
% various parts of the standard is done via a lua script in the
% \lstinline{document-meta-hook}. The \lstinline{conformance}
% DocumentInfo nodes are only written, if \textit{neither}
% \lstinline{PDFAID}, \textit{nor} \lstinline{PDFALevel} is empty.
%    \begin{macrocode}
\tpAddToHook[titlepage]{document-meta-hook}{%
  \tpIfCompEmpty{PDFAID}{}{\tpIfCompEmpty{PDFALevel}{}{%
      \edef\x{\noexpand\setDocInfo{conformance}{%
          pdfaid=\tpUseComp{PDFAID};%
          level=\tpUseComp{PDFALevel}%
          \tpIfCompEmpty{PDFUAID}{}{;pdfuaid=\tpUseComp{PDFUAID}}}}%
      \x}}}
%    \end{macrocode}
%
% \subsection{Automatic PDF Tagging}
%
% \subsubsection{Document Root Node}
%
% The following code causes the ltpdfa package to tag the
% \lstinline{document} environmant as the structural representation's
% root node:
%    \begin{macrocode}
\AtBeginShipout{\directlua{ltpdfa.pageprocessor(tex.box["AtBeginShipoutBox"])}}%
\addRolemap{document}{Document}
\AtBeginDocument{\structStart{document}}
\AtEndDocument{\structEnd{document}}
%    \end{macrocode}
% End of {\TeX} source code.
%    \begin{macrocode}[gobble=1]
%</a11y-sty>
%    \end{macrocode}
%
%    \begin{macrocode}[gobble=1]
%<*a11y-lua>
%    \end{macrocode}
%
% \section{Lua code}
%
% \subsection{Local Variables and Tables}
%
% \lstinline{ltpdfa} is an instance of the \lstinline{ltpdfa} Lua
%   table.
%    \begin{macrocode}[language={[5.3]Lua}]
local ltpdfa = require('ltpdfa')
%    \end{macrocode}
%
% \subsection{Meta Data Extraction}
%
%
% \lstinline{meta} is a table that holds the metadata that are
% extracted from the \lstinline{\jobname.xmp} file via its
% \lstinline{extract} member.
%    \begin{macrocode}[language={[5.3]Lua}]
local meta = {
  Author = '',
  Title = '',
  Creator = '',
  Producer = '',
  Keywords = '',
%    \end{macrocode}
% The method \lstinline{meta.extract()} reads the meta data
% from the \lstinline{\jobname.xmp} and stores certain values to be
% accessed by LaTeX. This is used to fill the DocumentInfo when a xmp
% file is available during the expansion of
% \lstinline{\tp@write@pdf@meta} from the coco-title module (see
% Sect.~\ref{sect:coco-title:pdf-meta-data}).
%    \begin{macrocode}[language={[5.3]Lua}]
  extract = function ()
    local xmpfile = ltpdfa.metadata.xmphandler.fromFile(ltpdfa.config.metadata.xmpfile)
    local f = io.open(xmpfile, "r")
    local content = f:read("*all")
    f:close()


    if (content:find('<dc:title>')) then
      Title = content:gsub('.*<dc:title>[^<]*<rdf:Alt>[^<]*<rdf:li[^>]*>(.*)</rdf:li>[^<]*</rdf:Alt>[^<]*</dc:title>.*', "%1")
      -- log(">>>" .. meta.Title)
    end

    local authors
    local author = {}
    if (content:find('<dc:creator>')) then
      authors = content:gsub('.*<dc:creator>[^<]*<rdf:Seq>(.*)</rdf:Seq>[^<]*</dc:creator>.*', "%1")
      for k in string.gmatch(authors, "<rdf:li>([^>]+)</rdf:li>") do
        table.insert(author , k)
      end
      Author = table.concat(author, ', ')
    end
  end
}
%    \end{macrocode}
%
% \subsection{Public Methods}
%
% \lstinline{cocotex} is the base table that contains all public
%   methods and sub-tables available in the {\CoCoTeX}
%   framework. Here, it is defined unless it is already defined
%   elsewhere.
%    \begin{macrocode}[language={[5.3]Lua}]
if type(cocotex) ~= 'table' then
  cocotex = {}
end
%    \end{macrocode}
% \lstinline{cocotex.ally} is a globally available namespace for
%   coco-accessibility specific lua tables.
%    \begin{macrocode}[language={[5.3]Lua}]
cocotex.ally = {
  meta = meta
}
%    \end{macrocode}
%
% After loading \lstinline{coco-accessibility.lua} via the
% \lstinline[language={[5.3]Lua}]{require()} method, a
% \lstinline[language={[5.3]Lua}]{cocotex.ally} table is returned.
%    \begin{macrocode}[language={[5.3]Lua}]
return cocotex.ally
%    \end{macrocode}
% no more lua code.
%    \begin{macrocode}[gobble=1]
%</a11y-lua>
%    \end{macrocode}
