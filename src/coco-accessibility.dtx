% \chapter{coco-accessibility.dtx}
%
% This file provides code for the interaction between the {\CoCoTeX}
% framwork and the \lstinline{ltpfdfa} package.
%
% \textbf{Please consider this module as highly experimental!}
%
% There are two files created from this dtx: one
% \lstinline{coco-accessibility.sty} and one
% \lstinline{coco-accrssibility.lua}.
%
%
% \section{TeX code}
%
%    \begin{macrocode}[gobble=1]
%<*a11y-sty>
%    \end{macrocode}
% File preamble
%    \begin{macrocode}
%%
%% Accessibility features for \textit{xerif} projects.
%%
%% Maintainer: p.schulz@le-tex.de
%%
%% lualatex  -  texlive > 2018
%%
\NeedsTeXFormat{LaTeX2e}[2018/12/01]
\ProvidesPackage{coco-common}
    [\filedate \fileversion CoCoTeX common module]
%    \end{macrocode}
% The \lstinline{ltpdfa} package is a hard requirement for the
% accessibility features of {\CoCoTeX}
%    \begin{macrocode}
\def\tp@if@ally{\expandafter\@firstoftwo}

\RequirePackage[pdftex,pdflang=De,noautotag]{ltpdfa}%,nodetree,dospaces,doparas,,debug
%    \end{macrocode}
% The local setup for \CoCoTeX's accessibility features is done via
% the \lstinline{tpMeta} environment. Therefore, we hook the
% neccessary Components and Properties right into the \lstinline{titlepage}
% container. Therefore, \lstinline{coco-title.sty} is a hard
% requirement for the accessibility module.
%    \begin{macrocode}
\RequirePackage{coco-title}%
%    \end{macrocode}
% The new, accessibility-specific Components and Properties are added
% to the \lstinline{titlepage} container:
%    \begin{macrocode}
\tpAddToType{Components}{titlepage}{\tp@ally@comps}
%    \end{macrocode}
%
% \begin{macro}{\tp@ally@comps} collects Declarations for Components
%   that represent data needed to create output that conforms to the
%   PDF/UA standard.
%    \begin{macrocode}
\def\tp@ally@comps{%
  %% ICC profiles
  \tpDeclareGComp[suppl/cmyk.icc]{IccProfileFile}
  \tpDeclareGComp[4]{IccComponents}
  \tpDeclareGComp[Coated FOGRA39]{IccIdentifier}
}
%    \end{macrocode}
% \end{macro}
% 
% \begin{macro}{\tp@set@ally@conf} passes the accessibility specific
%   parameters that were set via the \lstinline{titlepage} container
%   to the \lstinline{ltpdfa} package.
%    \begin{macrocode}
\def\tp@set@ally@conf{%
  \addToConfig{intent}{profile=\tpUseComp{IccProfileFile};components=\tpUseComp{IccComponents};identifier=\tpUseComp{IccIdentifier}}%
}
%    \end{macrocode}
% the \lstinline{\tp@set@ally@conf} macro is added to the
% \lstinline{document-meta-hook}:
%    \begin{macrocode}
\tpAddToHook[titlepage]{document-meta-hook}{\tp@set@ally@conf}
%    \end{macrocode}
% \end{macro}
% Loading lua modules for meta data processing.
%
% \textbf{Note:} \lstinline{ltpdfhyper.sty} deactivates all
% DocumentInfo processing (l. 367\,ff.), so the mechanism that passes
% the XMP meta data down to \lstinline{\hypersetup} has actually no
% practical effect at the moment.
%    \begin{macrocode}
\directlua{ally = require('coco-accessibility')}
 % \setDocInfo{conformance}{pdfaid=2;level=A;pdfuaid=1}%
%    \end{macrocode}
% \begin{macro}{\tp@title@insert@xmp} override of the same macro in
%   the \lstinline{coco-title}. 
%    \begin{macrocode}
\def\tp@title@insert@xmp{%
  \addToConfig{metadata}{xmpfile=\tpUseGComp{titlepage}{XmpFile}.xmp}%
  \directlua{ally.extract_meta()}%
}

%    \end{macrocode}
% \end{macro}
% transformation of common combined glyphs (e.g. ligatures) into
% distinct unicode characters (cf. \lstinline{texdoc glyphtounicode}):
%    \begin{macrocode}
\protected\def\pdfglyphtounicode{\pdfextension glyphtounicode}
\input glyphtounicode
\edef\pdfgentounicode{\pdfvariable gentounicode}
\pdfgentounicode = 1


%    \end{macrocode}
%
%
% \subsection{ICC profiles}
%
% First, we check if the user has the default icc profiles installed:
%    \begin{macrocode}

\newif\if@tp@use@default@icc\@tp@use@default@iccfalse
\IfFileExists{suppl/cmyk.icc}{\IfFileExists{suppl/srbg.icc}{\@tp@use@default@icctrue}{}}{}

\ifx\tp@icc@profile\@undefined
  \if@tp@use@default@icc
    \addToConfig{intent}{profile=suppl/\tp@color@enc.icc;components=4;identifier=PSO Uncoated ISO12647 (ECI)}
    \addToConfig{intent}{profile=suppl/srgb.icc;components=3;identifier=sRGB IEC61966-2.1}
  \fi
\fi

\AtBeginShipout{\directlua{ltpdfa.pageprocessor(tex.box["AtBeginShipoutBox"])}}%
\addRolemap{document}{Document}
\AtBeginDocument{\structStart{document}}
\AtEndDocument{\structEnd{document}}
%    \end{macrocode}
% End of style source code.
%    \begin{macrocode}[gobble=1]
%</a11y-sty>
%    \end{macrocode}
%
%    \begin{macrocode}[gobble=1]
%<*a11y-lua>
%    \end{macrocode}
%
% \section{Lua code}
%
% \subsection{Local Variables, Tables, and Methods}
%
% \lstinline{ltpdfa} is an instance of the \lstinline{ltpdfa} Lua
%   table.
%    \begin{macrocode}[language={[5.3]Lua}]
local ltpdfa = require('ltpdfa')
%    \end{macrocode}
% \lstinline{meta} is a table that holds the metadata that are
%   extracted from the \lstinline{\jobname.xmp} file.
%    \begin{macrocode}[language={[5.3]Lua}]
local meta = {
  Author = '',
  Title = '',
  Creator = '',
  Producer = '',
  Keywords = ''
}
%    \end{macrocode}
% \lstinline{cocotex.extract_meta()} loads the meta data from the
% \lstinline{\jobname.xmp} and stores certain values to be accessed by
% LaTeX.
%    \begin{macrocode}[language={[5.3]Lua}]
local function extract_meta()
  local xmpfile = ltpdfa.metadata.xmphandler.fromFile(ltpdfa.config.metadata.xmpfile)
  local f = io.open(xmpfile, "r")
  local content = f:read("*all")
  f:close()


  if (content:find('<dc:title>')) then
    meta.Title = content:gsub('.*<dc:title>[^<]*<rdf:Alt>[^<]*<rdf:li[^>]*>(.*)</rdf:li>[^<]*</rdf:Alt>[^<]*</dc:title>.*', "%1")
    -- log(">>>" .. meta.Title)
  end

  local authors
  local author = {}
  if (content:find('<dc:creator>')) then
    authors = content:gsub('.*<dc:creator>[^<]*<rdf:Seq>(.*)</rdf:Seq>[^<]*</dc:creator>.*', "%1")
    for k in string.gmatch(authors, "<rdf:li>([^>]+)</rdf:li>") do
      table.insert(author , k)
    end
    meta.Author = table.concat(author, ', ')
  end
end
%    \end{macrocode}
%
% \subsection{Public Methods}
%
% \lstinline{cocotex} is the base table that contains all public
%   methods and sub-tables available in the {\CoCoTeX}
%   framework. Here, it is defined unless it is already defined
%   elsewhere.
%    \begin{macrocode}[language={[5.3]Lua}]
if type(cocotex) ~= 'table' then
  cocotex = {}
end
%    \end{macrocode}
% \lstinline{cocotex.ally} is a globally available namespace for
%   coco-accessibility specific lua tables.
%    \begin{macrocode}[language={[5.3]Lua}]
cocotex.ally = {}
%    \end{macrocode}
% \lstinline{cocotex.ally.extract-meta} is the globally available method to
%   trigger extraction of meta information from the xmp meta file.
%    \begin{macrocode}[language={[5.3]Lua}]
cocotex.ally.extract_meta = extract_meta
%    \end{macrocode}
% \lstinline{cocotex.ally.meta} is the globally available table that
%   holds the extracted meta data.
%    \begin{macrocode}[language={[5.3]Lua}]
cocotex.ally.meta = meta
%    \end{macrocode}
%
% After loading \lstinline{coco-accessibility.lua} via the
% \lstinline[language={[5.3]Lua}]{require()} method, a
% \lstinline[language={[5.3]Lua}]{cocotex.ally} table is returned.
%    \begin{macrocode}[language={[5.3]Lua}]
return cocotex.ally
%    \end{macrocode}
% no more lua code.
%    \begin{macrocode}[gobble=1]
%</a11y-lua>
%    \end{macrocode}
