%\iffalse
%<*driver>
\ProvidesFile{transpect.dtx}
%</driver>
%<package>\NeedsTeXFormat{LaTeX2e}[2019/01/01]
%<package>\ProvidesClass{transpect}
%<*package>
    [\filedate\space\fileversion\space transpect]
%</package>
%<*driver>
\RequirePackage{scrlfile}
\ReplaceClass{article}{book}
\BeforePackage{doc}{\let\oldmaketitle\maketitle}
\documentclass[a4paper]{ltxdoc}
  \frenchspacing
  \parindent0pt
  \parskip\medskipamount
  \makeatletter
  \def\@listi{\leftmargin\leftmargini
              \parsep\z@
              \topsep\z@
              \itemsep\z@}
  \let\@listI\@listi
  \@listi
  \def\@listii{\leftmargin\leftmarginii
              \labelwidth\leftmarginii
              \advance\labelwidth-\labelsep
              \parsep\z@
              \topsep\z@
              \itemsep\z@}
  \makeatother
  \emergencystretch1em
  \clubpenalty10000
  \widowpenalty10000
  \def\hack#1{#1}
  \RequirePackage[T1]{fontenc}
  \RequirePackage[utf8]{inputenc}
  \RequirePackage{color}
  \RequirePackage{graphicx}
  \RequirePackage{lmodern}
  \RequirePackage{courier}
  \RequirePackage[breaklinks,pdfborder={0 0 0}]{hyperref}
  \OnlyDescription
\usepackage{listings}
\usepackage{xcolor}
\definecolor{spot}{cmyk}{0,0.82,0.59,0.18}
\lstdefinestyle{macrocode}{%
  name=macrocode,
  language=[LaTeX]TeX,
  literate={%
    {Ö}{{\"O}}1
    {Ä}{{\"A}}1
    {Ü}{{\"U}}1
    {ß}{{\ss}}1
    {ü}{{\"u}}1
    {ä}{{\"a}}1
    {ö}{{\"o}}1
    {«}{{\guillemotright}}1
    {»}{{\guillemotleft}}1
    {~}{{\textasciitilde}}1},
  inputencoding=utf8,
  basicstyle={\ttfamily\small},
  columns=fullflexible,
  numbers=none,
  % firstnumber=auto,
  % numberstyle=\scriptsize,
  % numbersep=5pt,
  backgroundcolor=\color{spot!10}, % choose the background color; you must add \usepackage{color} or \usepackage{xcolor}
  %basicstyle=\scriptsize,          % the size of the fonts that are used for the code
  breakatwhitespace=false,           % sets if automatic breaks should only happen at whitespace
  breaklines=true,                   % sets automatic line breaking
  captionpos=t,                      % sets the caption-position
  commentstyle={\color{spot!80}\itshape},      % comment style
  extendedchars=true,                % lets you use non-ASCII characters; for 8-bits encodings only, does not work with UTF-8
  frame=single,                      % adds a frame around the code
  keepspaces=false,                   % keeps spaces in text, useful for keeping indentation of code (possibly needs columns=flexible)
  keywordstyle={\color{spot}\bfseries},          % keyword style
  rulecolor=\color{gray!70},         % if not set, the frame-color may be changed on line-breaks within not-black text (e.g. comments (green here))
  showspaces=false,                  % show spaces everywhere adding particular underscores; it overrides 'showstringspaces'
  showstringspaces=true,             % underline spaces within strings only
  showtabs=true,                     % show tabs within strings adding particular underscores
  stringstyle={\color{spot!80}},     % string literal style
  tabsize=2,                         % sets default tabsize to 2 spaces
}
\lstdefinestyle{docstrip}{%
  style=macrocode,
  basicstyle=\sffamily\small,
  literate=<{$\langle$}1>{$\rangle$}1,
}

\let\macrocode\relax
\lstnewenvironment{macrocode}[1][]{%
  \lstset{style=macrocode,#1}%
}{}

\begin{document}
  \DocInput{transpect.dtx}
\end{document}
%</driver>
%\fi
%
% \CheckSum{8353}
% \CharacterTable
%    {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%     Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%     Digits        \0\1\2\3\4\5\6\7\8\9
%     Exclamation   \!     Double quote  \"     Hash (number) \#
%     Dollar        \$     Percent       \%     Ampersand     \&
%     Acute accent  \'     Left paren    \(     Right paren   \)
%     Asterisk      \*     Plus          \+     Comma         \,
%     Minus         \-     Point         \.     Solidus       \/
%     Colon         \:     Semicolon     \;     Less than     \<
%     Equals        \=     Greater than  \>     Question mark \?
%     Commercial at \@     Left bracket  \[     Backslash     \\
%     Right bracket \]     Circumflex    \^     Underscore    \_
%     Grave accent  \`     Left brace    \{     Vertical bar  \|
%     Right brace   \}     Tilde         \~}
%
% \GetFileInfo{transpect.dtx}
%
% \title{The \filename\space Package\,\thanks{This package was
% created by le-tex publishing services,
% Leipzig.\hfil\break\hspace*{1.8em}This file has version
% \fileversion.}}%
% \author{Lupino}%
% \date{\filedate}%
% \let\maketitle\oldmaketitle
% \maketitle
% \tableofcontents
%
% \clearpage
%
% \chapter*{Introduction}
%
% \section*{Loading order and contents of transpect.cls}
%
% \begin{enumerate}
% \item load base cls (article or book)
% \item load transpect specific cls
% \item load transpect-modules and their dependencies
%   \begin{enumerate}
%   \item transpect-scripts, iff option \lstinline{usescript} is used, standalone \lstinline{babel} otherwise
%   \item transpect-common\footnote{is a hard dependency in both the headings- and floats modules and required immediately after each the module's option processing.}
%   \item transpect-headings
%   \item transpect-floats
%   \item transpect-title
%   \item transpect-endnotes
%   \end{enumerate}
% \item load packages index and hyperref
% \item load publisher specific styles
% \end{enumerate}
%
% \section*{Flow of macro definitions and their expansions in modules that use the Property and Component mechanism}
%
% Modules, that utilize the Property and Component mechanisms, define
% a \textit{Declare macro}. This Declare macro is basicly a
% constructor for a new \LaTeX\ environment which should share some
% common \textit{Properties} and \textit{Components} with other
% environments that are defined with the same Declare macro. Modules,
% therefore, constitute what in other programming languages may be
% referred to as \textit{Namespaces}.
%
% The purpose of the Declare macro is
% \begin{enumerate}
% \item to define a \LaTeX\ environment to be used in tex documents,
% \item to define the Component macros available and allowed within that environment
% \item to define the available Properties used to determine the appearance of the environment's content in the final render.
% \item to define the processing of the information specific to each instance of the environment.
% \end{enumerate}
%
% Within the body of the Declare macro's definition, a Use macro is
% defined which determines the Namespace-specific processing of an
% environment's contents. This macro is (usually) expanded at the
% \lstinline{\end} of the declared environment. The Use macro is where
% the actual processing of an environment's contents takes
% place. Since it is part of the body of the Declare macro, each
% environment declared with this Declare macro defines it's own Use
% macro.
%
% The Declare macro usually has at least two arguments: one argument
% to give a \textit{name} to the soon-to-be-defined environment, and a
% second one to define the Properties \textit{specific} to that
% environment \textit{on top of} the Namespace's default
% Properties. Some environments may also have a Parent which causes
% Properties cascade across different inter-dependend environments.
%
% Within the tex-document, whenever an environment is used, the flow
% is as follows:
% \begin{enumerate}
% \item \textit{store} the contents of all Components used within the
%   environment in internal, locally defined, tex macros
% \item expand the property lists:
%   \begin{enumerate}
%   \item expand the Default Properties of the Namespace
%   \item If necessary, expand the specific Properties of the parent
%     environment (overwriting the default properties of the same name). This step may
%     occur recursively for each of the parent's own parents.
%   \item expand the Specific Properties of the Environment itself.
%   \end{enumerate}
% \item Expand the Use-Macro
%   \begin{itemize}
%   \item Process the components, depending on contents, presence, or
%     absence of Components alter other Componentsor trigger property
%     manipulatons, etc.
%   \item Calculate the final states of variable properties (in
%     dependency on the available components, other properties or
%     global parameters)
%   \item Print the overall result of those calculations.
%   \end{itemize}
% \end{enumerate}
%
