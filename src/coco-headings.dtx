% \chapter{coco-headings.dtx}\DescriptionDomain{Heading}
%
%    \begin{macrocode}[numbers=none,gobble=1]
%<*headings>
%    \end{macrocode}
%
% This module provides handlers for headings like parts, chapters,
% sections, or inline headings common to all CoCoTeX projects.
%
%    \begin{macrocode}
%%
%% module for CoCoTeX that extends heading objects.
%%
%% Maintainer: p.schulz@le-tex.de
%%
\NeedsTeXFormat{LaTeX2e}[2020/06/01]
\ProvidesPackage{coco-headings}
    [\filedate \fileversion CoCoTeX headings module]
\RequirePackage{coco-meta}
%    \end{macrocode}
%
% Headings are handled differently with \lstinline{cocotex.cls}
% compared to standard \LaTeX, since cocotex manuscripts tend to
% have a whole collection of additional information that are pressed
% into the headings, like subtitles or section authors down to
% subsection level, etc. Therefore, the \lstinline{\@startsection} and
% \lstinline{\@make[s]chapterhead} facilities from {\LaTeX} are no longer
% sufficient. At the same time, the package does not redefine those
% macros and keeps them available for backwards compatibility.
%
% First, we load the \lstinline{bookmark} package:
%    \begin{macrocode}
\RequirePackage{bookmark}%
%    \end{macrocode}
% Since we use our own heading levels, we disable all automatically generated bookmarks.
%    \begin{macrocode}
\hypersetup{bookmarksdepth=-999}%
%    \end{macrocode}
%
% \section{Facility for declaring heading levels and their layouts}%
%
% \DescribeContainer{Heading} is an abstract parent Container for
% headings. It inherits from \UsageContainer{CommonMeta}.
%    \begin{macrocode}
\ccDeclareContainer{Heading}{%
  \ccInherit{Components,Properties}{CommonMeta}%
  \ccDeclareType{Parent}{}%
  \ccDeclareType{Components}{%
%    \end{macrocode}
% We already have the \UsageComponent{Author} Component
% inherited from the \UsageContainer{CommonMeta}
% Container. We therefore just need to declare the overrides.
%    \begin{macrocode}
    \cch@provide@authors%
%    \end{macrocode}
% The remaining Components are built as usual.
%
% \begin{Component}{Title}\AlsoOverride{TocTitle}\AlsoOverride{BMTitle}\AlsoOverride{RunTitle} is the main title of the heading.
%    \begin{macrocode}
    \cch@provide@comp{Title}%
%    \end{macrocode}
% \end{Component}
% \begin{Component}{Subtitle}\AlsoOverride{TocSubtitle}\AlsoOverride{BMSubtitle}\AlsoOverride{RunSubtitle} is an optional second-level title of
%   the heading.
%    \begin{macrocode}
    \cch@provide@comp{Subtitle}%
%    \end{macrocode}
% \end{Component}
% \begin{Component}{Number}\AlsoOverride{TocNumber}\AlsoOverride{BMNumber}\AlsoOverride{RunNumber}
%   is the heading's counter.
%    \begin{macrocode}
    \cch@provide@comp{Number}%
%    \end{macrocode}
% \end{Component}
% \begin{Component}{RefLabel} is a unique ID of an heading. It is
%   targeted by cross references and replaces \LaTeX's
%   \lstinline{\label} command.
%    \begin{macrocode}
    \ccDeclareComponent{RefLabel}{}{}%
%    \end{macrocode}
% \end{Component}
%    \begin{macrocode}
    \cch@provide@quotes
  }%
  \ccDeclareType{Attributes}{%
%    \end{macrocode}
% \begin{Attribute}{class}{<string>} is the style class of the heading.
%    \begin{macrocode}
    \ccDeclareAttributeHandler{class}{%
      \let\cch@current@class\ccAttrVal
      \expandafter\ccUseStyleClass\expandafter{\ccAttrVal}{Heading}%
    }%
%    \end{macrocode}
% \end{Attribute}
% \begin{Attribute}{notag}{} is a flag that if set tags the entire
%   heading and its Components as Artifacts. Content after the heading
%   is \textit{not} tagged as its own \UsageTag{Sect}, but belongs to
%   the \Usagetag{Sect} of the last, non-flagged, heading.
%    \begin{macrocode}
    \ccDeclareAttributeHandler*{notag}{%
      \let\ccaEnable\relax
      \let\ccaProtect\ccaDisable
      \global\let\cch@notag\relax
      \global\advance\cch@total@nesting@level\m@ne\relax
      \ccaArtifact\ccaDisable
    }%
%    \end{macrocode}
% \end{Attribute}
%    \begin{macrocode}
  }
  \ccDeclareType{Properties}{}%
  \ccDeclareEnv{\cch@heading}{\cch@end@heading}%
}
%    \end{macrocode}
%
% \begin{macro}{\ccDeclareHeading} is the user-level macro to declare
%   new headings. There also exists a \textit{starred} version of this
%   macro, which exempts the declared heading from auto-tagging.
% \begin{description}[2em]
% \item[\#1] (optional) inherit-from: load all properties from that heading level, first.
% \item[\#2] level: used for toc entries. -1 for part, 0 for chapter, 1 for section, etc.
% \item[\#3] name: part, chapter, section, etc, to be used in toc, head lines, bookmarks, etc.
% \item[\#4] Property definitions and switches
% \end{description}
%    \begin{macrocode}
\long\def\ccDeclareHeading{\global\let\cch@star@hdg\@undefined\@ifstar{\global\let\cch@star@hdg\relax\cc@declare@heading}{\cc@declare@heading}}
\long\def\cc@declare@heading{\cc@opt@empty\@cc@declare@heading}
\long\def\@cc@declare@heading[#1]#2#3#4{%
%    \end{macrocode}
% First, we check if the heading has already been declared.
%    \begin{macrocode}
  \ifcsdef{cc@container@#3}{%
%    \end{macrocode}
% If yes, then we check if the new declaration's parameters match with
% the pre-existing one. We start with the heading level.
%    \begin{macrocode}
    \ccPackageInfo{Headings}{}{Appending to `#3'}%
    \ifcsstring{cch@#3@level}{#2}{}{%
        \ccPackageError{Headings}
          {Level Mismatch}
          {Level of heading `#3' cannot be altered!}
          {The already existing heading `#3' has toc level `\csname cch@#3@level\endcsname', but your^^J%
           re-declaration states `#2'.^^J%
           ^^J%
           Consider declaring a new heading alltogether with `#3' as parent,^^J%
           or add Properties to `#3' using \string\ccAddToType\string{Properties\string}\string{#3\string}.}%
       }%
%    \end{macrocode}
% we also check the parent.
%    \begin{macrocode}
    \if!#1!\else
      \ifcsstring{cc@parent@#3}{#1}{}{%
        \ccPackageError{Headings}
          {Parent Mismatch}
          {Parent of heading `#3'^^J cannot be altered!}
          {The already existing heading `#3' inherits from `\csname cc@parent@#3\endcsname',^^J%
           but your re-declaration sets Parent to `#1'.^^J%
           ^^J%
           Consider declaring a new heading alltogether with `#1' as parent.}%
      }%
    \fi
%    \end{macrocode}
% and finally pass the new Properties to the existing heading.
%    \begin{macrocode}
    \ccAddToType{Properties}{#3}{#4}%
%    \end{macrocode}
% Finally, we need to re-define the \UsageMacro{\ccUseHeading} macro so
% that changes to the heading's Property list will be taken into
% account for all dependend constructions like list-ofs and
% toc-entries.
%    \begin{macrocode}
    \cch@declare@heading{#2}{#3}%
  }{% ifcsdef cc@container@#3 else
%    \end{macrocode}
% If the heading does not already exist, we build a new one.
%
% Each new heading constitutes its own Sub-Container of the heading
% Container. The name of this Sub-Container is the headings name.
%    \begin{macrocode}
    \ccDeclareContainer{#3}{%
%    \end{macrocode}
% 
% \begin{macro}{\cch@3@level} stores the numeric heading level for the heading
%    \begin{macrocode}
      \csgdef{cch@#3@level}{#2}%
%    \end{macrocode}
% \end{macro}
% 
%    \begin{macrocode}
      \ccPackageInfo{Headings}{}{Declaring heading `#3'}%
      \edef\@argi{#1}%
      \ccDeclareType{Parent}{\cch@create@parent{#1}{#3}}
%    \end{macrocode}
% We inherit everything from the heading levels parent, or from the
% default heading if no parent is present.
%    \begin{macrocode}
      \ifx\@argi\@empty
        \ccInherit{Components,Properties}{Heading}%
      \else
        \ccInherit{Components,Properties,Parent}{#1}%
      \fi
%    \end{macrocode}
% The main body of the heading Declaration is a list of Property
% definitions which we append to the Sub-Container's ``Property''
% Type.
%    \begin{macrocode}
      \ccDeclareType{Properties}{%
        #4%
      }%
%    \end{macrocode}
% For each heading we declare some common macros like the ToC entry
% handlers, the heading's counters and its hooks.
%    \begin{macrocode}
      \ccDeclareType{Init}{%
        \cch@init@hooks{#3}%
        \let\@cch@cur@cont\cc@cur@cont
        \def\cc@cur@cont{Heading}%
        \cc@init@l@{toc}{#2}{#3}%
        \let\cc@cur@cont\@cch@cur@cont
        \cch@init@cnt{#3}%
      }%
%    \end{macrocode}
% Unlike other Sub-Containers, headings form no own {\LaTeX}
% environment.  Instead, headings are specifications of one common
% \lstinline{\ccPrefix Heading} environment. Is is outsourced into the internal
% \UsageMacro{\cch@declare@heading} macro, which is defined below.
%
% The reason for that is that we don't want to define versions of the
% same property macros for each and every single heading
% level. Instead, we locally re-define the general low-level macros
% that represent the heading's properties for each instance of the
% generalised \lstinline{Heading} container.
%    \begin{macrocode}
      \cch@declare@heading{#2}{#3}%
    }% \ccDeclareContainer{#3}
    \ccWhenAlly{\ccaAddRolemap{#3}{Sect}}%
  }% \ifcsdef cc@container@#3 fi
}% \cc@declare@heading
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\cch@create@parent} stores the heading level's name and its
%   parent, if it exists.
%    \begin{macrocode}
\def\cch@create@parent#1#2{%
  \def\ccCurSecName{#2}%
  \if!#1!\else
    \ccCheckParent{#1}{#2}%
  \fi%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\cch@declare@heading} consists of two parts: In the
%   first part, the inheritance mechanism and the initializers for
%   each new heading level are triggered.
%
%   \#1 is the numeric heading level, \#2 is the name of the heading.
%    \begin{macrocode}
\def\cch@declare@heading#1#2{%
  \ccEvalType{Parent}%
  \ccEvalType{Init}%
%    \end{macrocode}
%
% \begin{macro}{\ccUseHeading} is defined as second step. It is called
%   at the end of each \lstinline{\ccPrefix Heading} environment to process the
%   Components within the Container instance. Each heading level has
%   its own ``version'' of this macro.
%    \begin{macrocode}
  \csgdef{ccUseHeading#2}{%
%    \end{macrocode}
% Since heading levels don't define their own environments, we make
% sure that \lstinline{Heading} is the namespace we are working in.
%    \begin{macrocode}
    \ccSetContainer{Heading}%
    \@setpar{\@@par}%
%    \end{macrocode}
% Properties are stored in macros specific to the current heading
% Sub-Container, therefore we evaluate the level's Properties, not
% those of the \lstinline{Heading} Container. However, since we made
% use of the inheritance mechanism earlier, each Sub-Container's
% Property list also contains the general \lstinline{Heading} Property
% list.
%    \begin{macrocode}
    \def\cchLevel{#1}%
    \ccEvalType[#2]{Properties}%
%    \end{macrocode}
% Processing the author name list (from coco-meta.sty).
%    \begin{macrocode}
    \ccm@role@eval{Author}%
    \ccComposeCollection{Author}{author-contact-block-format}{AuthorContactBlock}%
    \ccComposeCollection{Affil}{affil-block-item-format}{AffilBlock}%
%    \end{macrocode}
% Processing the \lstinline{Quote} Group Container, if any.
%    \begin{macrocode}
    \ccComposeCollection{Quote}{quote-block-format}{QuoteBlock}%
%    \end{macrocode}
% Hyperref related stuff.
%    \begin{macrocode}
    \def\Hy@toclevel{#1}%
%    \end{macrocode}
% Call the mechanism to calculate the heading's counter.
%    \begin{macrocode}
    \cch@auto@number{#1}{#2}%
%    \end{macrocode}
% Here, the actual construction of the heading begins.
%    \begin{macrocode}
    \ccUseProperty{heading-par}%
    \cch@use@hook{before}{#2}%
    \ccUseProperty{before-heading}%
%    \end{macrocode}
% Add vertical space before the heading
%    \begin{macrocode}
    \cch@add@before@skip
%    \end{macrocode}
% The counters we calculated earlier and the space needed to render
% them are evaluated
%    \begin{macrocode}
    \cc@format@number{}{}{#1}%
%    \end{macrocode}
% The value of after-skip is essential to determine whether the
% heading is to be displayed as block or inline element. In case, some
% heading definition omits setting a proper value, we build a
% fallback.
%    \begin{macrocode}
    \ccIfProp{after-skip}{\expandafter\global\expandafter\@tempskipa\expandafter=\ccUseProperty{after-skip}\relax}{\global\@tempskipa=1sp\relax}%
%    \end{macrocode}
% 
%    \begin{macrocode}
    \cch@use@hook{print/before}{#2}%
    \def\@svsec{%
%    \end{macrocode}
% The \lstinline{heading block} is the composition of all of the
% heading's Components that are to be printed where the
% \lstinline{heading} environment is in the source.
%    \begin{macrocode}
      \ccUseProperty{before-heading-block}%
%    \end{macrocode}
% Labels to be used with LaTeX's cross reference mechanism are defined
%    \begin{macrocode}
      \ccCreateLabel{#2}% label facility
      \leftskip\ccUseProperty{margin-left}%
      \rightskip\ccUseProperty{margin-right}%
      \bgroup
%    \end{macrocode}
% If Accessibility features are active, we add the start Tag for
% \DescribeTagS{SectMeta} that contains all meta data belonging to the
% heading (i.e. all heading Components sans the title, which is made
% into the head of the section). We immediately retrieve the Tag's ID
% since we will move it, later.
%    \begin{macrocode}
        \ccWhenAlly{%
          \ccaStructStart{SectMeta}%
          \ccaSaveCurStruct{cch@id@cur@meta}%
        }%
        \ccUseProperty{heading-block}%
%    \end{macrocode}
% Generate entries for ToC, bookmarks and page headers. This has to be
% here because in rare cases, abstracts could cause the whole heading
% to spread over more than one page and that results in the ToC entry
% pointing to the last page.
%
% \textbf{Style progammers need to make sure that no page breaks are
% allowed within the \lstinline{heading-block}!}
%    \begin{macrocode}
        \ccIfPropVal{no-toc}{true}{}{\cch@make@toc}% ToC entries
        \ccIfPropVal{no-BM}{true}{}{\cch@make@bookmarks}% Bookmarks
        \ccUseProperty{toc-hook}%
        \ccIfProp{extended}{\ccUseProperty{extended-heading}}{}%
%    \end{macrocode}
% Here, we end the \UsageTagE{SectMeta} tag.
%    \begin{macrocode}
        \ccWhenAlly{\ccaStructEnd{SectMeta}}%
      \egroup%
      \cch@make@run% Running headers
      \cch@use@hook{run/after}{#2}%
      \ccUseProperty{after-heading-block}%
      \cch@use@hook{after}{#2}%
    }%
%    \end{macrocode}
% Finally, we decide whether the printable material we stored in
% \lstinline{\@svsec} is to be rendered as a block or inline. This is
% adopted from \LaTeX's \lstinline{\@startsection}. The distinction is
% made by the sign of \lstinline{after-skip}: a positive value yields
% a block heading, a negative value yields an inline heading.
%    \begin{macrocode}
    \ifdim\@tempskipa <\z@\relax
      \cch@make@inline%
    \else
      \cch@make@block%
    \fi
%    \end{macrocode}
% This macro is called at the end of the heading environment. In order
% to deal with possible vertical spaces after the heading, we wait
% until the group of the heading environemnt is closed before we
% actually print the fully composed heading. The definition of
% \lstinline{\next} happens in either \lstinline{\cch@make@inline}
% or \lstinline{\cch@make@block}.
%    \begin{macrocode}
    \aftergroup\next%
  }%
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\cch@use@hook} recursively includes a hook \#1 from the heading \#2's parent before expanding its own version.
%    \begin{macrocode}
\def\cch@use@hook#1#2{%
  \expandafter\ifx\csname cc@parent@#2\endcsname\relax\else
    \letcs\@cch@parent{cc@parent@#2}%
    \cch@use@hook{#1}{\csname cc@parent@#2\endcsname}%
  \fi
  \UseHook{cc/headings/#2/#1}%
  \ignorespaces}
%    \end{macrocode}
% \end{macro}
% 
% \begin{macro}{\cch@add@before@skip} is a routine that determins the skip that is inserted before a heading.
%    \begin{macrocode}
\def\cch@add@before@skip{%
  \setlength\@tempskipa{\ccUseProperty{before-skip}}%
  \ifdim\@tempskipa<\z@\relax
    \def\do@skip{\minusvspace{-\@tempskipa}}%
  \else
    \def\do@skip{\addvspace{\@tempskipa}}%
  \fi%
  \if@nobreak
    \everypar{}%
    \do@skip
  \else
    \addpenalty\@secpenalty
    \do@skip
  \fi}
%    \end{macrocode}
% \end{macro}
%
% \subsection{Initializers for New Heading Levels}%
%
% \begin{macro}{\cch@init@hooks} initializes the Hooks for heading
%   level \#1.
%    \begin{macrocode}
\def\cch@init@hooks#1{%
%    \end{macrocode}
% \DescribeHook{cc/headings/[level]/toc/before} is exanded before the
% ToC entry is printed
%    \begin{macrocode}
  \NewHook{cc/headings/#1/toc/before}%
%    \end{macrocode}
% \DescribeHook{cc/headings/[level]/toc/after} is exanded after the
% ToC entry is printed
%    \begin{macrocode}
  \NewHook{cc/headings/#1/toc/after}%
%    \end{macrocode}
% \DescribeHook{cc/headings/[level]/before} is expanded before the
% before-heading property called
%    \begin{macrocode}
  \NewHook{cc/headings/#1/before}%
%    \end{macrocode}
% \DescribeHook{cc/headings/[level]/after} is expanded after the
% \lstinline{after-heading-block} property was called.
%    \begin{macrocode}
  \NewHook{cc/headings/#1/after}%
%    \end{macrocode}
% \DescribeHook{cc/headings/[level]/print/before} is expanded just
% before \lstinline{\@svsec} is locally defined.
%    \begin{macrocode}
  \NewHook{cc/headings/#1/print/before}%
%    \end{macrocode}
% \DescribeHook{cc/headings/[level]/run/after} is expanded after the
% local \lstinline{RunTitle} has been generated
%    \begin{macrocode}
  \NewHook{cc/headings/#1/run/after}%
%    \end{macrocode}
% \DescribeHook{env/Heading/[level]/begin} is the hook that is called
% at the begin of each defined heading level with the name
% \lstinline{[name]}. It is called at the beginning of every
% \lstinline{Heading} environment whose mandatory argument matches
% \lstinline{[name]} immediately before the Instance's Attributes are
% evaluated.
%    \begin{macrocode}
  \NewHook{env/\ccPrefix Heading/#1/begin}%
%    \end{macrocode}
% If the current heading is derived from a parent, we want the
% parent's hooks to also apply to the child:
%    \begin{macrocode}
  \ifcsname cc@parent@#1\endcsname
    \AddToHook{env/\ccPrefix Heading/#1/begin}{\UseHook{env/\ccPrefix Heading/\csname cc@parent@#1\endcsname/begin}}%
  \fi
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\cch@init@cnt} initialises a counter with the name \#1
%   for automatic numbering if it doesn't exist, yet.
%    \begin{macrocode}
\def\cch@init@cnt#1{\ifcsname c@#1\endcsname\else\@definecounter{#1}\fi}
%    \end{macrocode}
% \end{macro}
% \subsection{Initializers for Instances of Heading Levels}%
%
% \begin{macro}{\cch@auto@number}
%   advances the heading counter if the \lstinline{numbering} Property
%   is set to \texttt{auto} and the current heading is not overridden
%   by the \lstinline{Number} Component.  \#1 is the numeric level of
%   the heading, \#2 is the name of the heading's counter.
%    \begin{macrocode}
\def\cch@auto@number#1#2{%
  \ccIfPropVal{numbering}{auto}
    {\expandafter\ifx\csname c@#2\endcsname\relax\cch@init@cnt{#2}\fi
     \ccIfAttrIsSet{Heading}{nonumber}{}
       {\ccIfComp{Number}
         {}
         {\ifnum #1>\c@secnumdepth\relax\else
            \stepcounter{#2}%
            \edef\@tempa{\csname the#2\endcsname}%
            \ccComponentEA{Number}{\@tempa}%
          \fi}}
     }{}}
%    \end{macrocode}
% \end{macro}
%
% \section{Externalisation of Heading Compoents}
%
% Components of headings may be used far away from the heading
% itself. Since, by design, Components are defined strictly local
% within their containers, those externale usages demand special
% treatment.
%
% \subsection{Common Stuff}
%
% \begin{macro}{\cch@set@author@name@list} sets the
%   \lstinline{#1AuthorNameList} Component.
%    \begin{macrocode}
\def\cch@set@author@name@list#1{%
%    \end{macrocode}
% first, we look if the Override was given in the \lstinline{Heading}
% Container. If so, we do nothing.
%    \begin{macrocode}
  \ccUnlessComp{#1AuthorNameList}{%
%    \end{macrocode}
% If not, we look whether or not the general
% \lstinline{AuthorNameList} override was given in the \lstinline{Heading}
% Container.
%    \begin{macrocode}
    \ifx\cc@used@AuthorNameList@override\@empty
%    \end{macrocode}
% If yes, then we copy its value to \lstinline{#1AuthorNameList}.
%    \begin{macrocode}
      \ccComponent{#1AuthorNameList}{\cc@Heading@AuthorNameList}%
    \else
%    \end{macrocode}
% Or else, we re-build the \lstinline{#1AuthorNameList} from the raw
% \lstinline{Author} Subcontainers by using the
% \lstinline{author-list-print-format} Property.
%    \begin{macrocode}
      \ifnum\ccAuthorCnt>\z@
        \ccdefFromCountedComp\cch@tempa{Author}{author-list-print-format}%
        \ifx\cch@tempa\relax\else
          \ccComponent{#1AuthorNameList}{\cch@tempa}%
        \fi
      \fi
    \fi
  }}%
%    \end{macrocode}
% \end{macro}
%
% \subsection{Table of Contents Entry}
%
% \begin{macro}{\cch@make@toc} initializes the creation of a
%   \lstinline{Heading} instance's entry in the table of contents.
%
%   Each entry is in itself treated as a Container. As such, it
%   consists of Components that are written into the .toc file.
%    \begin{macrocode}
\def\cch@make@toc{%
  \cc@check@empty{Heading}{Title}{Toc}%
  \cc@check@empty{Heading}{Number}{Toc}%
  \cc@check@empty{Heading}{Subtitle}{Toc}%
  \cch@set@author@name@list{Toc}%
  \ccIfAttrIsSet{Heading}{notoc}{}
    {\protected@edef\cch@toc@entry{%
       \ccIfComp{TocTitle}{\string\ccComponent{TocTitle}{\string\ignorespaces\space\expandonce{\cc@Heading@TocTitle}}}{}%
       \ccIfComp{TocNumber}{\string\ccComponent{TocNumber}{\string\ignorespaces\space\expandonce{\cc@Heading@TocNumber}}}{}%
       \ccIfComp{TocAuthorNameList}{\string\ccComponent{TocAuthorNameList}{\string\ignorespaces\space\expandonce{\cc@Heading@TocAuthorNameList}}}{}%
       \ccIfComp{TocSubtitle}{\string\ccComponent{TocSubtitle}{\string\ignorespaces\space\expandonce{\cc@Heading@TocSubtitle}}}{}%
     }%
     \ccIfProp{toc-level}
       {\edef\cch@toc@sec@name{\ccUseProperty{toc-level}}}
       {\let\cch@toc@sec@name\ccCurSecName}%
     \protected@write\@auxout
       {\ccGobble\ccaProtect}%
       {\string\@writefile{toc}{\protect\ccContentsline{\cch@toc@sec@name}{\cch@toc@entry}{\thepage}{\@currentHref}\protected@file@percent}}\relax
     \ccCreateContentListEntries{Heading}{\cch@toc@sec@name}{\cch@toc@entry}{\thepage}{\@currentHref}%
     \ccCreateContentListEntries{\cch@toc@sec@name}{\cch@toc@sec@name}{\cch@toc@entry}{\thepage}{\@currentHref}%
     \protected@write\@auxout{\ccaEnable}{}%
   }}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\cc@toc@extract@data} is called within
%   the \lstinline{\l@<level>} macro to extract the Components for
%   each entry in the .toc file. \#1 is the numerical heading level,
%   \#2 is the name of the heading level, \#3 is the content of the
%   toc entry (which holds the Components), \#4 is the page number.
%    \begin{macrocode}
\def\cc@toc@extract@data#1#2#3#4{%
  \ccSetContainer{Heading}%
  \ccEvalType[#2]{Properties}%
  \ccDeclareComponent{TocPage}{}{}%
  \ccComponent{TocPage}{\ccUseProperty{toc-page-face}#4}%
  \ccDeclareComponent{TocTitle}{}{}%
  \ccDeclareComponent{TocSubtitle}{}{}%
  \ccDeclareComponent{TocNumber}{}{}%
  \ccDeclareComponent{TocAuthorNameList}{}{}%
  \cc@expand@l@contents{#3}{Heading}{Toc}{Title}%%
  \cc@format@number{toc-}{Toc}{#1}%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\cc@toc@print@entry} is also called within the
%   \lstinline{\l@<level>} macro and eventually prints the entry by
%   expanding a \lstinline{Heading}'s toc-specific Properties.
%    \begin{macrocode}
\def\cc@toc@print@entry#1{%
  \bgroup
    \cch@use@hook{toc/before}{#1}%
    \ccUseProperty{toc-before-entry}%
    \ccUseProperty{toc-format}%
    \cch@use@hook{toc/after}{#1}%
    \ccUseProperty{toc-after-entry}%
  \egroup}
%    \end{macrocode}
% \end{macro}
%
%\subsection{Facility to create the running title macros}
%
% \begin{macro}{\cch@make@run}
%   prepares the Components used to compose the running titles. It
%   checks if the user provides page header specific overrides in the
%   \lstinline{Heading} instance. If not, it uses the non-specific
%   Components instead, as long as they are not empty.
%
%   After all the header-specific Components are set, the heading
%   level specific property \lstinline{running-heading} is evaluated
%   and passed to the corresponding \lstinline{\<level>mark} macros
%   iff they exist.
%    \begin{macrocode}
\def\cch@make@run{%
  \cc@check@empty{Heading}{Title}{Run}%
  \cc@check@empty{Heading}{Number}{Run}%
  \cc@check@empty{Heading}{Subtitle}{Run}%
  \cch@set@author@name@list{Run}%
  \ccUseProperty{running-extra}%
  \ccIfProp{running-level}
    {\letcs\cch@mark@name{\ccUseProperty{running-level}mark}}
    {\letcs\cch@mark@name{\ccCurSecName mark}}%
    \letcs\cch@parent{cc@parent@\ccCurSecName}%
    \ifx\cch@mark@name\@undefined
      \ifx\cch@parent\relax\else
        \letcs\cch@mark@name{\cch@parent mark}%
      \fi
    \fi
  \ifx\cch@mark@name\@undefined\else
    \begingroup
      \ccGobble
      \protected@edef\@tempa{\csname cc@Heading@running-heading\endcsname}%
      \expandafter\cch@mark@name\expandafter{\@tempa}%
    \endgroup
  \fi
}
%    \end{macrocode}
% \end{macro}
%
% \subsection{Facility to create PDF bookmarks}
%
% \begin{macro}{\cch@make@bookmarks} generates an entry that is
%   directly written as Bookmark into the PDF file. This is done using
%   the \lstinline{bookmark} package.
%    \begin{macrocode}
\def\cch@make@bookmarks{%
  \cc@check@empty[Toc]{Heading}{Title}{BM}%
  \cc@check@empty[Toc]{Heading}{Number}{BM}%
  \cc@check@empty[Toc]{Heading}{AuthorNameList}{BM}%
  \cc@check@empty[Toc]{Heading}{Subtitle}{BM}%
  \ccIfAttrIsSet{Heading}{noBM}{}
    {\ccIfProp{bookmark-level}{\edef\Hy@toclevel{\ccUseProperty{bookmark-level}}}{}%
     \begingroup
       \ccGobble
       \protected@edef\@tempa{\csname cc@Heading@bookmark\endcsname}%
       \bookmark[level=\Hy@toclevel,dest=\@currentHref]{\expandonce{\@tempa}}%
     \endgroup
   }}
%    \end{macrocode}
% \end{macro}
%
%\section{Rendering the Headings}
%
%\subsection{Inline Headings}
%
% \begin{macro}{\cch@make@inline}
%   Inline headings are stored in a temporary box and expanded after
%   the next (non-heading) paragraph is opened.
%
%    \begin{macrocode}
\newbox\cch@inline@sec@box
\def\cch@make@inline{%
  \ccIfProp{after-indent}{\global\@afterindenttrue}{\global\@afterindentfalse}%
  \global\setbox\cch@inline@sec@box\hbox{\ifvoid\cch@inline@sec@box\else\unhbox\cch@inline@sec@box\ccUseProperty{interline-para-sep}\fi\@svsec}%
  \ccaEnable
  \@nobreakfalse
  \global\@noskipsectrue
  \gdef\next{%
    \global\everypar{%
      \if@noskipsec
        \global\@noskipsecfalse
        {\setbox\z@\lastbox}%
        \clubpenalty\@M
        \begingroup
          \unhbox\cch@inline@sec@box
        \endgroup
        \unskip
        \hskip -\@tempskipa
      \else
        \clubpenalty \@clubpenalty
        \global\setbox\cch@inline@sec@box\box\voidb@x
        \everypar{}%
      \fi}%
    \ignorespaces}}
%    \end{macrocode}
% \end{macro}
%
%\subsection{Block Headings}
%
% \begin{macro}{\cch@make@block} is used to print block headings.
%    \begin{macrocode}
\def\cch@make@block{%
  \@svsec
  \ccUseProperty{after-heading-par}%
  \ccIfProp{after-indent}{\global\@afterindenttrue}{\global\@afterindentfalse}%
  \gdef\next{%
    \ifdim\parskip>\z@\relax\advance\@tempskipa-\parskip\relax\fi
    \vskip \@tempskipa
    \@afterheading
    \ignorespaces}}
%    \end{macrocode}
% \end{macro}
%
% \section{The Heading environment}
%
% \subsection{Environment Macros}
%
%
% \begin{macro}{\cch@heading} is the macro called at the begin of the
%   \lstinline{Heading} environment. Optional \#1 stores the headings
%   local parameters, \#2 is the level of the heading.
%    \begin{macrocode}
\def\cch@heading{\cc@opt@empty\@cch@heading}%
\def\@cch@heading[#1]#2{%
%    \end{macrocode}
% Some {\LaTeX} kernel macros are saved, the namespace is
% set and counted groups from previous headings are reset.
%    \begin{macrocode}
  \cch@reserve
%    \end{macrocode}
% \begin{macro}{\ccCurSecName} stores the name of the current heading
%   level.
%    \begin{macrocode}
  \xdef\ccCurSecName{#2}%
  \ccEvalAttributes[Heading]{#1}%
%    \end{macrocode}
% \end{macro}
% After opening the environment, if accessibility Features are
% enabled, we check the current absolute nesting level and close all
% open Sectioning tags if the nominal level of the current heading is
% lower than the \textit{nominal} level of the last opened
% heading. \textit{Nominal} in this case refers the level given to the
% heading when it was defined in contrast to the actual,
% \textit{absolute}, nesting level in the tex document.
%    \begin{macrocode}
  \ifx\cch@notag\relax\else
    \ccWhenAlly{%
%    \end{macrocode}
% \begin{macro}{\ccPrevSecLevel} is the previously opened,
%   \textit{nomimal}, heading level.
%    \begin{macrocode}
      \global\let\ccPrevSecLevel=\ccCurSecLevel\relax
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ccCurSecLevel} stores the nominal level of the current
%   heading.
%    \begin{macrocode}
      \xdef\ccCurSecLevel{\csname cch@#2@level\endcsname}%
%    \end{macrocode}
% \end{macro}
% Now, we call the auto-close mechanism defined below in
% Sect.~\ref{sect:heading:a11y},
%    \begin{macrocode}
      \cchAutoClose%
      \ccDebugMsg[a11y]{Level after close: \the\cch@total@nesting@level}}%
  \fi
%    \end{macrocode}
% Then, we call the heading level specific
% \UsageHook{env/Heading/[level]/begin} hook.
%    \begin{macrocode}
  \UseHook{env/\ccPrefix Heading/#2/begin}%
%    \end{macrocode}
% \end{macro}
%    \begin{macrocode}
  \ccEvalType[#2]{Components}%
  \ignorespaces
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\cch@end@heading}
%   is stuff that happens at the end of the \lstinline{Heading}
%   environment.
%    \begin{macrocode}
\def\cch@end@heading{%
  \expandafter\ifx\csname ccUseHeading\ccCurSecName\endcsname\relax
    \PackageError{coco-headings.sty}{Heading level \ccCurSecName\space unknown!}{A Heading with level \ccCurSecName\space is unknown. Use the \string\ccDeclareHeading\space macro to declare heading levels.}%
  \else
    \csname ccUseHeading\ccCurSecName\endcsname%
  \fi
  \cch@reset
}
%    \end{macrocode}
% \end{macro}
%
% \subsection{Content Handlers}
%
% \begin{macro}{\cch@reserve}
%   re-directs some of \LaTeX's kernel macros and makes sure that some
%   other macros have their default values:
%    \begin{macrocode}
\def\cch@reserve{%
  \ccSetContainer{Heading}%
  \let\cch@ltx@dbl@backslash\\%
  \letcs\\{\ccPrefix Break}%
  \let\cc@ltx@label\label%
  \def\ccAuthorCnt{\z@}%
  \def\ccAffilCnt{\z@}%
  \cc@reset@components{\cc@cur@cont}%
  \let\cch@current@class\relax
  \global\let\cch@id@cur@meta\@undefined
  \global\let\cch@id@cur@head\@undefined
  \global\let\cch@no@tag\@undefined%
  \global\let\cch@ccaEnable\ccaEnable
  \global\let\cch@ccaProtect\ccaProtect
  \ignorespaces}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\cch@reset} restores \LaTeX's default definitions (however, this
%   should be unnecessary since \lstinline{Heading} is an environment
%   and therefore constitutes a closed group).
%    \begin{macrocode}
\def\cch@reset{%
  \let\cc@cur@cont\relax
  \let\\\cch@ltx@dbl@backslash
  \let\label\cc@ltx@label
  \let\ccCurSecName\relax
  \global\let\ccaEnable\cch@ccaEnable
  \global\let\ccaProtect\cch@ccaProtect
  \ifx\cch@notag\relax\endccaArtifact\fi
  }
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\cch@provide@quotes} covers multiple quotation blocks
%   assocciated with a heading.
%    \begin{macrocode}
\def\cch@provide@quotes{%
%    \end{macrocode}
% \begin{Component}[CL]{QuoteBlock} is the Collection
%   Component for one or more \UsageComponent{Quote} Component Groups.
%    \begin{macrocode}
  \ccDeclareComponent{QuoteBlock}{}{}%
%    \end{macrocode}
% \end{Component}
% \begin{Component}[GC]{Quote} is a Component Group for quotes that
% belong to a heading.
%    \begin{macrocode}
  \ccDeclareComponentGroup{Quote}{%
%    \end{macrocode}
% \end{Component}
% \begin{Component}[CC]{QuoteText} is the quotation text
%    \begin{macrocode}
    \ccDeclareCountedComponent{QuoteText}%
%    \end{macrocode}
% \end{Component}
% \begin{Component}[CC]{QuoteSource} is the source of the quotation.
%    \begin{macrocode}
    \ccDeclareCountedComponent{QuoteSource}%
  }%
}
%    \end{macrocode}
% \end{Component}
% \end{macro}
% \begin{macro}{\cch@provide@authors} sets up the additional Components for the \UsageComponent{Author} Role specific to headings.
%    \begin{macrocode}
\def\cch@provide@authors{%
  \ccAddToRole{Author}{%
%    \end{macrocode}
% \begin{Component}[CC]{AuthorContact} holds the contact information of
% an author.
%    \begin{macrocode}
    \ccDeclareCountedComponent{AuthorContact}%
  }%
%    \end{macrocode}
% \end{Component}
% \begin{Component}[CL]{AuthorContactBlock} is the Collection
%   Component for the Counted Component
%   \UsageComponent{AuthorContact}.
%    \begin{macrocode}
  \ccDeclareRoleBlock{Author}{ContactBlock}{author-contact-block-format}%
%    \end{macrocode}
% \end{Component}
%    \begin{macrocode}
  \ccDeclareGroupHandler{Author}{%
    \ccIfComp{AuthorContact}{}{\ccComponent{AuthorContact}{\ccUseProperty{author-contact-format}}}{}%
  }%
%    \end{macrocode}
% \begin{Component}[CL]{AuthorNameList} is the Collection Component
%   for the Author names.
%    \begin{macrocode}
  \cc@provide@overrides{AuthorNameList}%
}
%    \end{macrocode}
% \end{Component}
% \end{macro}
% \begin{macro}{\cch@provide@comp} is a wrapper that creates the
%   user-level macros for the Component itself and its overrides. \#1
%   is the Component name.
%    \begin{macrocode}
\def\cch@provide@comp#1{%
  \ccDeclareComponent{#1}{}{}%
  \cc@provide@overrides{#1}%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\cc@provide@overrides} declares the Component
%   macros for a Heading Component's overrides. \#1 is the Component
%   name. The overrides allow a four-way distinction between
%   \textit{i} the data printed in-situ (\lstinline{#1}), \textit{ii} data sent
%   to toc (\lstinline{Toc#1}), (iii) data sent to the page styles (\lstinline{Run#1}), and (iv) the data sent
%   to the PDF bookmarks (\lstinline{BM#1}).
%    \begin{macrocode}
\def\cc@provide@overrides#1{%
  \ccDeclareComponent{Toc#1}{}{}% toc overrides
  \ccDeclareComponent{Run#1}{}{}% running overrides
  \ccDeclareComponent{BM#1}{}{}% bookmark overrides
}
%    \end{macrocode}
% \end{macro}
%
% \section{Defaults}
%
%    \begin{macrocode}
\ccAddToProperties{Heading}{%
%    \end{macrocode}
% \begin{Property}{interline-para}{[true|<empty>]} is a switch that if
%   non-empty prevents two adjacent inline headings from being set in
%   the same paragraph.
%    \begin{macrocode}
  \ccSetProperty{interline-para}{}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{interline-para-sep}{<any>} is the material that is
% printed between to adjacent inline headings.
%    \begin{macrocode}
  \ccSetProperty{interline-para-sep}{\space}
%    \end{macrocode}
% \end{Property}
% \begin{Property}{heading-par}{<any>} is the material added to the very
% beginning of a heading.
%    \begin{macrocode}
  \ccSetProperty{heading-par}{%
    \ccWhenProp{interline-para}{\if@noskipsec \leavevmode \fi}%
    \par
    \global\@afterindenttrue
  }%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{after-heading-par}{<any>} is expanded at the very end of
% non-inline headings.
%    \begin{macrocode}
  \ccSetProperty{after-heading-par}{\par \nobreak}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{before-heading}{<any>} is expanded immediately before
% any vertical skips of a heading are inserted, but after the
% \UsageHook{begin-hook}.
%    \begin{macrocode}
  \ccSetProperty{before-heading}{}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{title-face}{<any>} is the style of the heading's main title.
%    \begin{macrocode}
  \ccSetProperty{title-face}{\bfseries}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{subtitle-face}{<any>} is the style of the heading's subtitle.
%    \begin{macrocode}
  \ccSetProperty{subtitle-face}{\normalfont}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{author-face}{<any>} is the face of the heading's printed
% \texttt{Author} Component.
%    \begin{macrocode}
  \ccSetProperty{author-face}{\normalfont}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{quote-face}{<any>} is the style of a quotation.
%    \begin{macrocode}
  \ccSetProperty{quote-face}{\raggedleft}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{quote-source-face}{<any>} is the style of a quotation's
% source line.
%    \begin{macrocode}
  \ccSetProperty{quote-source-face}{}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{quote-block-format}{<any>} is the format of a single
% quotation. By default, it uses the \UsageComponent{QuoteText} and
% \UsageComponent{QuoteSource} Components.
%    \begin{macrocode}
  \ccSetProperty{quote-block-format}{%
    \bgroup
      \ccUseProperty{quote-face}%
      \ccUseComp{QuoteText}\par
      \ccIfComp{QuoteSource}{{\ccUseProperty{quote-source-face}--\space\ccUseComp{QuoteSource}}\par}{}%
    \egroup}
%    \end{macrocode}
% \end{Property}
% \begin{Property}{heading-block}{<any>} is the format of the main
% heading. It uses the \UsageComponent{Subtitle},
% \UsageComponent{AuthorNameList}, \UsageComponent{QuoteBlock} and
% \UsageComponent{AffilBlock} Components.
%    \begin{macrocode}
  \ccSetProperty{heading-block}
    {\ccUseProperty{main-title-format}%
     \ccaStructStart{Div}%
     \ccWhenComp{Subtitle}{{\ccUseProperty{subtitle-face}\ccaStructStart{P}\ccUseComp{Subtitle}\ccaStructEnd{P}}\par\nobreak}%
     \ccWhenComp{AuthorNameList}{{\ccUseProperty{author-face}\ccaStructStart{P}\ccUseComp{AuthorNameList}\ccaStructEnd{P}}\par\nobreak}%
     \ccWhenComp{QuoteBlock}{\ccaStructStart{Div}\ccUseComp{QuoteBlock}\ccaStructStart{Div}}%
     \ccWhenComp{AffilBlock}{{\ccUseProperty{affil-block-face}\ccaStructStart{Div}\ccUseComp{AffilBlock}\ccaStructStart{Div}}\par}%
     \ccaStructEnd{Div}%
    }%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{main-title-format}{<any>} is the format of the
%   heading's main title. It should also enclose the heading's
%   \UsageComponent{Number} and \UsageComponent{Title} Components with
%   Tags that are mapped to \DescribeTag{H} or \DescribeTag{Hn} with
%   $1<n<6$. The number is tagged as \DescribeTag{Lbl} if present.
%    \begin{macrocode}
  \ccSetProperty{main-title-format}{%
    \ccUseProperty{title-face}%
    \cchHeadTagStart
    \ccIfComp{Number}%
      {\ccaStructStart{Lbl}\ccUseProperty{hang-number}\ccaStructEnd{Lbl}}%
      {\leftskip0pt}%
    \ccUseComp{Title}%
    \cchHeadTagEnd
    \par\nobreak
  }
%    \end{macrocode}
% \end{Property}
% \begin{Property}{extended-heading}{<any>} is the format of extended
% headings whcih incorporates the \UsageComponent{Abstract} and
% \UsageComponent{Keywords} Labeled Components. Requires the
% \UsageProp{extended} Property to be non-empty.
%
% \UsageComponent{Abstract} and \UsageComponent{Keywords} are tagged
% with \UsageTag{Abstract} and \UsageTag{Keyword}, their labels with
% \UsageTag{AbstractLabel} and \UsageTag{KeywordsLabel}, and their
% values with \UsageTag{AbstractText} and \UsageTag{KeywordsText},
% respectively.
%    \begin{macrocode}
  \ccSetProperty{extended-heading}{%
    \ccWhenComp{Abstract}{%
      \par\vskip\baselineskip
      \ccaStructStart{Abstract}%
      \bgroup
        \bfseries
        \ccaStructStart{AbstractLabel}%
        \ccIfComp{AbstractLabel}
          {\ccUseComp{AbstractLabel}}
          {Abstract}%
        \ccaStructEnd{AbstractLabel}%
      \egroup
      \par\nobreak
      \bgroup
        \itshape\small
        \ccaStructStart{AbstractText}%
        \ccUseComp{Abstract}%
        \ccaStructEnd{AbstractText}%
      \egroup
      \par
      \ccaStructEnd{Abstract}%
    }%
    \ccWhenComp{Keywords}{%
      \par\vskip\baselineskip
      \ccaStructStart{Keywords}%
      \bgroup
        \bfseries
        \ccaStructStart{KeywordsLabel}%
        \ccIfComp{KeywordsLabel}
          {\ccUseComp{KeywordsLabel}}
          {Keywords}%
        \ccaStructEnd{KeywordsLabel}%
      \egroup%
      \par\nobreak
      \bgroup
        \itshape\small
        \ccaStructStart{KeywordsText}%
        \ccUseComp{Keywords}%
        \ccaStructEnd{KeywordsText}%
        \par%
      \egroup
      \ccaStructEnd{Keywords}%
    }}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{before-skip}{<skip>} the vertical space before
% heading. Positive values are set with \LaTeX's
% \lstinline{\addvspace}, while negative values are set with
% coco-common's \DescribeMacro{\minusvspace}.
%
% \TODO{values $< 0pt$ use \string\minusvspace, else
% \string\addvspace. LaTeX's default behaviour of
% \string\@afterindent is relocated to the after-indent
% property.}
%    \begin{macrocode}
  \ccSetProperty{before-skip}{\z@skip}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{after-heading-block}{<any>} is expanded at the very
% end of the printed heading.
%    \begin{macrocode}
  \ccSetProperty{after-heading-block}{}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{before-heading-block}{<any>} is expanded at the very
% beginning of \lstinline{@svsec}.
%    \begin{macrocode}
  \ccSetProperty{before-heading-block}{\parindent\z@ \parskip\z@}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{toc-hook}{<any>} is called after ToC and Bookmark
% entries are written and allows for material to be added to the toc
% file.
%    \begin{macrocode}
  \ccSetProperty{toc-hook}{}% Called, after ToC and BM entries have been written to the .aux file
%    \end{macrocode}
% \end{Property}
% \begin{Property}{after-indent}{<any>} if non-empty, the first paragraph
% after the heading will be indented.
%    \begin{macrocode}
  \ccSetProperty{after-indent}{}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{margin-left}{[auto|<dimen>|<empty>]} is the left margin
% of the heading. Its value can either be a fixed dimension, the
% string \texttt{auto}, or empty. If the Property is set to
% \texttt{auto} or an empty string, the margin is calculated from the
% \UsageProp{indent} (see below). Otherwise the fix value is used.
%    \begin{macrocode}
  \ccSetProperty{margin-left}{}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{margin-right}{<skip>} is the right margin of the
% heading block.
%    \begin{macrocode}
  \ccSetProperty{margin-right}{\@flushglue}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{after-skip}{<skip>} is the vertical space after the
% heading block. If the value is greater than or equal to 0pt, the
% heading is formatted in block, while it is formatted as inline
% heading if the value is negative.
%    \begin{macrocode}
  \ccSetProperty{after-skip}{1sp}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{indent}{[auto|auto-global|<dimen>]} is the offset
%   of the first line of the heading relative to
%   \UsageProp{margin-left}.
%
%   If the value is auto, the indent of the heading is the width of
%   the widest \UsageComponent{Number} Component of \textit{all
%   headings with the same level}.
%
%   If the value is \texttt{auto-global}, the indent is the width of
%   the widest Number component across \textit{all heading
%   levels}. Both \texttt{auto} and \texttt{auto-global} require at
%   least two {\LaTeX} runs. See Sect.~\ref{sec:indent} in
%   Module~\ref{chap:common} for more details.
%    \begin{macrocode}
  \ccSetProperty{indent}{auto}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{number-width}{<dimen>} is the (actula) width of the
%   \texttt{Number} component.
%    \begin{macrocode}
  \ccSetProperty{number-width}{}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{number-sep}{<any>} Is the separator between the
%   \texttt{Number} and the \texttt{Title} components
%    \begin{macrocode}
  \ccSetProperty{number-sep}{\space}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{number-align}{[left|center|right]} is the
%   horizontal alignment of the \texttt{Number} component inside its
%   surrounding \lstinline{\hbox}.
%    \begin{macrocode}
  \ccSetProperty{number-align}{left}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{number-format}{<any>} is the format of a heading's
%   counter. It prints the \UsageComponent{Number} component and the
%   \UsageProp{number-sep} Property, and stylizes them both with the
%   \UsageProp{title-face} \textit{and} \UsageProp{number-face}
%   Properties.
%    \begin{macrocode}
  \ccSetProperty{number-format}{%
    \bgroup
      \ccUseProperty{title-face}%
      \ccUseProperty{number-face}%
      \ccUseComp{Number}%
      \ccUseProperty{number-sep}%
    \egroup}
%    \end{macrocode}
% \end{Property}
% \begin{Property}{numbering}{[auto|<any>]} if non-auto, headings are not
% numbered automatically if no Number component is given. This
% property can be overridden in a local instance with the
% \lstinline{nonumber} Attribute.
%    \begin{macrocode}
  \ccSetProperty{numbering}{auto}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{running-level}{<name>} is an override that allows
%   the heading's running title to appear as another level's running
%   title. Usually, the \lstinline{RunTitle} Component is passed to
%   \lstinline{\<level>mark} for the page header, but if this Property
%   is non-empty, the heading will be passed to
%   \lstinline{\<runnning-level>mark}, instead.
%    \begin{macrocode}
  \ccSetProperty{running-level}{}% override level for running title, name
%    \end{macrocode}
% \end{Property}
% \begin{Property}{running-heading}{<any>} is the format of the
%   material passed to the \lstinline{\<level>mark} or
%   \lstinline{\<running-level>mark} command. It uses the
%   \UsageComponent{RunTitle} and \UsageComponent{RunAuthorNameList}
%   Components.
%    \begin{macrocode}
  \ccSetProperty{running-heading}{%
    \ccIfComp{RunAuthorNameList}{\ccUseComp{RunAuthorNameList}:\space}{}%
    \ccUseComp{RunTitle}%
  }%
  %% ToC
%    \end{macrocode}
% \end{Property}
% \begin{Property}{no-toc}{[true|false]} whether or not the heading does
% \textit{not} create an entry in the table of contents (\texttt{true}
% means no toc entry, \texttt{false} means toc entry).
%    \begin{macrocode}
  \ccSetProperty{no-toc}{false}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{no-BM}{[true|false]} whether or not the heading
%   does \textit{not} create a bookmark (\texttt{true} means no
%   bookmark, \texttt{false} means bookmark).
%    \begin{macrocode}
  \ccSetProperty{no-BM}{false}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{toc-margin-top}{<skip>} vertical space before the ToC entry.
%    \begin{macrocode}
  \ccSetProperty{toc-margin-top}{\z@}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{toc-margin-bottom}{<skip>} vertical space after the
%   ToC entry.
%    \begin{macrocode}
  \ccSetProperty{toc-margin-bottom}{\z@}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{toc-margin-left}{[auto|<dimen>]} left margin of the toc
% entry. See \lstinline{margin-left} for the meaning of auto.
%    \begin{macrocode}
  \ccSetProperty{toc-margin-left}{auto}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{toc-margin-right}{<dimen>} right margin of the ToC
%   entry.
%    \begin{macrocode}
  \ccSetProperty{toc-margin-right}{\@pnumwidth}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{toc-title-face}{<any>} style of the title in the
%   ToC entry.
%    \begin{macrocode}
  \ccSetProperty{toc-title-face}{}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{toc-indent}{[auto|auto-global|<dimen>]} offset of
%   the ToC entry's first line relative to margin-left. See
%   \lstinline{indent}.
%    \begin{macrocode}
  \ccSetProperty{toc-indent}{auto}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{toc-number-width}{<dimen>} the actual width of the
%   TocNumber Component.
%    \begin{macrocode}
  \ccSetProperty{toc-number-width}{}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{toc-number-align}{[left|center|right]} the
%   alignment of the TocNumber within the surrounding
%   \lstinline{\hbox}.
%    \begin{macrocode}
  \ccSetProperty{toc-number-align}{left}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{toc-number-face}{<any>} style of the TocNumber
%   component.
%    \begin{macrocode}
  \ccPropertyLet{toc-number-face}{toc-title-face}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{toc-number-sep}{<any>} separator between the
%   \lstinline{TocNumber} and \lstinline{TocTitle} Components
%    \begin{macrocode}
  \ccSetProperty{toc-number-sep}{\enskip}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{toc-number-format}{<any>} is the format of the
%   \UsageComponent{TocNumber} Component, using the
%   \UsageProp{toc-number-face} and \UsageProp{toc-number-sep}
%   Properties.
%    \begin{macrocode}
  \ccSetProperty{toc-number-format}{%
    \bgroup
      \ccUseProperty{toc-number-face}%
      \ccUseComp{TocNumber}%
      \ccUseProperty{toc-number-sep}%
    \egroup}
%    \end{macrocode}
% \end{Property}
% \begin{Property}{toc-page-sep}{<any>} separator between the TocTitle
%   and the page counter. The dotted line is tagged as
%   \DescribeTag{leaders}, which is mapped to be an artifact of type
%   \UsageTag{leaders}.
%    \begin{macrocode}
  \ccSetProperty{toc-page-sep}{\ccaAddKeep\ccaStructStart[Document]{leaders}\dotfill\ccaStructEnd{leaders}}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{toc-page-face}{<any>} style of the page counter
%    \begin{macrocode}
  \ccSetProperty{toc-page-face}{}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{toc-page-format}{<any>} format of the page counter
%   using the \UsageProp{toc-page-sep} and \UsageProp{toc-page-face}
%   Properties. The number itself is tagged as a \DescribeTag{Span}.
%    \begin{macrocode}
  \ccSetProperty{toc-page-format}{%
    \ccUseProperty{toc-page-sep}%
    \bgroup
      \ccUseProperty{toc-page-face}%
      \ccaStructStart{Span}\ccUseComp{TocPage}\ccaStructEnd{Span}%
    \egroup}%%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{toc-level}{<name>} name of another heading level as
%   which the ToC entry should be rendered.
%    \begin{macrocode}
  \ccSetProperty{toc-level}{}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{toc-before-entry}{<any>} is expanded before any ToC
%   entry is rendered. Should setup
%   margins\UsageProperty{toc-margin-top}\UsageProperty{toc-margin-right}\UsageProperty{toc-margin-left},
%   alignment, line-breaking rules, etc.
%    \begin{macrocode}
  \ccSetProperty{toc-before-entry}{%
    \addvspace{\ccUseProperty{toc-margin-top}}%
    \parindent \z@
    \let\\\@centercr
    \hyphenpenalty=\@M
    \rightskip \ccUseProperty{toc-margin-right} \@plus 1fil\relax
    \parfillskip -\rightskip
    \leftskip\ccUseProperty{toc-margin-left}%
  }%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{toc-after-entry}{<any>} is expanded at the very end
%   of a ToC entry. By default, it sets the skip after the entry to
%   \UsageProp{toc-margin-bottom}.
%    \begin{macrocode}
  \ccSetProperty{toc-after-entry}{\par\addvspace{\ccUseProperty{toc-margin-bottom}}}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{toc-format}{<any>} format of the ToC entry
%   itself. It uses the \UsageProp{toc-title-face},
%   \UsageProp{toc-hang-number} and \UsageProp{toc-page-format}
%   Properties to print the \UsageComponent{TocNumber},
%   \UsageComponent{TocAuthorNameList}, \UsageComponent{TocTitle}, and
%   \UsageComponent{TocPage} Components. Tagging should incorporate
%   the \DescribeTag{TOCI}, as well as for numbered ToC entries the
%   \DescribeTag{P} and \DescribeTag{Reference} tags that span the
%   entire entry, as well as \DescribeTag{Lbl} for the
%   \UsageComponent{TocNumber}, and \DescribeTag{Span} for the
%   remaining Components of the entry. Unnumbered Entries are simply
%   \DescribeTag{TOCI} with \DescribeTag{Spans} for the various
%   Components.
%    \begin{macrocode}
  \ccSetProperty{toc-format}{%
    \ccUseProperty{toc-title-face}%
    \ccaVstructStart{TOCI}%
    \ccWhenComp{TocNumber}{\ccaStructStart{P}\ccaStructStart{Reference}}%
    \ccTocLink{%
      \ccIfComp{TocNumber}
        {\ccaStructStart{Lbl}\ccUseProperty{toc-hang-number}\ccaStructEnd{Lbl}}
        {\leftskip0pt\leavevmode}%
      \ccWhenComp{TocAuthorNameList}{\ccaStructStart{Span}\ccUseComp{TocAuthorNameList}:\space\ccaStructEnd{Span}}%
      \ccaStructStart{Span}\ccUseComp{TocTitle}\ccaStructEnd{Span}%
      \ccUseProperty{toc-page-format}%
    }%
    \ccWhenComp{TocNumber}{\ccaStructEnd{Reference}\ccaStructEnd{P}}%
    \ccaVstructEnd{TOCI}%
  }%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{bookmark-level}{<num>} number(!) of the heading
%   level as which the Bookmark entry should be rendered.
%    \begin{macrocode}
  \ccSetProperty{bookmark-level}{}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{bookmark}{<any>} is the format of the bookmark,
%   which by default is built only from the \UsageComponent{BMNumber}
%   and \UsageComponent{BMTitle} Components.
%    \begin{macrocode}
  \ccSetProperty{bookmark}{%
    \ccIfComp{BMNumber}{\ccUseComp{BMNumber}\space}{}%
    \ccUseComp{BMTitle}%
  }%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{orcid-link}{<any>} how an \UsageComponent{ORCID}
%   link is rendered.
%    \begin{macrocode}
  \ccSetProperty{orcid-link}{%
    \ccIfComp{ORCID}{\ccCompLink{ORCID}{\includegraphics[height=1em]{logos/ORCID.pdf}}}{}%
  }%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{author-contact-format}{<any>} how a single Author
%   Component's contact information should be rendered. By default, it
%   uses the Author's \UsageComponent{FullName}, the value of the
%   \UsageComponent{AffilRef} component as superscript, and the
%   \UsageProp{orcid-link} Property.
%    \begin{macrocode}
  %% a single Author's contact infomration block
  \ccSetProperty{author-contact-format}{%
    \ccUseComp{FullName}\ccWhenComp{RefAffil}{\textsuperscript{\ccUseComp{AffilRef}}}%
    \ccUseProperty{orcid-link}%
  }%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{author-list-format}{<any>} how a single entry in
%   the \UsageComponent{AuthorNameList} Collection Component should be
%   rendered.
%    \begin{macrocode}
  \ccPropertyLet{author-list-format}{author-list-print-format}%
%    \end{macrocode}
% \end{Property}
% \begin{Property}{author-contact-block-format}{<any>} is the
%   Collection Property for the \UsageComponent{AuthorContactBlock}
%   Collection Component and sets how each single entry in the
%   Collection should be formatted. By default, it uses the
%   \UsageComponent{AuthorContact} Counted Component and appends the
%   \UsageProp{counted-name-sep} to all instance of that Component but
%   the last.
%    \begin{macrocode}
  \ccSetProperty{author-contact-block-format}{%
    \ccUseComp{AuthorContact}\ifnum\ccCurCount<\ccTotalCount\ccUseProperty{counted-name-sep}\fi
  }}
%    \end{macrocode}
% \end{Property}
%
%
% \section{Accessibility Features}\label{sect:heading:a11y}
%
% \begin{macro}{\cch@total@nesting@level} stores the absolute nesting
%   level opened with each heading.
%    \begin{macrocode}
\newcount\cch@total@nesting@level \cch@total@nesting@level=\z@\relax
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\cch@max@nesting@level} stores the highest absolute
%   nesting level throughout the document.
%    \begin{macrocode}
\newcount\cch@max@nesting@level   \cch@max@nesting@level=\z@\relax
%    \end{macrocode}
% Since PDF 1.7 allows only \DescribeTag{H1}--\DescribeTag{H6}, more
% nesting levels need to be mapped to one of the Standard tags. The
% Tagged PDF Best Practice Guide recommends mapping higher levels to
% \DescribeTag{P}, which we do at the end of the document. All this is
% not necessary if PDF/UA-2 is used, since first it allows any H$n$
% for as long as H$n$s are nested sequentially, and second, because
% then we use the \DescribeTag{Title} tag instead of \DescribeTag{Hn}.
%    \begin{macrocode}
\ccWhenAlly{\if@cc@pdf@two\else\AtEndDocument{\cch@add@h@rolemap}\fi}%
%    \end{macrocode}
% \begin{macro}{\cch@add@h@rolemap} adds the Rolemap entries for H$n$,
%   where $n>6$.
%    \begin{macrocode}
\def\cch@add@h@rolemap{%
  \@tempcnta=7\relax
  \loop
  \unless\ifnum\@tempcnta>\cch@max@nesting@level\relax
    \ccaAddRolemap{H\the\@tempcnta}{P}%
    \advance\@tempcnta\@ne\relax
  \repeat
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\cchAutoClose} checks if any open \DescribeTag{Sect}
%   tags (or Tagging mapped to \DescribeTag{Sect}) need to be closed
%   and closes them if applicable.
%
%   For that, we check if the value of \UsageMacro{\ccPrevSecLevel}
%   (i.e., the \textit{nominal} heading level of the last opened
%   heading) is larger or equal to the \textit{nominal} level of the
%   currently opened heading. If so, we add closing \DescribeTagE{Sect}
%   tags until either the \textit{absolute} nesting level is 1 or an
%   decrementing counter that starts at \UsageMacro{\ccPrevSecLevel}
%   gets less than \UsageMacro{\ccCurSecLevel}. At each step, we also
%   decrease the \UsageMacro{\cch@total@nesting@level} counter by one.
%    \begin{macrocode}
\DeclareAccessibilityCommand\cchAutoClose{%
  \let\cca@next\relax
  \ccDebugMsg[a11y]{Calling AutoClose for \ccCurSecName\space (\ccCurSecLevel).}
  \ifx\ccPrevSecLevel\@undefined\else
    \ifx\ccCurSecLevel\@undefined\else
      \ccDebugMsg[a11y]{prev: \ccPrevSecLevel, cur: \ccCurSecLevel, abs: \the\cch@total@nesting@level.}
      \ifnum\ccPrevSecLevel=\ccCurSecLevel\relax
        \ccDebugMsg[a11y]{Closing \the\cch@total@nesting@level.}
        \global\advance\cch@total@nesting@level\m@ne\relax
        \ccaVstructEnd{\csname cch@sec@\the\cch@total@nesting@level @name\endcsname}%
      \else
        \ifnum\ccPrevSecLevel<\ccCurSecLevel\relax
          \csxdef{cch@prev@parent@level@\ccCurSecLevel}{\ccPrevSecLevel}%
        \else
          \ifnum\ccPrevSecLevel>\ccCurSecLevel\relax
            \ccDebugMsg[a11y]{Closing (inner) \the\cch@total@nesting@level.}
            \global\advance\cch@total@nesting@level\m@ne\relax
            \ccaVstructEnd{\csname cch@sec@\the\cch@total@nesting@level @name\endcsname}%
            \ifnum\cch@total@nesting@level=\@ne\relax\else
              \xdef\ccPrevSecLevel{\csname cch@prev@parent@level@\ccPrevSecLevel\endcsname}%
              \let\cca@next\cchAutoClose
            \fi
          \fi
        \fi
      \fi
    \fi
  \fi
  \cca@next
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\cchResetNesting} resets the \textit{absolute} heading
%   nesting level to 0 by closing all currently open \DescribeTagE{Sect}
%   tags. This macro is intended to be used at the very end of the
%   document or at major document partitions (e.g.,
%   \lstinline{\mainmatter}, \lstinline{\appendix}, etc.)
%    \begin{macrocode}
\DeclareAccessibilityCommand\cchResetNesting{%
  \ccWhenAlly{%
    \ifnum\cch@total@nesting@level>\z@\relax
      \loop
        \ccaVstructEnd{\csname cch@sec@\the\cch@total@nesting@level @name\endcsname}%
        \global\advance\cch@total@nesting@level\m@ne\relax
      \ifnum\cch@total@nesting@level>\z@\relax
      \repeat
    \fi
  }}
%    \end{macrocode}
% \end{macro}
% The advancement of the \UsageMacro{\cch@total@nesting@level} counter
% is done in the \UsageHook{env/Heading/before} hook.
%    \begin{macrocode}
\AddToHook{env/\ccPrefix Heading/before}{%
  \ccDebugMsg[a11y]{Processing heading}%
  \global\advance\cch@total@nesting@level\@ne\relax
}
%    \end{macrocode}
% In the \UsageHook{env/Heading/after} hook, first, the
% \DescribeTagsE{SectMeta} Tag is closed. Only then, we open the tag
% for actual \DescribeTagS{Sect}. Here, we also define the name of the
% Tag to be re-used later in the \lstinline{\cchAutoClose}
% mechanism. Finally, we move the \DescribeTag{Hn} Tagging node (which
% tags the section's title) and the \DescribeTag{SectMeta} node (which
% contains the tagged meta data realized by the
% \UsageContainer{Heading} Container's other Components) into the
% \DescribeTag{Sect} node.
%    \begin{macrocode}
\AddToHook{env/\ccPrefix Heading/after}{%
  \ifx\cch@notag\relax
    \global\let\cch@notag\@undefined
  \else
    \ccaVstructStart{\ccCurSecName}%
    \csxdef{cch@sec@\the\cch@total@nesting@level @name}{\ccCurSecName}%
%    \end{macrocode}
% For inline headings, the actual title is not yet printed by the time
% the heading Container's environment is closed. In this case, we
% don't move the node. For one, because it is likely not yet set, and
% second because it most likely already is in the “right” spot,
% i.e. inside the \UsageTag{Sect} tag.
%    \begin{macrocode}
    \ifx\cch@id@cur@head\@undefined\else
      \ccaMoveStruct{\cch@id@cur@head}%
    \fi
%    \end{macrocode}
% If \UsageMacro{\cch@id@cur@meta} is undefined when the Heading
% container's environment is closed, then this indicates an inline
% heading. In this case, we don't need to move the \UsageTag{SectMeta}
% node, as it most likely already is in the right place.
%    \begin{macrocode}
    \ifx\cch@id@cur@meta\@undefined\else
      \ccaMoveStruct{\cch@id@cur@meta}%
    \fi%
  \fi
}
%    \end{macrocode}
% \begin{macro}{\cchHeadTagStart} is used inside Property declarations
%   to insert the start tag of the current section
%    \begin{macrocode}
\def\cchHeadTagStart{%
  \if@cc@pdf@two
    \ccaVstructStart{Title}%
  \else
    \ccaVstructStart{H\the\numexpr\cch@total@nesting@level+\@ne\relax}%
    \ifnum\cch@total@nesting@level>\cch@max@nesting@level
      \global\cch@max@nesting@level=\cch@total@nesting@level\relax
    \fi
  \fi
  \ccaSaveCurStruct{cch@id@cur@head}%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\cchHeadTagEnd} is used inside Property declarations
%   to insert the end tag of the current section, unless the heading
%   level was declared with the starred version of
%   \UsageMacro{\ccDeclareHeading}.
%    \begin{macrocode}
\def\cchHeadTagEnd{%
  \if@cc@pdf@two
    \ccaVstructEnd{Title}%
  \else
    \ccaVstructEnd{H\the\numexpr\cch@total@nesting@level+\@ne\relax}%
  \fi}
%    \end{macrocode}
% \end{macro}
% The \UsageTag{SectMeta} tag is mapped to a simple \UsageTag{Div}.
%    \begin{macrocode}
\ccaAddRolemap{SectMeta}{Div}
%    \end{macrocode}
%
%
% \section{Miscellaneous}
%
% \subsection{Alternative paragraph separation}
%
% \begin{macro}{\ccNewPar} is a user-level macro to have a vertical
%   skip between two local paragraphs and no indent in the second
%   one. The amount of vertical space between the paragraphs can be
%   adjusted with the optional argument. If \#1 is omitted,
%   \lstinline{\ccnewparskip} is inserted, which defaults to
%   \lstinline{1\baselineskip} if the dimension isn't set to something
%   other than 0pt in the preamble. This macro is intended to be used
%   at the end of the first of the paragraphs.
%    \begin{macrocode}
\newdimen\ccnewparskip \AtBeginDocument{\ifdim\ccnewparskip=\z@\relax \ccnewparskip=1\baselineskip\relax\fi}
\def\ccNewPar{\@ifnextchar[{\cc@newpar}{\cc@newpar[\the\ccnewparskip]}}%]
\def\cc@newpar[#1]{%
  \ifhmode\par\fi
  \vskip#1\relax
  \@afterheading
}
\cslet{\ccPrefix NewPar}\ccNewPar
%    \end{macrocode}
% \end{macro}
% \Deprecated
% \begin{macro}{\TitleBreak}
%    \begin{macrocode}
\letcs\TitleBreak{\ccPrefix Break}
%    \end{macrocode}
% \end{macro}
%    \begin{macrocode}[numbers=none,gobble=1]
%</headings>
%    \end{macrocode}
