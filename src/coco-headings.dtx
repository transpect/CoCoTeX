% \chapter{coco-headings.dtx}
% This module provides handlers for headings like parts, chapters,
% sections, or inline headings common to all CoCoTeX projects.
%
%    \begin{macrocode}[gobble=1]
%<*headings>
%    \end{macrocode}
%
%    \begin{macrocode}
%%
%% module for CoCoTeX that extends heading objects.
%%
%% Maintainer: p.schulz@le-tex.de
%%
%% lualatex  -  texlive >= 2019
%%
\NeedsTeXFormat{LaTeX2e}[2018/12/01]
\ProvidesPackage{coco-headings}
    [\filedate \fileversion CoCoTeX headings module]
\RequirePackage{coco-meta}
%    \end{macrocode}
%
% Headings are handled differently with \lstinline{cocotex.cls}
% compared to standard \LaTeX, since cocotex manuscripts tend to
% have a whole collection of additional information that are pressed
% into the headings, like subtitles or section authors down to
% subsection level, etc. Therefore, the \lstinline{\@startsection} and
% \lstinline{\@make[s]chapterhead} facilities from {\LaTeX} are no longer
% sufficient. At the same time, the package does not redefine those
% macros and keeps them available for backwards compatibility.
%
% First, we load the \lstinline{bookmark} package:
%    \begin{macrocode}
\RequirePackage{bookmark}%
%    \end{macrocode}
% Since we use our own heading levels, we disable all automatically generated bookmarks.
%    \begin{macrocode}
\hypersetup{bookmarksdepth=-999}%
%    \end{macrocode}
%
% \section{Facility for declaring heading levels and their layouts}%
% \begin{ContainerDoc}{Heading}
%    \begin{macrocode}
\ccDeclareContainer{Heading}{%
  \ccInherit{Components,Properties}{CommonMeta}%
  \ccDeclareType{Parent}{}%
  \ccDeclareType{Components}{%
%    \end{macrocode}
% We already have the Author Component inherited from the
% \lstinline{CommonMeta} Container. We therefore just need to declare the
% overrides.
%    \begin{macrocode}
    \cch@provide@authors%
%    \end{macrocode}
% The remaining Components are built as usual.
%    \begin{macrocode}
    \cch@provide@comp{Title}%
    \cch@provide@comp{Subtitle}%
    \cch@provide@comp{Number}%
    \cch@provide@comp{LicenceLogo}%
    \cch@provide@comp{LicenceName}%
    \ccDeclareComponent{RefLabel}{}{}%
    \cch@provide@quotes
  }%
  \ccDeclareType{Properties}{}%
  \ccDeclareEnv{\cch@heading}{\cch@end@heading}%
}
%    \end{macrocode}
% \end{ContainerDoc}
%
% \begin{macro}{\ccDeclareHeading} is the user-level macro to declare
%   new headings.
% \begin{description}[2em]
% \item[\#1] (optional) inherit-from: load all properties from that heading level, first.
% \item[\#2] level: used for toc entries. -1 for part, 0 for chapter, 1 for section, etc.
% \item[\#3] name: part, chapter, section, etc, to be used in toc, head lines, bookmarks, etc.
% \item[\#4] Property definitions and switches
% \end{description}
%    \begin{macrocode}
\long\def\ccDeclareHeading{\cc@opt@empty\cc@declare@heading}
\long\def\cc@declare@heading[#1]#2#3#4{%
%    \end{macrocode}
% First, we check if the heading has already been declared.
%    \begin{macrocode}
  \ifcsdef{cc@container@#3}{%
%    \end{macrocode}
% If yes, then we check if the new declaration's parameters match with
% the pre-existing one. We start with the heading level.
%    \begin{macrocode}
    \ccPackageInfo{Headings}{}{Appending to `#3'}%
    \ifcsstring{cch@#3@level}{#2}{}{%
        \ccPackageError{Headings}
          {Level Mismatch}
          {Level of heading `#3' cannot be altered!}
          {The already existing heading `#3' has toc level `\csname cch@#3@level\endcsname', but your^^J%
           re-declaration states `#2'.^^J%
           ^^J%
           Consider declaring a new heading alltogether with `#3' as parent,^^J%
           or add Properties to `#3' using \string\ccAddToType\string{Properties\string}\string{#3\string}.}%
       }%
%    \end{macrocode}
% we also check the parent.
%    \begin{macrocode}
    \if!#1!\else
      \ifcsstring{cc@parent@#3}{#1}{}{%
        \ccPackageError{Headings}
          {Parent Mismatch}
          {Parent of heading `#3'^^J cannot be altered!}
          {The already existing heading `#3' inherits from `\csname cc@parent@#3\endcsname',^^J%
           but your re-declaration sets Parent to `#1'.^^J%
           ^^J%
           Consider declaring a new heading alltogether with `#1' as parent.}%
      }%
    \fi
%    \end{macrocode}
% and finally pass the new Properties to the existing heading.
%    \begin{macrocode}
    \ccAddToType{Properties}{#3}{#4}%
%    \end{macrocode}
% Finally, we need to re-define the \lstinline{\ccUseHeading} macro so
% that changes to the heading's Property list will be taken into
% account for all dependend constructions like list-ofs and
% toc-entries.
%    \begin{macrocode}
    \cch@declare@heading{#2}{#3}%
  }{% ifcsdef cc@container@#3 else
%    \end{macrocode}
% If the heading does not already exist, we build a new one.
%
% Each new heading constitutes its own Sub-Container of the heading
% Container. The name of this Sub-Container is the headings name.
%    \begin{macrocode}
    \ccDeclareContainer{#3}{%
%    \end{macrocode}
% 
% \begin{macro}{\cch@<3>@level} stores the numeric heading level for the heading
%    \begin{macrocode}
      \csgdef{cch@#3@level}{#2}%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\cch@2@unique} is a unique name for the
%      heading's level. Is is always the name of the \textit{first}
%      heading that is defined with a given heading level counter.
%    \begin{macrocode}
      \ifcsdef{cch@#2@unique}{}{\csgdef{cch@#2@unique}{#3}}%%
%    \end{macrocode}
% \end{macro}
% 
%    \begin{macrocode}
      \ccPackageInfo{Headings}{}{Declaring heading `#3'}%
      \edef\@argi{#1}%
      \ccDeclareType{Parent}{\cch@create@parent{#1}{#3}}
%    \end{macrocode}
% We inherit everything from the heading levels parent, or from the
% default heading if no parent is present.
%    \begin{macrocode}
      \ifx\@argi\@empty
        \ccInherit{Components,Properties}{Heading}%
      \else
        \ccInherit{Components,Properties,Parent}{#1}%
      \fi
%    \end{macrocode}
% The main body of the heading Declaration is a list of Property
% definitions which we append to the Sub-Container's ``Property''
% Type.
%    \begin{macrocode}
      \ccDeclareType{Properties}{%
        #4%
      }%
%    \end{macrocode}
% For each heading we declare some common macros like the ToC entry
% handlers, the heading's counters and its hooks.
%    \begin{macrocode}
      \ccDeclareType{Init}{%
        \cch@init@hooks{#3}%
        \let\@cch@cur@cont\cc@cur@cont
        \def\cc@cur@cont{Heading}%
        \cc@init@l@{toc}{#2}{#3}%
        \let\cc@cur@cont\@cch@cur@cont
        \cch@init@cnt{#3}%
      }%
%    \end{macrocode}
% Unlike other Sub-Containers, headings form no own {\LaTeX}
% environment.  Instead, headings are specifications of one common
% \lstinline{\ccPrefix Heading} environment. Is is outsourced into the internal
% \lstinline{\cch@declare@heading} macro, which is defined below.
%
% The reason for that is that we don't want to define versions of the
% same property macros for each and every single heading
% level. Instead, we locally re-define the general low-level macros
% that represent the heading's properties for each instance of the
% generalised \lstinline{Heading} container.
%    \begin{macrocode}
      \cch@declare@heading{#2}{#3}%
    }% \ccDeclareContainer{#3}
  }% \ifcsdef cc@container@#3 fi
%    \end{macrocode}
% If \CoCoTeX's accessibility features are active, we need to register
% each new heading with \lstinline{ltpdfa}'s autoclose mechanism.
%    \begin{macrocode}
  \ccIfAlly{\cch@add@autoclose{#2}{#3}}{}% \AtBeginDocument\ccIfAlly
%    \end{macrocode}
% Finally, we check and update the counters for the lowest and highest
% heading levels, resp.
%    \begin{macrocode}
  \ifnum#2<\cch@min@level\relax
    \global\cch@min@level=\csname cch@#3@level\endcsname\relax
  \fi
  \ifnum#2>\cch@max@level\relax
    \global\cch@max@level=\csname cch@#3@level\endcsname\relax
  \fi
}% \cc@declare@heading
%    \end{macrocode}
%   Each new heading level needs some configuration with the
% \lstinline{ltpdfa} package in order to automatically close heading
% tags with the beginning of a new heading.
% \end{macro}
%
% \begin{macro}{\cch@add@autoclose} adds the new heading level to
%   \lstinline{ltpdfa}'s autoclose mechanism. \#1 is the numeric
%   level, \#2 is the name of the heading. We do this inside the
%   \lstinline{cca/before/begin/document} hook, since we need to know
%   \textit{all} locally defined heading levels beforehand in order to
%   build the Sectioning tree correctly.
%    \begin{macrocode}
\def\cch@add@autoclose#1#2{%
  \ccAddToHook[document]{cca/at/begin/document}{%
%    \end{macrocode}
% First, we assign the Sectioning tag and the tag for the section's
% head itself to the \lstinline{Sect} and \lstinline{H} tags,
% respectively.
%
% Note that PDF Tags allow for enumerated heading tags (H1, H2, etc.)
% to be used. However, there are only six (H1 through H6) possible
% headings, which, by experinece, is too few for most CoCoTeX
% projects. Therefore, we use the ``nested-H'' approach, instead which
% has no such restriction.
%    \begin{macrocode}
    \ccaAddRolemap{#2}{Sect}%
    \ccaAddRolemap{#2head}{H}%
%    \end{macrocode}
% Next, we tell \lstinline{ltpdfa} for each heading level which other
% heading level is the next down the Sectioning hierarchy. For that,
% we first put the current heading level in a calculable counter.
%    \begin{macrocode}
    \@tempcnta=#1\relax
%    \end{macrocode}
% Then we catch the heading with the highest level (from the aux file)
% and set the \lstinline{document} layer in the \lstinline{ltpdfa}'s
% \lstinline{Sectioning} table to have that heading as its child
%    \begin{macrocode}
    \ifnum\@tempcnta=\cch@highest@level
      \edef\x{\noexpand\ccaAddToConfig{autoclose}{document={Type:Sectioning}{Child:\csname cch@#1@unique\endcsname}{Egroup:false}}}\x%
    \fi
%    \end{macrocode}
% Then, we catch the lowest level to tell \lstinline{ltpdfa}'s
% \lstinline{Sectioning} table that this level has no
% children. Another switch is made to distinguish first-born heading
% levels from aliases, since the \lstinline{Sectioning} table can only
% hold one heading per level. All other hadings of the same level are,
% per definition, Aliases of the one that has been defined first.
%    \begin{macrocode}
    \ifnum\@tempcnta=\cch@lowest@level\relax
      \ifcsstring{cch@#1@unique}{#2}
        {\edef\x{\noexpand\ccaAddToConfig{autoclose}{#2={Type:Sectioning}{Child:none}{Egroup:false}}}\x}
        {\edef\x{\noexpand\ccaAddToConfig{autoclose}{#2={Type:Sectioning}{Child:none}{Egroup:false}{Alias:\csname cch@#1@unique\endcsname}}}\x}%
    \else
%    \end{macrocode}
% For all higher heading levels, we look for the next lower heading
%    \begin{macrocode}
      \@tempswatrue
      \loop
%    \end{macrocode}
% by incrementing the heading level counter by one
%    \begin{macrocode}
        \advance\@tempcnta\@ne\relax
%    \end{macrocode}
% and checking the variable \lstinline{repeat} condition:
%    \begin{macrocode}
      \if@tempswa
%    \end{macrocode}
% We don't go further when the current loop counter is already larger
% than the heading level with the highest level counter.
%    \begin{macrocode}
        \ifnum\@tempcnta>\cch@lowest@level\relax
          \@tempswafalse
        \else
%    \end{macrocode}
% If we are below the highest level, we check if a heading with the current level is defined
%    \begin{macrocode}
          \expandafter\ifx\csname cch@\the\@tempcnta @unique\endcsname\relax
%    \end{macrocode}
% if not, we continue. This is the case, when heading levels are not
% sequentially numbered. Which does (and did) happen. For reasons
% unknown\dots
%    \begin{macrocode}
            \@tempswatrue
          \else
%    \end{macrocode}
% If the heading level is defined, we configure \lstinline{autoclose}
% such that the level with the iterator counter is set to be the child
% of the current heading level in \lstinline{ltpdfa}'s
% \lstinline{Sectioning} table. As above, we distinguish between
% original headings and Aliases.
%    \begin{macrocode}
            \ifcsstring{cch@#1@unique}{#2}
              {\edef\x{\noexpand\ccaAddToConfig{autoclose}{#2={Type:Sectioning}{Child:\csname cch@\the\@tempcnta @unique\endcsname}{Egroup:false}}}\x}
              {\edef\x{\noexpand\ccaAddToConfig{autoclose}{#2={Type:Sectioning}{Child:\csname cch@\the\@tempcnta @unique\endcsname}{Egroup:false}{Alias:\csname cch@#1@unique\endcsname}}}\x}%
            \@tempswafalse
          \fi
        \fi
%    \end{macrocode}
% We repeat this as long as \lstinline{\@tempswa} is false. This
% ensures that all heading levels have exactly one child assigned to
% them.
%    \begin{macrocode}
      \repeat
    \fi
  }}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\cch@min@level, \cch@max@level,
%   \cch@highest@level, \cch@lowest@level} store the level
%   numbers of the highest and lowest defined heading levels,
%   respectively.  \lstinline|\begin{document}|.
%    \begin{macrocode}
\newcount\cch@min@level \cch@min@level=99\relax
\newcount\cch@max@level \cch@max@level=-99\relax
\ifx\cch@highest@level\@undefined \def\cch@highest@level{99}\fi
\ifx\cch@lowest@level\@undefined  \def\cch@lowest@level{-99}\fi
\AtEndDocument{%
  \immediate\write\@mainaux{\string\gdef\string\cch@highest@level{\the\cch@min@level}}%
  \immediate\write\@mainaux{\string\gdef\string\cch@lowest@level{\the\cch@max@level}}%
}%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\cch@create@parent} stores the heading level's name and its
%   parent, if it exists.
%    \begin{macrocode}
\def\cch@create@parent#1#2{%
  \def\cch@sec@name{#2}%
  \if!#1!\else
    \ccCheckParent{#1}{#2}%
  \fi%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\cch@declare@heading} consists of two parts: In the
%   first part, the inheritance mechanism and the initializers for
%   each new heading level are triggered.
%
%   \#1 is the numeric heading level, \#2 is the name of the heading.
%    \begin{macrocode}
\def\cch@declare@heading#1#2{%
  \ccEvalType{Parent}%
  \ccEvalType{Init}%
%    \end{macrocode}
%
% \begin{macro}{\ccUseHeading} is defined as second step. It is called
%   at the end of each \lstinline{\ccPrefix Heading} environment to process the
%   Components within the Container instance. Each heading level has
%   its own ``version'' of this macro.
%    \begin{macrocode}
  \csgdef{ccUseHeading#2}{%
%    \end{macrocode}
% Since heading levels don't define their own environments, we make
% sure that \lstinline{Heading} is the namespace we are working in.
%    \begin{macrocode}
    \ccSetContainer{Heading}%
    \@setpar{\@@par}%
%    \end{macrocode}
% Properties are stored in macros specific to the current heading
% Sub-Container, therefore we evaluate the level's Properties, not
% those of the \lstinline{Heading} Container. However, since we made
% use of the inheritance mechanism earlier, each Sub-Container's
% Property list also contains the general \lstinline{Heading} Property
% list.
%    \begin{macrocode}
    \def\cchLevel{#1}%
    \ccEvalType[#2]{Properties}%
%    \end{macrocode}
% Processing the author name list (from coco-meta.sty).
%    \begin{macrocode}
    \ccm@role@eval{Author}%
    \ccComposeCollection{Author}{author-contact-block-format}{AuthorContactBlock}%
    \ccComposeCollection{Affil}{affil-block-item-format}{AffilBlock}%
%    \end{macrocode}
% Processing the \lstinline{tpQuote} environments, if any.
%    \begin{macrocode}
    \ccComposeCollection{tpQuote}{quote-block-format}{QuoteBlock}%
%    \end{macrocode}
% Hyperref related stuff.
%    \begin{macrocode}
    \def\Hy@toclevel{#1}%
%    \end{macrocode}
% Call the mechanism to calculate the heading's counter.
%    \begin{macrocode}
    \tp@auto@number{#1}{#2}%
%    \end{macrocode}
% Here, the actual construction of the heading begins.
%    \begin{macrocode}
    \ccUseProperty{heading-par}%
    \cch@use@hook{before-hook}{#2}%
    \ccUseProperty{before-heading}%
%    \end{macrocode}
% Add vertical space before the heading
%    \begin{macrocode}
    \tp@do@before@skip
%    \end{macrocode}
% The counters we calculated earlier and the space needed to render
% them are evaluated
%    \begin{macrocode}
    \cc@format@number{}{}{#1}%
%    \end{macrocode}
% The value of after-skip is essential to determine whether the
% heading is to be displayed as block or inline element. In case, some
% heading definition omits setting a proper value, we build a
% fallback.
%    \begin{macrocode}
    \ccIfProp{after-skip}{\expandafter\global\expandafter\@tempskipa\expandafter=\ccUseProperty{after-skip}\relax}{\global\@tempskipa=1sp\relax}%
    \cch@use@hook{before-print-hook}{#2}%
    \def\@svsec{%
%    \end{macrocode}
% The \lstinline{heading block} is the composition of all of the
% heading's Components that are to be printed where the
% \lstinline{heading} environment is in the source.
%    \begin{macrocode}
      \ccUseProperty{before-heading-block}%
%    \end{macrocode}
% Labels to be used with LaTeX's cross reference mechanism are defined
%    \begin{macrocode}
      \ccCreateLabel{#2}% label facility
      \leftskip\ccUseProperty{margin-left}%
      \rightskip\ccUseProperty{margin-right}%
      \bgroup
        \ccUseProperty{heading-block}%
%    \end{macrocode}
% Generate entries for ToC, bookmarks and page headers. This has to be
% here because in rare cases, abstracts could cause the whole heading
% to spread over more than one page and that results in the ToC entry
% pointing to the last page.
%
% \textbf{Style progammers need to make sure that no page breaks are
% allowed within the \lstinline{heading-block}!}
%    \begin{macrocode}
        \ccIfPropVal{no-toc}{true}{}{\tp@make@toc}% ToC entries
        \ccIfPropVal{no-BM}{true}{}{\tp@make@bookmarks}% Bookmarks
        \ccUseProperty{toc-hook}%
        \ccIfProp{extended}{\ccUseProperty{extended-heading}}{}%
      \egroup%
      \tp@make@run% Running headers
      \ccUseProperty{after-heading-block}%
    }%
%    \end{macrocode}
% Finally, we decide whether the printable material we stored in
% \lstinline{\@svsec} is to be rendered as a block or inline. This is
% adopted from \LaTeX's \lstinline{\@startsection}. The distinction is
% made by the sign of \lstinline{after-skip}: a positive value yields
% a block heading, a negative value yields an inline heading.
%    \begin{macrocode}
    \ifdim\@tempskipa <\z@\relax
      \tp@inline@heading{#2}%
    \else
      \tp@block@heading{#2}%
    \fi
%    \end{macrocode}
% This macro is called at the end of the heading environment. In order
% to deal with possible vertical spaces after the heading, we wait
% until the group of the heading environemnt is closed before we
% actually print the fully composed heading. The definition of
% \lstinline{\next} happens in either \lstinline{\tp@inline@heading}
% or \lstinline{\tp@block@heading}.
%    \begin{macrocode}
    \aftergroup\next%
  }%
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\cch@use@hook} recursively includes a hook \#1 from the heading \#2's parent before expanding its own version.
%    \begin{macrocode}
\def\cch@use@hook#1#2{%
  \expandafter\ifx\csname cc@parent@#2\endcsname\relax\else
    \edef\@cch@parent{#1-\csname cc@parent@#2\endcsname}%
    \expandafter\ccUseHook\expandafter{\@cch@parent}%
  \fi
  \ccUseHook{#1-\cch@sec@name}%
}
%    \end{macrocode}
% \end{macro}
% 
% \begin{macro}{\tp@do@before@skip} is a routine that determins the skip that is inserted before a heading.
%    \begin{macrocode}
\def\tp@do@before@skip{%
  \setlength\@tempskipa{\ccUseProperty{before-skip}}%
  \ifdim\@tempskipa<\z@\relax
    \def\do@skip{\minusvspace{-\@tempskipa}}%
  \else
    \def\do@skip{\addvspace{\@tempskipa}}%
  \fi%
  \if@nobreak
    \everypar{}%
    \do@skip
  \else
    \addpenalty\@secpenalty
    \do@skip
  \fi}
%    \end{macrocode}
% \end{macro}
%
% \subsection{Initializers for New Heading Levels}%
%
% \begin{macro}{\cch@init@hooks} initializes the Hooks for heading
%   level \#1.
%    \begin{macrocode}
\def\cch@init@hooks#1{%
  \ccDeclareHook{toc-before-hook-#1}% Expanded before the toc entry is printed
  \ccDeclareHook{toc-after-hook-#1}% Expanded after the toc entry is printed
  \ccDeclareHook{before-hook-#1}% Expanded before before-heading property is expanded
  \ccDeclareHook{before-print-hook-#1}% Expanded at the very beginning of the local definition of \@svsec
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\cch@init@cnt} initialises a counter with the name \#1
%   for automatic numbering if it doesn't exist, yet.
%    \begin{macrocode}
\def\cch@init@cnt#1{\ifcsname c@#1\endcsname\else\@definecounter{#1}\fi}
%    \end{macrocode}
% \end{macro}
% \subsection{Initializers for Instances of Heading Levels}%
%
% \begin{macro}{\tp@auto@number}
%   advances the heading counter if the \lstinline{numbering} Property
%   is set to \texttt{auto} and the current heading is not overridden
%   by the \lstinline{Number} Component.  \#1 is the numeric level of
%   the heading, \#2 is the name of the heading's counter.
%    \begin{macrocode}
\def\tp@auto@number#1#2{%
  \ccIfPropVal{numbering}{auto}
    {\expandafter\ifx\csname c@#2\endcsname\relax\cch@init@cnt{#2}\fi
     \ccIfAttrIsSet{Heading}{nonumber}
       {}
       {\ccIfComp{Number}
         {}
         {\ifnum #1>\c@secnumdepth\relax\else
            \stepcounter{#2}%
            \edef\@tempa{\csname the#2\endcsname}%
            \expandafter\tpNumber\expandafter{\@tempa}%
          \fi}}
     }{}}
%    \end{macrocode}
% \end{macro}
%
% \section{Externalisation of Heading Compoents}
%
% Components of headings may be used far away from the heading
% itself. Since, by design, Components are defined strictly local
% within their containers, those externale usages demand special
% treatment.
%
% \subsection{Common Stuff}
%
% \begin{macro}{\cch@set@author@name@list} sets the
%   \lstinline{#1AuthorNameList} Component.
%    \begin{macrocode}
\def\cch@set@author@name@list#1{%
%    \end{macrocode}
% first, we look if the Override was given in the \lstinline{Heading}
% Container. If so, we do nothing.
%    \begin{macrocode}
  \ccUnlessComp{#1AuthorNameList}{%
%    \end{macrocode}
% If not, we look whether or not the general
% \lstinline{AuthorNameList} override was given in the \lstinline{Heading}
% Container.
%    \begin{macrocode}
    \ifx\cc@used@AuthorNameList@override\@empty
%    \end{macrocode}
% If yes, then we copy its value to \lstinline{#1AuthorNameList}.
%    \begin{macrocode}
      \ccComponent{#1AuthorNameList}{\cc@Heading@AuthorNameList}%
    \else
%    \end{macrocode}
% Or else, we re-build the \lstinline{#1AuthorNameList} from the raw
% \lstinline{Author} Subcontainers by using the
% \lstinline{author-list-print-format} Property.
%    \begin{macrocode}
      \ifnum\ccAuthorCnt>\z@
        \ccdefFromCountedComp\cch@tempa{Author}{author-list-print-format}%
        \ifx\cch@tempa\relax\else
          \ccComponent{#1AuthorNameList}{\cch@tempa}%
        \fi
      \fi
    \fi
  }}%
%    \end{macrocode}
% \end{macro}
%
% \subsection{Table of Contents Entry}
%
% \begin{macro}{\tp@make@toc} initializes the creation of a
%   \lstinline{Heading} instance's entry in the table of contents.
%
%   Each entry is in itself treated as a Container. As such, it
%   consists of Components that are written into the .toc file.
%    \begin{macrocode}
\def\tp@make@toc{%
  \cc@check@empty{Heading}{Title}{Toc}%
  \cc@check@empty{Heading}{Number}{Toc}%
  \cc@check@empty{Heading}{Subtitle}{Toc}%
  \cch@set@author@name@list{Toc}%
  \ccIfAttrIsSet{Heading}{notoc}{}
    {\protected@edef\cch@toc@entry{%
       \ccIfComp{TocTitle}{\string\ccComponent{TocTitle}{\string\ignorespaces\space\expandonce{\cc@Heading@TocTitle}}}{}%
       \ccIfComp{TocNumber}{\string\ccComponent{TocNumber}{\string\ignorespaces\space\expandonce{\cc@Heading@TocNumber}}}{}%
       \ccIfComp{TocAuthorNameList}{\string\ccComponent{TocAuthorNameList}{\string\ignorespaces\space\expandonce{\cc@Heading@TocAuthorNameList}}}{}%
       \ccIfComp{TocSubtitle}{\string\ccComponent{TocSubtitle}{\string\ignorespaces\space\expandonce{\cc@Heading@TocSubtitle}}}{}%
     }%
     \ccIfProp{toc-level}{\edef\cch@sec@name{\ccUseProperty{toc-level}}}{}%
     \protected@write\@auxout
       {\ccGobble}%
       {\string\@writefile{toc}{\protect\ccContentsline{\cch@sec@name}{\cch@toc@entry}{\thepage}{\@currentHref}\protected@file@percent}}\relax
     \ccCreateContentListEntries{Heading}{\cch@sec@name}{\cch@toc@entry}{\thepage}{\@currentHref}%
     \ccCreateContentListEntries{\cch@sec@name}{\cch@sec@name}{\cch@toc@entry}{\thepage}{\@currentHref}%
   }}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\cc@toc@extract@data} is called within
%   the \lstinline{\l@<level>} macro to extract the Components for
%   each entry in the .toc file. \#1 is the numerical heading level,
%   \#2 is the name of the heading level, \#3 is the content of the
%   toc entry (which holds the Components), \#4 is the page number.
%    \begin{macrocode}
\def\cc@toc@extract@data#1#2#3#4{%
  \ccSetContainer{Heading}%
  \ccEvalType[#2]{Properties}%
  \ccDeclareComponent{TocPage}{}{}%
  \tpTocPage{\ccUseProperty{toc-page-face}#4}%
  \ccDeclareComponent{TocTitle}{}{}%
  \ccDeclareComponent{TocSubtitle}{}{}%
  \ccDeclareComponent{TocNumber}{}{}%
  \ccDeclareComponent{TocAuthorNameList}{}{}%
  \cc@expand@l@contents{#3}{Heading}{Toc}{Title}%%
  \cc@format@number{toc-}{Toc}{#1}%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tp@toc@print@entry} is also called within the
%   \lstinline{\l@<level>} macro and eventually prints the entry by
%   expanding a \lstinline{Heading}'s toc-specific Properties.
%    \begin{macrocode}
\def\cc@toc@print@entry#1{%
  \bgroup
    \ccUseHook{toc-before-hook-#1}%
    \ccUseProperty{toc-before-entry}%
    \ccUseProperty{toc-format}%
    \ccUseHook{toc-after-hook-#1}%
    \ccUseProperty{toc-after-entry}%
  \egroup}
%    \end{macrocode}
% \end{macro}
%
%\subsection{Facility to create the running title macros}
%
% \begin{macro}{\tp@make@run}
%   prepares the Components used to compose the running titles. It
%   checks if the user provides page header specific overrides in the
%   \lstinline{Heading} instance. If not, it uses the non-specific
%   Components instead, as long as they are not empty.
%
%   After all the header-specific Components are set, the heading
%   level specific property \lstinline{running-heading} is evaluated
%   and passed to the corresponding \lstinline{\<level>mark} macros
%   iff they exist.
%    \begin{macrocode}
\def\tp@make@run{%
  \cc@check@empty{Heading}{Title}{Run}%
  \cc@check@empty{Heading}{Number}{Run}%
  \cc@check@empty{Heading}{Subtitle}{Run}%
  \cch@set@author@name@list{Run}%
  \ccUseProperty{running-extra}%
  \ccIfProp{running-level}
    {\letcs\cch@mark@name{\ccUseProperty{running-level}mark}}
    {\letcs\cch@mark@name{\cch@sec@name mark}}%
    \letcs\cch@parent{cc@parent@\cch@sec@name}%
    \ifx\cch@mark@name\@undefined
      \ifx\cch@parent\relax\else
        \letcs\cch@mark@name{\cch@parent mark}%
      \fi
    \fi
  \ifx\cch@mark@name\@undefined\else
    \begingroup
      \ccGobble
      \protected@edef\@tempa{\csname tp@Heading@running-heading\endcsname}%
      \expandafter\cch@mark@name\expandafter{\@tempa}%
    \endgroup
  \fi
}
%    \end{macrocode}
% \end{macro}
%
% \subsection{Facility to create PDF bookmarks}
%
% \begin{macro}{\tp@make@bookmarks} generates an entry that is
%   directly written as Bookmark into the PDF file. This is done using
%   the \lstinline{bookmark} package.
%    \begin{macrocode}
\def\tp@make@bookmarks{%
  \cc@check@empty[Toc]{Heading}{Title}{BM}%
  \cc@check@empty[Toc]{Heading}{Number}{BM}%
  \cc@check@empty[Toc]{Heading}{AuthorNameList}{BM}%
  \cc@check@empty[Toc]{Heading}{Subtitle}{BM}%
  \ccIfAttrIsSet{Heading}{noBM}
    {}
    {\ccIfProp{bookmark-level}{\edef\Hy@toclevel{\ccUseProperty{bookmark-level}}}{}%
     \begingroup
       \ccGobble
       \protected@edef\@tempa{\csname tp@Heading@bookmark\endcsname}%
       \bookmark[level=\Hy@toclevel,dest=\@currentHref]{\expandonce{\@tempa}}%
     \endgroup
   }}
%    \end{macrocode}
% \end{macro}
%
%\section{Rendering the Headings}
%
%\subsection{Inline Headings}
%
% \begin{macro}{\tp@inline@heading}
%   Inline headings are stored in a temporary box and expanded after
%   the next (non-heading) paragraph is opened.
%
%   \#1 is the name of the heading and used for tagging.
%    \begin{macrocode}
\newbox\tp@inlinesecbox
\def\tp@inline@heading#1{%
  \ccIfProp{after-indent}{\global\@afterindenttrue}{\global\@afterindentfalse}%
  \ccIfProp{interline-para}
    {\global\setbox\tp@inlinesecbox\hbox{\ifvoid\tp@inlinesecbox\else\unhbox\tp@inlinesecbox\ccUseProperty{interline-para-sep}\fi\@svsec}}%
    {\global\setbox\tp@inlinesecbox\hbox{\@svsec}}
  \@nobreakfalse
  \global\@noskipsectrue
  \gdef\next{%
    \global\everypar{%
      \if@noskipsec
        \global\@noskipsecfalse
        {\setbox\z@\lastbox}%
        \clubpenalty\@M
        \begingroup
          \ccIfAlly{\ccaVstructStart{#1head}}{}%
          \unhbox\tp@inlinesecbox
          \ccIfAlly{\ccaVstructEnd{#1head}}{}%
        \endgroup
        \unskip
        \hskip -\@tempskipa
      \else
        \clubpenalty \@clubpenalty
        \global\setbox\tp@inlinesecbox\box\voidb@x
        \everypar{}%
      \fi}%
    \ignorespaces}}
%    \end{macrocode}
% \end{macro}
%
%\subsection{Block Headings}
%
% \begin{macro}{\tp@block@heading} is used to print block headings.
%
%   \#1 is the name of the heading and used for tagging.
%    \begin{macrocode}
\def\tp@block@heading#1{%
  \ccIfAlly{\ccaVstructStart{#1head}}{}%
  \@svsec
  \ccIfAlly{\ccaVstructEnd{#1head}}{}%
  \ccUseProperty{after-heading-par}%
  \ccIfProp{after-indent}{\global\@afterindenttrue}{\global\@afterindentfalse}%
  \gdef\next{%
    \ifdim\parskip>\z@\relax\advance\@tempskipa-\parskip\relax\fi
    \vskip \@tempskipa
    \@afterheading
    \ignorespaces}}
%    \end{macrocode}
% \end{macro}
%
% \section{The \protect\texttt{Heading} environment}
%
% \subsection{Environment Macros}
%
%
% \begin{macro}{\cch@heading} is the macro called at the begin of the
%   \lstinline{Heading} environment. Optional \#1 stores the headings
%   local parameters, \#2 is the level of the heading.
%    \begin{macrocode}
\def\cch@heading{\cc@opt@empty\@cch@heading}%
\def\@cch@heading[#1]#2{%
%    \end{macrocode}
% Adding start tags for the contents that ``belong'' to a
% heading. \textbf{Warning}, the following code is incredibly ugly. In
% principle, we close the semi-group opened by \lstinline{begin}, add
% the tagging, and then re-build the rest of the code from older and
% more modern \LaTeX's standard definitions of \lstinline{begin}.
%
% This is necessary, because otherwise we would need to either
% manually add the starting sectioning tag outside the
% \lstinline{\ccPrefix Heading} environment, or, if we want to keep
% \lstinline{ltpdfa}'s \lstinline{autoclose} mechanism, the sectioning
% tag is auto-ended at \lstinline|\end{Heading}|. Using the
% \lstinline{env/Heading/before} hook won't work either, because at
% the time of its expansion, the level of the heading isn't known, yet. So, we
% need to take the ugly road, for now.
%    \begin{macrocode}
  \ccIfAlly
    {\global\let\cch@currenvir\@currenvir
     \endgroup
     \ccaVstructStart{#2}%
     \ifnum\luatexversion>111\relax\UseHook{env/\ccPrefix Heading/before}\fi
     \@ignorefalse
     \begingroup
       \@endpefalse
       \let\@currenvir\cch@currenvir
       \edef\@currenvline{\on@line}%
       \ifnum\luatexversion>111\relax
         \@execute@begin@hook{\ccPrefix Heading}%
       \fi
    }{}%
%    \end{macrocode}
% Some {\LaTeX} kernel macros are saved, the namespace is
% set and counted groups from previous headings are reset.
%    \begin{macrocode}
  \cch@reserve
%    \end{macrocode}
% Handling of the optional argument
%    \begin{macrocode}
  \ccParseAttributes{Heading}{#1}%
%    \end{macrocode}
% and treatment of heading-level specific style classes.
%    \begin{macrocode}
 \ccWhenAttr{Heading}{class}
    {\global\let\cch@current@class\cc@Heading@attr@class% TODO: check if still needed!
     \expandafter\ccUseStyleClass\expandafter{\cc@Heading@attr@class}{Heading}}%
%    \end{macrocode}
% The mandatory argument contains the heading level. This corresponds
% to \LaTeX's way of counting heading levels, where, by default,
% \lstinline{part} is \lstinline{-1}, \lstinline{chapter} is
% \lstinline{0}, \lstinline{section} is \lstinline{1}, etc.
%    \begin{macrocode}
  \edef\cch@sec@name{#2}%
%    \end{macrocode}
% The cascaded Properties of the heading level are expanded. This is
% excluded into its own macro to simplify re-definition if necessary.
%    \begin{macrocode}
  \ccEvalType[#2]{Components}%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\cch@end@heading}
%   is stuff that happens at the end of the \lstinline{Heading}
%   environment.
%    \begin{macrocode}
\def\cch@end@heading{%
  \expandafter\ifx\csname ccUseHeading\cch@sec@name\endcsname\relax
    \PackageError{coco-headings.sty}{Heading level \cch@sec@name\space unknown!}{A Heading with level \cch@sec@name\space is unknown. Use the \string\ccDeclareHeading\space macro to declare heading levels.}%
  \else
    \csname ccUseHeading\cch@sec@name\endcsname%
  \fi
  \cch@reset
}
%    \end{macrocode}
% \end{macro}
%
% \subsection{Content Handlers}
%
% \begin{macro}{\cch@reserve}
%   re-directs some of \LaTeX's kernel macros and makes sure that some
%   other macros have their default values:
%    \begin{macrocode}
\def\cch@reserve{%
  \ccSetContainer{Heading}%
  \let\cch@ltx@dbl@backslash\\
  \let\\\tpBreak
  \let\cc@ltx@label\label
  \def\ccAuthorCnt{\z@}%
  \def\ccAffilCnt{\z@}%
  \cc@reset@components{\cc@cur@cont}%
  }
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\cch@reset} restores \LaTeX's default definitions (however, this
%   should be unnecessary since \lstinline{Heading} is an environment
%   and therefore constitutes a closed group).
%    \begin{macrocode}
\def\cch@reset{%
  \let\cc@cur@cont\relax
  \let\\\cch@ltx@dbl@backslash
  \let\label\cc@ltx@label
  \let\cch@sec@name\relax
  }
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\cch@provide@quotes} covers multiple quotation blocks
%   assocciated with a heading.
%    \begin{macrocode}
\def\cch@provide@quotes{%
  \ccDeclareComponent{QuoteBlock}{}{}%
  \ccDeclareComponentGroup{tpQuote}{%
    \ccDeclareCountedComponent{QuoteText}%
    \ccDeclareCountedComponent{QuoteSource}%
  }%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tp@Heading@role@handlers} sets up the additional Components for the Author Role specific to headings.
%    \begin{macrocode}
\def\cch@provide@authors{%
  \ccAddToRole{Author}{%
    \ccDeclareCountedComponent{AuthorContact}%
  }%
  \ccDeclareRoleBlock{Author}{ContactBlock}{author-contact-block-format}%
  \ccDeclareGroupHandler{Author}{%
    \ccIfComp{AuthorContact}{}{\csname tpAuthorContact\endcsname{\ccUseProperty{author-contact-format}}}{}%
  }%
  \cc@provide@overrides{AuthorNameList}%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\cch@provide@comp} is a wrapper that creates the
%   user-level macros for the Component itself and its overrides. \#1
%   is the Component name.
%    \begin{macrocode}
\def\cch@provide@comp#1{%
  \ccDeclareComponent{#1}{}{}%
  \cc@provide@overrides{#1}%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\cc@provide@overrides} declares the Component
%   macros for a Heading Component's overrides. \#1 is the Component
%   name. The overrides allow a four-way distinction between
%   \textit{i} the data printed in-situ (\lstinline{\tp#1}), \textit{ii} data sent
%   to toc (\lstinline{\tpToc#1}), (iii) data sent to the page styles (\lstinline{\tpRun#1}), and (iv) the data sent
%   to the PDF bookmarks (\lstinline{\tpBM#1}).
%    \begin{macrocode}
\def\cc@provide@overrides#1{%
  \ccDeclareComponent{Toc#1}{}{}% toc overrides
  \ccDeclareComponent{Run#1}{}{}% running overrides
  \ccDeclareComponent{BM#1}{}{}% bookmark overrides
}
%    \end{macrocode}
% \end{macro}
%
% \section{Defaults}
%
%    \begin{macrocode}
\ccAddToProperties{Heading}{%
  \ccSetProperty{interline-para}{}%
  \ccSetProperty{interline-para-sep}{\space}
  \ccSetProperty{heading-par}{%
    \ccIfProp{interline-para}{\if@noskipsec \leavevmode \fi}{}%
    \par
    \global\@afterindenttrue
  }%
  \ccSetProperty{after-heading-par}{\par \nobreak}% par commands at the end of non-inline headings
  \ccSetProperty{before-heading}{}%
  \ccSetProperty{title-face}{\bfseries}%
  \ccSetProperty{subtitle-face}{\normalfont}%
  \ccSetProperty{author-face}{\normalfont}%
  \ccSetProperty{quote-face}{\raggedleft}%
  \ccSetProperty{quote-source-face}{}%
  \ccSetProperty{quote-block-format}{%
    \bgroup
      \ccUseProperty{quote-face}%
      \ccUseComp{QuoteText}\par
      \ccIfComp{QuoteSource}{{\ccUseProperty{quote-source-face}--\space\ccUseComp{QuoteSource}}\par}{}%
    \egroup}
  \ccSetProperty{heading-block}
    {\ccUseProperty{title-face}%
     \ccIfComp{Number}
       {\ccUseProperty{hang-number}}
       {\leftskip0pt}%
     \ccUseComp{Title}\par%
     \ccIfComp{Subtitle}{{\ccUseProperty{subtitle-face}\ccUseComp{Subtitle}}\par}{}%
     \ccIfComp{AuthorNameList}{{\ccUseProperty{author-face}\ccUseComp{AuthorNameList}}\par}{}%
     \ccIfComp{QuoteBlock}{\ccUseComp{QuoteBlock}}{}%
     \ccIfComp{AffilBlock}{{\ccUseProperty{affil-block-face}\ccUseComp{AffilBlock}}\par}{}%
    }%
  \ccSetProperty{extended-heading}{%
    \ccIfComp{Abstract}
      {\par\vskip\baselineskip
       {\bfseries\ccIfComp{AbstractLabel}{\ccUseComp{AbstractLabel}}{Abstract}}\par
       {\itshape\small\ccUseComp{Abstract}}\par}
      {}%
    \ccIfComp{Keywords}
      {\par\vskip\baselineskip
       {\bfseries\ccIfComp{KeywordsLabel}{\ccUseComp{KeywordsLabel}}{Keywords}}\par
       {\itshape\small\ccUseComp{Keywords}\par}}
     {}%
   }%
  \ccSetProperty{before-skip}{\z@skip}% TODOC: values < 0pt use \minusvspace, else \addvspace. LaTeX's default behaviour of @afterindent is relocated to the after-indent property.
  \ccSetProperty{after-heading-block}{}%
  \ccSetProperty{before-heading-block}{\parindent\z@ \parskip\z@}%
  \ccSetProperty{toc-hook}{}% Called, after ToC and BM entries have been written to the .aux file
  \ccSetProperty{after-indent}{}%
  \ccSetProperty{margin-left}{}%
  \ccSetProperty{margin-right}{\@flushglue}%
  \ccSetProperty{after-skip}{1sp}%
  \ccSetProperty{indent}{auto}%
  \ccSetProperty{number-width}{}%
  \ccSetProperty{number-sep}{\space}%
  \ccSetProperty{number-align}{left}%
  \ccSetProperty{number-format}{%
    \bgroup
      \ccUseProperty{title-face}%
      \ccUseProperty{number-face}%
      \ccUseComp{Number}%
      \ccUseProperty{number-sep}%
    \egroup}
  \ccSetProperty{numbering}{auto}%
  %% running header
  \ccSetProperty{running-level}{}% override level for running title, name
  \ccSetProperty{running-heading}{%
    \ccIfComp{RunAuthorNameList}{\ccUseComp{RunAuthorNameList}:\space}{}%
    \ccUseComp{RunTitle}%
  }%
  %% ToC
  \ccSetProperty{no-toc}{false}% toc entries are generally disabled iff true
  \ccSetProperty{no-BM}{false}% bookmark entries are generally disabled, iff true
  \ccSetProperty{toc-margin-top}{\z@}% left indent of the whole entry
  \ccSetProperty{toc-margin-bottom}{\z@}% bottom margin of the whole entry
  \ccSetProperty{toc-margin-left}{auto}% left indent of the whole entry
  \ccSetProperty{toc-margin-right}{\@pnumwidth}% right margin of the whole entry
  \ccSetProperty{toc-title-face}{}% appearance of title
  \ccSetProperty{toc-indent}{auto}% offset of the first line of the entry. auto: hang indent by max-number-width for the level
  \ccSetProperty{toc-number-width}{}% current width of the TocNumber
  \ccSetProperty{toc-number-align}{left}% alignment of TocNumber within the hbox when hanging
  \ccPropertyLet{toc-number-face}{toc-title-face}% appearance of the TocNumber
  \ccSetProperty{toc-number-sep}{\enskip}% thing between TocNumber and TocTitle
  \ccSetProperty{toc-number-format}{% Format of the TocNumber
    \bgroup
      \ccUseProperty{toc-number-face}%
      \ccUseComp{TocNumber}%
      \ccUseProperty{toc-number-sep}%
    \egroup}
  \ccSetProperty{toc-page-sep}{\dotfill}% between TocTitle and the page counter
  \ccSetProperty{toc-page-face}{}% appearance of the page value
  \ccSetProperty{toc-page-format}{% format of the page value
    \ccUseProperty{toc-page-sep}%
    \bgroup
      \ccUseProperty{toc-page-face}%
      \ccUseComp{TocPage}%
    \egroup}%
  \ccSetProperty{toc-link}{none}% should toc entries be linked? values: none,title,page,all
  \ccSetProperty{toc-level}{}% override heading level for ToC, name!
  \ccSetProperty{toc-before-entry}{% stuff before anything is output; used to setup margins, alignment, line-breaking rules, etc.
    \addvspace{\ccUseProperty{toc-margin-top}}%
    \parindent \z@
    \let\\\@centercr
    \hyphenpenalty=\@M
    \rightskip \ccUseProperty{toc-margin-right} \@plus 1fil\relax
    \parfillskip -\rightskip
    \leftskip\ccUseProperty{toc-margin-left}%
  }%
  \ccSetProperty{toc-after-entry}{\par\addvspace{\ccUseProperty{toc-margin-bottom}}}% Thing at the end of the entry, after the page number
  \ccSetProperty{toc-format}{% Order and formatting of the entry itself
    \ccUseProperty{toc-title-face}%
    \ccIfComp{TocNumber}
      {\ccUseProperty{toc-hang-number}}
      {\leftskip0pt\leavevmode}%
    \ccIfComp{TocAuthorNameList}{\ccUseComp{TocAuthorNameList}:\space}{}%
    \ccUseComp{TocTitle}%
    \ccUseProperty{toc-page-format}%
  }%
  %% PDF-Bookmarks
  \ccSetProperty{bookmark-level}{}% override heading level for PDF bookmarks, numeric!
  \ccSetProperty{bookmark}{%
    \ccIfComp{BMNumber}{\ccUseComp{BMNumber}\space}{}%
    \ccUseComp{BMTitle}%
  }%
  \ccSetProperty{orcid-link}{% how the ORC-ID is rendered
    \ccIfComp{ORCID}{\def\tp@Linkimg{\includegraphics[height=1em]{logos/ORCID.pdf}}\ccCompLink{ORCID}{\tp@Linkimg}}{}%
  }%
  %% a single Author's contact infomration block
  \ccSetProperty{author-contact-format}{%Format of a single author's contact information
    \ccUseComp{FullName}\ccWhenComp{RefAffil}{\textsuperscript{\ccUseComp{AffilRef}}}%
    \ccUseProperty{orcid-link}%
  }%
  \ccPropertyLet{author-list-format}{author-list-print-format}%
  \ccSetProperty{author-contact-block-format}{% Format of the whole contact information block
    \ccUseComp{AuthorContact}\ifnum\ccCurCount<\ccTotalCount\ccUseProperty{counted-name-sep}\fi
  }%
}
%    \end{macrocode}
%
% \section{Miscellaneous}
%
% \subsection{Alternative paragraph separation}
%
% \begin{macro}{\tpNewPar} is a user-level macro to have a vertical
%   skip between two local paragraphs and no indent in the second
%   one. The amount of vertical space between the paragraphs can be
%   adjusted with the optional argument. If \#1 is omitted,
%   \lstinline{\tpnewparskip} is inserted, which defaults to
%   \lstinline{1\baselineskip} if the dimension isn't set to something
%   other than 0pt in the preamble. This macro is intended to be used
%   at the end of the first of the paragraphs.
%    \begin{macrocode}
\newdimen\tpnewparskip \AtBeginDocument{\ifdim\tpnewparskip=\z@\relax \tpnewparskip=1\baselineskip\relax\fi}
\def\tpNewPar{\@ifnextchar[{\@tpnewpar}{\@tpnewpar[\the\tpnewparskip]}}%]
\def\@tpnewpar[#1]{%
  \ifhmode\par\fi
  \vskip#1\relax
  \@afterheading
}
%    \end{macrocode}
% \end{macro}
% \Deprecated
% \begin{macro}{\TitleBreak}
%    \begin{macrocode}
\let\TitleBreak\tpBreak
%    \end{macrocode}
% \end{macro}
%    \begin{macrocode}[gobble=1]
%</headings>
%    \end{macrocode}
