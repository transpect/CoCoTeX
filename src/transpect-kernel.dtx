% \chapter{transpect-kernel.dtx}
% This file provides the object-oriented interfaces for all other
% transpect-tex modules.
%    \begin{macrocode}[gobble=1]
%<*kernel>
%    \end{macrocode}
% \section*{package Options}
%
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[2018/12/01]
\ProvidesPackage{transpect-kernel}
    [\filedate \fileversion le-tex transpect kernel]
\newif\if@tp@debug \@tp@debugfalse
\DeclareOption{debug}{\global\@tp@debugtrue}%
\ProcessOptions
%    \end{macrocode}
% \section*{Hard dependencies}
%    \begin{macrocode}
\RequirePackage{etoolbox}
%    \end{macrocode}
% \section{Exception handlers}
%    \begin{macrocode}
\def\tpKernelDebugMsg#1{\if@tp@debug\message{[tp Kernel Debug]\space\space#1^^J}\fi}
\def\tpPackageError#1#2#3#4{%
   \GenericError{%
      (#1)\@spaces\@spaces\@spaces\@spaces
   }{%
      [tp #1 #2 Error] #3%
   }{}{#4}%
}

%    \end{macrocode}
% \section{Containers}
%    \begin{macrocode}

%    \end{macrocode}
%
% This is the constructor for new Containers
% \begin{description}
% \item[\#1] Container name
% \item[\#2] Body
% \end{description}
%    \begin{macrocode}

\long\def\tpDeclareContainer#1#2{%
  \@namedef{tp@container@#1}{}%
  \begingroup
    \def\tpInherit ##1 from ##2;{\@tp@inherit{##1}{##2}{#1}}%
    \def\tpDeclareEnv##1##2{\@namegdef{#1}{\def\tp@namespace{#1}##1}\@namegdef{end#1}{##2}}%
    \def\tpDeclareType##1##2{%
      \expandafter\ifx\csname tp@type@##1@#1\endcsname\relax
        \@namegdef{tp@type@##1@#1}{##2}%
      \else
        \gcsappto{tp@type@##1@#1}{##2}%
      \fi
    }%
    \def\x{%
      #2%
    }%
  \expandafter\x\endgroup
}

\def\tpEvalType#1{%
  \tpKernelDebugMsg{Evaluating tp@type@#1@\tp@namespace:^^J \expandafter\meaning\csname tp@type@#1@\tp@namespace\endcsname}%
  \csname tp@type@#1@\tp@namespace\endcsname
}

\def\tpCheckParent#1#2{%
  \expandafter\ifx\csname tp@container@#1\endcsname\relax
    \tpPackageError{Kernel}{Class}
    {Parent Container `#1' undeclared}
    {You tried to make a Container named `#2' inherit from a Container named `#1', but a Container with that name does not exist.\MessageBreak
     Please make sure that parent Containers are declared before their descendents.}%
  \else
    \@namedef{tp@parent@#2}{#1}%
  \fi
}
%    \end{macrocode}
% low-level inherit function. \#1 is a comma-separated list of things
% to be inherited, and \#2 is the Container-list that should be
% inherited from, and \#3 is the name of the descending Container.
%    \begin{macrocode}
\def\@tp@inherit#1#2#3{\@tp@parse@inherit #1,,\@nil #2,,\@nil #3\@@nil}
\def\@tp@parse@inherit #1,#2,\@nil #3,#4,\@nil #5\@@nil{%
  \let\next\relax
  \if!#1!\else
    \if!#3!\else
      \tp@do@inherit{#1}{#3}{#5}%
      \def\@argii{#2}\def\@argiv{#4}%
      \ifx\@argii\@empty
        \ifx\@argiv\@empty\else
          \def\next{\@tp@parse@inherit #1,,\@nil #4,\@nil #5\@@nil}%
        \fi
      \else
        \ifx\@argiv\@empty
          \def\next{\@tp@parse@inherit #2,\@nil #3,,\@nil #5\@@nil}%
        \else
          \def\next{%
            \@tp@parse@inherit #1,,\@nil #4,\@nil #5\@@nil
            \@tp@parse@inherit #2,\@nil #3,#4,\@nil #5\@@nil
          }%
        \fi\fi\fi\fi
  \next}

\def\tp@do@inherit#1#2#3{%
  \tpKernelDebugMsg{#3 inherits #1 from #2.}%
  \tpCheckParent{#2}{#3}%
  \expandafter\ifx\csname tp@type@#1@#2\endcsname\relax
    \tpPackageError{Kernel}{Type}{Type `#1' was not declared}{Type `#1' was not declared for Container `#2'.}%
  \else
    \edef\x{\noexpand\gcsappto{tp@type@#1@#3}}%
    \expandafter\expandafter\expandafter\x\expandafter\expandafter\expandafter{\csname tp@type@#1@#2\endcsname}%
    \tpKernelDebugMsg{value tp@type@#1@#3:^^J \expandafter\meaning\csname tp@type@#1@#3\endcsname}%
  \fi
}

%    \end{macrocode}
% \section{Helper macros}
%    \begin{macrocode}
\def\@namegdef{\global\@namedef}
\def\gcsappto{\global\csappto}

%    \end{macrocode}
% \subsection{Iterators}
% This macro traverses in \#1-th steps (optional, defaults to $+1$)
% through counter \#2 start at number \#3 until and including number
% \#4 and do at every loop \#5 (from \lstinline{forloop.sty}):
%    \begin{macrocode}
\long\def\tp@iterate{\@ifnextchar[{\@tp@iterate}{\@tp@iterate[\@ne]}}%]
\long\def\@tp@iterate[#1]#2#3#4#5{%
  \advance#2 by #1\relax
  #2=#3\relax%
  \expandafter\ifnum#2>#4\relax%
  \else
    #5%
    \tp@iterate[#1]{#2}{\the#2}{#4}{#5}%
  \fi}%
%    \end{macrocode}
% \section{Legacy Functions}
%    \begin{macrocode}
 \def\tpNamespace#1{\def\tp@namespace{#1}}
 %\let\tp@namespace\tp@container@name
%    \end{macrocode}
%    \begin{macrocode}[gobble=1]
%</kernel>
%    \end{macrocode}
