% \chapter{coco-common.dtx}
% This file provides some macros that are used in more than one
% {\CoCoTeX} module.
%
%    \begin{macrocode}[gobble=1]
%<*common>
%    \end{macrocode}
%    \begin{macrocode}
%%
%% module for CoCoTeX that provides some commonly used base macros.
%%
%% Maintainer: p.schulz@le-tex.de
%%
%% lualatex  -  texlive > 2019
%%
\NeedsTeXFormat{LaTeX2e}[2018/12/01]
\ProvidesPackage{coco-common}
    [\filedate \fileversion CoCoTeX common module]
\RequirePackage{iftex}
%    \end{macrocode}
% \section{Package options}
%
% \subsection{Accessibility Features}
%
% The option \lstinline{a11y} triggers loading of the {\CoCoTeX}
% Accessibility Module and its features.
%    \begin{macrocode}
\DeclareOptionX{a11y}{\let\cc@do@ally\relax}
%    \end{macrocode}
% Default color encoding passed as option to the \lstinline{xcolor}
% package.
%    \begin{macrocode}
\def\tp@color@enc{cmyk}
\define@choicekey{coco-common.sty}{color-enc}[\@tp@color@enc\nr]{srgb,rgb,gray,cmy,cmyk,natural}[cmyk]{%
  \let\tp@color@enc\@tp@color@enc
  \ifcase\nr\relax% srgb
    \def\tp@color@enc{rgb}%
  \or% rgb
  \or% gray
  \or% cmy
    \def\tp@color@enc{cmyk}%
  \or% cmyk
  \else% natural, i.e. no conversion of color spaces takes place
  \fi
}
\ProcessOptionsX
\PassOptionsToPackage{\tp@color@enc}{xcolor}%
%    \end{macrocode}
% \begin{macro}{\tpIfAlly} is a switch to distinct between compilation
%   with (implicit \#1) or without (implicit \#2) activated accessibility features.
%    \begin{macrocode}
\def\cc@if@ally{\ifx\cc@do@ally\relax\expandafter\@firstoftwo\else\expandafter\@secondoftwo\fi}
\let\ccIfAlly\cc@if@ally
\def\cc@if@preamble{\ifx\@nodocument\relax\expandafter\@secondoftwo\else\expandafter\@firstoftwo\fi}
\let\tpIfPreamble\cc@if@preamble
%    \end{macrocode}
% \end{macro}
%
% \section{Commonly Used Low-Level Macros and Registers}
% Contains common macros used in the {\CoCoTeX} modules and that
% are intended for macro and stylesheet programming.
%    \begin{macrocode}
\RequirePackage{coco-kernel}
%    \end{macrocode}
% \subsection{Hard Dependencies}
% Hard requirements for all {\CoCoTeX} modules:
%    \begin{macrocode}
\RequirePackage{xcolor}
%    \end{macrocode}
% Including the \lstinline{graphicx} package and catching case-insensitive
% graphics file's endings from Word:
%    \begin{macrocode}
\RequirePackage{graphicx}
\DeclareGraphicsRule{.EPS}{eps}{.EPS}{}
%    \end{macrocode}
%
% \subsection{Common Variables}
%
% \subsubsection{String Variables for Value Comparisions}
% \begin{macro}{\tp@str@default}
%    \begin{macrocode}
\def\tp@str@default{default}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tp@str@table}
%    \begin{macrocode}
\def\tp@str@table{table}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tp@str@figure}
%    \begin{macrocode}
\def\tp@str@figure{figure}
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Box Registers}
% Some temporary boxes that won't interfere with LaTeX's temporary
% boxes.
% \begin{macro}{\tp@tempboxa}
%    \begin{macrocode}
\newbox\tp@tempboxa
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tp@tempboxb}
%    \begin{macrocode}
\newbox\tp@tempboxb
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Length and Skip Registers}
% \begin{macro}{\tp@tempskipa}
%    \begin{macrocode}
\newskip\tp@tempskipa
%    \end{macrocode}
% \end{macro}
% \subsection{Helper macros}
% \begin{macro}{\afterfi} used to execute code after the next \lstinline{\fi}:
%    \begin{macrocode}
\def\afterfi#1\fi{\fi#1}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\cc@topstrut} is a \lstinline{\strut} that has the
%   height of \lstinline{\topskip} and the depth of the difference
%   between the \lstinline{\baselineskip} and \lstinline{\topskip}.
%    \begin{macrocode}
\def\cc@topstrut{\vrule\@width\z@\@height\topskip\@depth\dimexpr\baselineskip-\topskip\relax}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\afterbox}
%   prevents indentation and additional spacing after
%   environments. Intended to be used in combination with
%   \lstinline{\aftergroup}.
%    \begin{macrocode}
\def\@afterbox{%
  \everypar{%
    \if@nobreak
      \@nobreakfalse
      \clubpenalty \@M
      \if@afterindent \else
        {\setbox\z@\lastbox}%
        \everypar{}%
      \fi
    \else
      \clubpenalty \@clubpenalty
      {\setbox\z@\lastbox}%
      \everypar{}%
    \fi}}
%    \end{macrocode}
% \end{macro}
%
% \subsection{Masks}
% These macros are intended to mask non-content markup, like page- or
% line breaking commands in order to find and remove or alter them
% easier.
% \begin{macro}{\hack} intended to mask line breaking macros.
%    \begin{macrocode}
\let\hack\@firstofone
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\hackfor} intended to hide line breaking macros.
%    \begin{macrocode}
\let\hackfor\@gobble
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\Hack} intended to mask page breaking macros.
%    \begin{macrocode}
\let\Hack\@firstofone
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\Hackfor} intended to hide page breaking macros.
%    \begin{macrocode}
\let\Hackfor\@gobble
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@gobbleopt} intended to nullify a macro's argument
%   with a possible optional argument interfering.
%
%   Use it like this:
%   \lstinline{\let\yourMacroWithOptArg\@gobbleopt}
%    \begin{macrocode}
\long\def\@gobbleopt{\@ifnextchar[\@@gobbleopt{\@@gobbleopt[]}}%]
\long\def\@@gobbleopt[#1]#2{}%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tpGobble} is used to de-activate certain macros to
%   prevent them from being called multiple times while processing
%   contents. An example is a footnote inside a caption while
%   calculating the height of the caption. In this case, we need the
%   space the footnote symbol requires without the actual footnote
%   being written into the footnote insert, since that should happen
%   when we actually print the caption.
%    \begin{macrocode}
\def\tpGobble{%
  \renewcommand\footnote[2][\the\c@footnote]{\def\@thefnmark{##1}\@makefnmark}%
  \renewcommand\index[2][]{}%
  \renewcommand\marginpar[2][]{}%
  \renewcommand\glossary[2][]{}%
  \let\hypertarget\@gobbletwo
  \let\label\@gobble
}%
%    \end{macrocode}
% \end{macro}
% \subsection{Arithmetics}
% \begin{macro}{\CalcRatio} is used to calculate the ratio between two
%   integers.
%    \begin{macrocode}
\def\CalcRatio#1#2{\strip@pt\dimexpr\number\numexpr\number\dimexpr#1\relax*65536/\number\dimexpr#2\relax\relax sp}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\CalcModulo} is used to calculate the remainder of
%   integer division of \#1 by \#2.
%   This needs a different approach than the common modulo definition,
%   which would return negative results in some cases, as TeX
%   rounds up the quotient of \#1 and \#2 if the first decimal
%   place is equal to or greater 5.
%    \begin{macrocode}
\def\CalcModulo#1#2{\number\numexpr#1+#2-((#1+#2/2)/#2)*#2\relax}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\minusvspace}
%   Counterpart to \LaTeX's \lstinline{\addvspace}: if the value of
%   \lstinline{\minusvspace} is larger than \lstinline{\lastskip},
%   \lstinline{\lastskip} is used. Otherwise, the value of
%   \lstinline{\minusvspace} is used.
%    \begin{macrocode}
\def\@xminusvskip{%
  \ifdim\lastskip<\@tempskipb
  \else
    \ifdim\lastskip<\z@
    \else
      \ifdim\@tempskipb<\z@
        \advance\@tempskipb\lastskip
      \fi
      \vskip-\lastskip
      \vskip \@tempskipb
    \fi
  \fi}
\def\minusvspace#1{%
  \ifvmode
     \if@minipage\else
       \ifdim \lastskip =\z@
%    \end{macrocode}
% Compatibility to texlive pre 2020:
%    \begin{macrocode}
         \ifx\@vspace@calcify\@undefined
           \vskip #1\relax
         \else
           \@vspace@calcify{#1}%
         \fi
       \else
       \setlength\@tempskipb{#1}%
         \@xminusvskip
       \fi
     \fi
  \else
    \@noitemerr
  \fi}
%    \end{macrocode}
% \end{macro}
% \subsection{Determine actual page number}
%
% We need to determine the real page a floating object is
% printed. This mechanism is largely an adaption of the mechanism used
% in the \lstinline{marginnote} package.
%
% Counting absolute page numbers, however, may be misleading when the
% \lstinline{coco-title} module is loaded and the cover page is not followed
% by an empty page. Therefore, we save the default page counter from
% {\LaTeX} to evaluate it independently from the actual manner of
% counting.
% \begin{macro}{\the@tp@thispage}
%    \begin{macrocode}
\def\the@tp@thispage{}%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tp@abspage}
%    \begin{macrocode}
\newcount\tp@abspage \tp@abspage\z@
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\thetp@abspage}
%    \begin{macrocode}
\def\thetp@abspage{\the\tp@abspage}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\if@tp@odd}
%    \begin{macrocode}
\newif\if@tp@odd \@tp@oddtrue
%    \end{macrocode}
% \end{macro}
%    \begin{macrocode}
\AtBeginDocument{%
  \global\tp@abspage=\c@page\relax%
  \g@addto@macro\@outputpage{\global\tp@abspage\c@page}%
}
%    \end{macrocode}
% \begin{macro}{\tp@test@page}
% We split this into two parts. The first one is run before the
% floating object is placed. It will store the page according to the
% placement in the tex source code.
%    \begin{macrocode}
\def\tp@test@page{%
  \expandafter\ifx\csname the@tp@thispage\endcsname\@empty
    \gdef\the@tp@atthispage{1}%
  \else
    \expandafter\ifnum \the@tp@thispage=\tp@abspage%
      \begingroup
        \@tempcnta\the@tp@atthispage\relax
        \advance\@tempcnta\@ne\relax
        \xdef\the@tp@atthispage{\the\@tempcnta}%
      \endgroup
    \else
      \gdef\@tp@atthispage{1}%
    \fi
  \fi
  \xdef\the@tp@thispage{\the\tp@abspage}%
  \let\@tp@currpage\relax
  \expandafter\ifx\csname \tp@cur@cont-\the@tp@thispage-\the@tp@atthispage\endcsname\relax
    \ifodd\tp@abspage\relax\@tp@oddtrue\else\@tp@oddfalse\fi
  \else
    \edef\@tp@currpage{\expandafter\expandafter\expandafter\@firstofone\csname \tp@cur@cont-\the@tp@thispage-\the@tp@atthispage\endcsname}%
    \ifodd\@tp@currpage\relax\@tp@oddtrue\else\@tp@oddfalse\fi
  \fi
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tp@save@page}
% the second macro writes the actual position of the floating object
% into the aux files. This macro has to be placed inside the float
% environment/macro.
%    \begin{macrocode}
\def\tp@save@page{%
  \protected@write\@auxout{\def\the@tp@cur@cont{\tp@cur@cont}\let\thetp@abspage\relax}{%
    \string\expandafter\string\gdef\string\csname\space \tp@cur@cont-\the@tp@thispage-\the@tp@atthispage\string\endcsname{\thetp@abspage}}%
}
%    \end{macrocode}
% \end{macro}
%
% \section{Re-Thinking {\LaTeX} Core Functions}
%
% \subsection{Keeping .aux-Files Up-to-Date}
%
% \begin{macro}{\tpBreak}
%   is a general line break macro intended to be re-defined if
%   necessary without touching LaTeX's kernel page and line breaking
%   macros.
%    \begin{macrocode}
\DeclareRobustCommand{\tpBreak}{\hfill\break}
%    \end{macrocode}
% \end{macro}
%
% \subsection{Content lists}
%
% \subsubsection{Default {\LaTeX} Content Lists}
%
% This part contains macros to ``simplify'' the generation of content
% lists like the Table of Contents or List of Figures/Tables, etc.
%
% Entries in the list-files (e.\,g., \lstinline{\jobname.toc},
% \lstinline{\jobname.lof}, etc.) usually contain
% \lstinline{\contentsline} macros that expand to
% \lstinline{l@<level>}.  Whenever a level of Components that are to
% be written into content lists is declared, the package automatically
% generates a \lstinline{\tp@l@<level>} macro for this level of entries.
% The content-baring argument of \lstinline{\tpContentsline} (or
% \lstinline{\tp@l@<level>}, resp.) contains Components.
%
% Once a list file is read, those \lstinline{\tp@l@<level>} macros are
% expanded in two steps. Each entry constitutes a Container in its own
% right. It therefore can have multiple Components. The first step is
% the extraction phase, where the entry's Container is dynamically
% declared, the corresponding properties are initialised, and its
% Components are extracted
%
% \begin{macro}{\tp@init@l@}
%   is a low-level macro used to dynamically define
%   \lstinline{\tp@l@<level>} macros. Optional \#1 is an override for
%   counters that have to be restored, \#2 is the list file ending
%   (raw entries being stored in a file \lstinline{\jobname.#2}), \#3
%   is a number that indicated the nesting depth, \#4 is the nested
%   level's unique name.
%    \begin{macrocode}
\def\tp@init@l@{\cc@opt@empty\@tp@init@l@}%
\def\@tp@init@l@[#1]#2#3#4{%
  \expandafter\ifx\csname c@#2depth\endcsname\relax
    \expandafter\global\expandafter\newcount\csname c@#2depth\endcsname
    \expandafter\global\csname c@#2depth\endcsname=0\relax
  \fi
  \expandafter\ifx\csname tp@#2@extract@data\endcsname\relax
    \expandafter\let\csname tp@#2@extract@data\endcsname\tp@extract@generic
  \fi
  \expandafter\ifx\csname tp@#2@print@entry\endcsname\relax
    \expandafter\let\csname tp@#2@print@entry\endcsname\tp@print@generic
  \fi
  \expandafter\long\expandafter\gdef\csname tp@l@#4\endcsname##1##2{%
    \ifLuaTeX\suppresslongerror=1\fi
    \expandafter\ifnum \csname c@#2depth\endcsname<#3\relax
    \else
      \bgroup
        \cc@if@ally
          {\long\def\tpTocLink####1{\hyper@linkstart[####1]{link}{\Hy@tocdestname}{####1}\hyper@linkend}}
          {\long\def\tpTocLink####1{\hyper@linkstart{link}{\Hy@tocdestname}{####1}\hyper@linkend}}%
        \csname tp@#2@extract@data\endcsname{#3}{#4}{##1}{##2}%
        \csname tp@#2@print@entry\endcsname{#4}%
      \egroup
    \fi
    \ifLuaTeX\suppresslongerror=0\fi
  }}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tpContentsline} has two purposes: It re-directs
%   \lstinline{l@<level>} macros to our own version, and it ensures
%   that {\LaTeX} won't break if Components in the content lists
%   contain \lstinline{\par}. In order for the latter to work
%   correctly, however, we need to patch \lstinline{\contentsline} to
%   make it \lstinline{\long}, first.
%    \begin{macrocode}
\AtBeginDocument{%
  \begingroup\toks0=\expandafter{\contentsline{#1}{#2}{#3}{#4}}
  \edef\x{\endgroup\long\def\noexpand\contentsline##1##2##3##4{\the\toks0 }}\x
}
\long\def\tpContentsline#1#2#3#4{\bgroup\csletcs{l@#1}{tp@l@#1}\contentsline{#1}{#2}{#3}{#4}\egroup}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tp@extract@generic}
%    \begin{macrocode}
\def\tp@extract@generic#1#2#3#4{}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tp@print@generic}
%    \begin{macrocode}
\def\tp@print@generic#1{}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tp@expand@l@contents}
%   expands the content of the \lstinline{tp@l@<level>} macro and contains some code
%   to catch and handle standard \LaTeX\ headings. \#1 is the content
%   of the \lstinline{tp@l@}-macro, \#2 is the namespace, \#3 is the Component
%   prefix and \#4 is the name of the Content component.
%    \begin{macrocode}
\def\tp@expand@l@contents#1#2#3#4{%
  \global\let\tp@tempa\relax
  \sbox\z@{\def\numberline##1{\xdef\tp@tempa{\noexpand\csdef{tp@#2@#3Number}{##1}}}#1}%
  \ifdim\wd\z@>\z@
    \let\numberline\@gobble%
    \protected@csedef{tp@#2@#3#4}{#1}%
    \tp@tempa
  \else
    #1%
  \fi
  \global\let\tp@tempa\relax
}
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Custom Content Lists}
%
% \begin{macro}{\ccDeclareExtraToc} provides an interface for
%   additional content lists. \#1 is the name of the custom content,
%   \#2 is a comma separated list of container names, the instances of
%   which should be listed in the custom contents list.
%    \begin{macrocode}
\def\ccDeclareContentList#1#2{%
  \def\cc@add@extra@cl##1{%
    \expandafter\ifx\csname cc@##1@extra@cl\endcsname\relax
      \csgdef{cc@##1@extra@cl}{#1}%
    \else
      \csgappto{cc@##1@extra@cl}{,#1}%
    \fi}%
  \edef\@argii{#2}%
  \cc@parse@csv\cc@add@extra@cl{@argii}%
  \expandafter\newwrite\csname cc@cl@#1\endcsname\relax
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ccCreateContentListEntries} creates entries for
%   Custom Content Lists. It is called during the proccessing of a
%   container's instance. \#1 is the name of the calling Container,
%   \#2 is the name of the file stream, \#3 is the level of the entry,
%   \#4 is the current page counter, \#5 is the current Hyperref label.
%    \begin{macrocode}
\def\ccCreateContentListEntries#1#2#3#4#5{%
  \def\cc@add@extra@cl##1{%
    \expandafter\protected@write\csname cc@cl@##1\endcsname
      {\tpGobble}%
      {\protect\tpContentsline{#2}{#3}{#4}{#5}\protected@file@percent}\relax
  }%
  \ifcsdef{cc@#1@extra@cl}{%
    \cc@parse@csv\cc@add@extra@cl{cc@#1@extra@cl}}{}%
}

%    \end{macrocode}
% \end{macro}
%
% \subsection{Indentation and Left Margins of Potentially Numbered Items}
%
% The \textbf{left margin} means the space between the left border of
% the page area and the imaginary line that multi-line text aligns
% to. The \textbf{indent} is the offset of the very first line of that
% block of text relative to that value.
%
% If the \lstinline{indent} is a negative value you'll get a hanging
% indent; if it is positive, you get a paragraph style indent, and if
% it is set to \lstinline{0pt}, you get a clean alignment of the whole
% item.
%
% CoCoTeX provides a feature that allows the indention of counted
% elements to be just as wide as the widest Number of the same level
% (if \lstinline{indent} is set to \lstinline{auto}), as well as a
% feature that allows the indent to be as wide as all Numbers of the
% same cotainer type (if \lstinline{indent} is set to
% \lstinline{auto-global}).
%
% The approach to set the \lstinline{indent}, \lstinline{margin-left}
% and the position of the Number Component in numbered items such as
% Headings, entries in ToC and listof-X, captions, etc. is to store
% the maximum width for each level and the maximum width across all
% Numbers of a Container Type in the .aux file at the very end of the
% compilation after it has been constantly updated during the entire
% {\LaTeX} runtime. That way, for the next {\LaTeX} run, the maximum
% values are available immediately and can be used to fortify those
% parameters.
%
% \begin{macro}{\tp@store@latest}
%   low-level macro that stores the maximum value of a dimension
%   Property \#1. An internal Property \lstinline{\#1-local} is
%   constantly updated whenever the macro is called and the previously
%   stored value is lower than the one given in \lstinline{#2}.
%
%   The first call of the macro for a given Property triggers an
%   addendum to the \lstinline{\@enddocumenthook} which causes the
%   last value for that dimension to be stored in the .aux file. If
%   the Property hasn't been set from a previous {\LaTeX} run or a
%   previous call to the \lstinline{\tp@store@latest} macro for the
%   same Property and the same level, it is set to \#2.
%
%   \#1 is the internal name of the property, \#2 is the check value.
%    \begin{macrocode}
\def\tp@store@latest#1#2{%
  \expandafter\ifx\csname tp-\tp@cur@cont-#1\endcsname\relax
    \csxdef{tp-\tp@cur@cont-#1}{#2}%
  \else
    \expandafter\ifdim\csname tp-\tp@cur@cont-#1\endcsname<#2\relax
      \csxdef{tp-\tp@cur@cont-#1}{#2}%
    \fi
  \fi
  \expandafter\ifx\csname tp-\tp@cur@cont-#1-local\endcsname\relax
    \csxdef{tp-\tp@cur@cont-#1-local}{#2}%
  \else
    \expandafter\ifdim\csname tp-\tp@cur@cont-#1-local\endcsname<#2\relax
      \csxdef{tp-\tp@cur@cont-#1-local}{#2}%
    \fi
  \fi
%    \end{macrocode}
% The second step is to store the highest values in the .aux file for
% later LaTeX runs. A \lstinline{\write\@auxout} command for the
% storage macro is therefore added to the
% \lstinline{\@enddocumenthook} and a flag is set that indicates that
% the write command has already been added to the hook, since that
% needs to be done only once for each to-be-stored dimension.
%
% Note that the value that is eventually stored, is the updated
% \textit{local} maximum, not the value that is retrieved at the
% beginning of the run. This allows the values to be down-graded if
% the LaTeX source changed during two consecutive runs. However, if
% values change, you still need to do at least two more {\LaTeX} runs
% before the values stabilize.
%    \begin{macrocode}
  \ifcsdef{tp-\tp@cur@cont-#1-stored-trigger}{}
    {\edef\@tempa{%
       \noexpand\immediate\noexpand\write\noexpand\@auxout{%
         \noexpand\string\noexpand\csgdef{tp-\tp@cur@cont-#1}{%
           \noexpand\csname tp-\tp@cur@cont-#1-local\noexpand\endcsname}}}%
     \expandafter\AtEndDocument\expandafter{\@tempa}%
     \csgdef{tp-\tp@cur@cont-#1-stored-trigger}{\@empty}}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\tp@format@number}
%   calculates number widths and prepares macros to be used by the
%   user. \#1 is the internal Property prefix, \#2 is the user-level
%   Component prefix, \#3 is the numerical list level.
%    \begin{macrocode}
\def\tp@format@number#1#2#3{%
  \ccSetPropertyVal{#1curr-number-level}{#3}%
%    \end{macrocode}
% First step: measuring the natural width of the Number if it exists
% for the current item.
%    \begin{macrocode}
  \ccIfComp{#2Number}
    {\sbox\z@{\ccUseProperty{#1number-format}}}
    {\sbox\z@{}}%
%    \end{macrocode}
% Second step: we store the width of \lstinline{\box0} if it is wider
% than the previously stored width for that level. The end value will
% be written into the .aux file during expansion of the
% \lstinline{\@enddocumenthook}. We do the same for the maximum across
% \textit{all} levels of the same Container Type.
%    \begin{macrocode}
  \tp@store@latest{#1number-#3-maxwd}{\the\wd\z@}%
  \tp@store@latest{#1number-maxwd}{\the\wd\z@}%
%    \end{macrocode}
% We provide the maximum level as a user-level Property
% \lstinline{#1number-width-level-max}, the global maximum across all
% levels as \lstinline{#1number-width-max}, and the width of the
% current number as \lstinline{#1number-width}.
%    \begin{macrocode}
  \ccSetPropertyVal{#1number-width-level-max}{\csname tp-\tp@cur@cont-#1number-#3-maxwd\endcsname}%
  \ccSetPropertyVal{#1number-width-max}{\csname tp-\tp@cur@cont-#1number-maxwd\endcsname}%
  \ccSetPropertyVal{#1number-width}{\the\wd\z@}%
%    \end{macrocode}
% Third step: we calculate and fortify the actual
% \lstinline{#1margin-left} (i.e., the overall left indent of the
% whole item) and \lstinline{#1indent} (offset of the first line) of
% the entry.
%    \begin{macrocode}
  \tp@get@indent{#1}{#3}%
  \tp@set@hang{#1}%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\tp@set@hang} determines and sets the hanging indent
%   of a counter. \#1 is the internal Property prefix.
%
%    \begin{macrocode}
\def\tp@set@hang#1{%
%    \end{macrocode}
% First, we set the \lstinline{#1hang-number} to be an alias of
% \lstinline{#1number-format} as fallback.
%    \begin{macrocode}
  \ccPropertyLet{#1hang-number}{#1number-format}%
%    \end{macrocode}
% Then, we check for \lstinline{#1indent}.
%    \begin{macrocode}
  \ccIfProp{#1indent}
    {\ifdim\ccUseProperty{#1indent}<\z@
%    \end{macrocode}
% If it is set and negative, we alter the \lstinline{#1hang-number}
% Property in such a way that it is shifted to the left by
% \lstinline{#1indent} amount and put into a hbox of
% -\lstinline{#1indent} width (remember that the value is negative).
%    \begin{macrocode}
       \ccSetProperty{#1hang-number}{%
         \hskip\ccUseProperty{#1indent}%
         \hbox to -\ccUseProperty{#1indent}{%
           \ccIfPropVal{#1number-align}{left}{}{\hss}%
           \ccUseProperty{#1number-format}%
           \ccIfPropVal{#1number-align}{right}{}{\hss}}}%
     \fi}{}}
%    \end{macrocode}
% In all other cases, we stick to the default
% (\lstinline{#1number-format}) we set in the first step.
% \end{macro}
%
% \begin{macro}{\tp@calc@margin@left}
%   determines the left margin of the current level by subtracting the
%   current level's indent from the left margin of the next-higher
%   level. ``Next-higher'' meaning ``hierarchically'', i.e., the level
%   counter is \textit{lower}. Remember that for hang indent, the
%   indent is negative, so \lstinline{margin-left} grows larger.
%
%   \#1 is the Property prefix, \#2 is the current numerical list
%   level.
%    \begin{macrocode}
\def\tp@calc@margin@left#1#2{%
  \@tempcnta\numexpr#2-1\relax
  \expandafter\ifx\csname tp-\tp@cur@cont-#1\the\@tempcnta-margin-left\endcsname\relax
    \@tempdima=-\ccUseProperty{#1indent}\relax%
  \else
    \@tempdima=\dimexpr\csname tp-\tp@cur@cont-#1\the\@tempcnta-margin-left\endcsname-\ccUseProperty{#1indent}\relax
  \fi
  \tp@store@latest{#1#2-margin-left}{\the\@tempdima}%
  \ccSetProperty{#1margin-left}{\the\@tempdima}}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tp@get@indent}
%   Eventually, write the actually used values for margin-left and
%   indent into the current container's Property list. \#1 is the
%   internal property prefix, \#2 is the numerical list level.
%    \begin{macrocode}
\def\tp@get@indent#1#2{%
%    \end{macrocode}
% First, we need to store the initial values for both
% \lstinline{#1margin-left} and \lstinline{#1indent} since, first
% their values might be non-dimensional, and second, they will be
% altered during macro expansion to ultimatly being passed to
% \lstinline{\hskip}.
%    \begin{macrocode}
  \ccPropertyLetX{int-#1margin-left}{#1margin-left}%
  \ccPropertyLetX{int-#1indent}{#1indent}%
  \ccIfPropVal{#1indent}{auto-global}
%    \end{macrocode}
% If \lstinline{#1indent} is set to \lstinline{auto-global}, the item
% gets an \lstinline{indent} that is set to the negative value of the
% maximum width of all numbers across all Levels of the same Container
% Type. The same maximum is added to the user-set value of
% \lstinline{margin-left}.
%    \begin{macrocode}
    {\ccSetPropertyX{#1indent}{-\ccUseProperty{#1number-width-max}}%
%    \end{macrocode}
% If the user has not set \lstinline{margin-left}, we set it to \lstinline{\z@}.
%    \begin{macrocode}
     \ccIfPropVal{#1margin-left}{}
       {\ccSetProperty{int-#1margin-left}{\z@}}
       {\ccPropertyLetX{int-#1margin-left}{#1margin-left}}%
     \ccSetPropertyX{#1margin-left}{\dimexpr\ccUseProperty{#1number-width-max}+\ccUseProperty{int-#1margin-left}\relax}}
%    \end{macrocode}
% Next, we check if \lstinline{#1margin-left} is set to \lstinline{auto}.
%    \begin{macrocode}
    {\ccIfPropVal{int-#1margin-left}{auto}
%    \end{macrocode}
% If \lstinline{#1margin-left} is set to \lstinline{auto}, all
% items of the same level get the same left margin that is determined
% by the sums of the indents of all higher levels.
%    \begin{macrocode}
       {\ccIfPropVal{int-#1indent}{auto}
%    \end{macrocode}
% if \lstinline{#1indent} is also set to \lstinline{auto}, the
% \lstinline{indent} of the current item is set to the wides Number of
% the same level.
%    \begin{macrocode}
          {\ccSetPropertyX{#1indent}{-\ccUseProperty{#1number-width-level-max}}}
%    \end{macrocode}
% otherwise it is set to the value of indent, or \lstinline{0pt} if it
% was not set at all.
%    \begin{macrocode}
          {\ccIfProp{int-#1indent}
             {\ccSetPropertyX{#1indent}{\ccUseProperty{int-#1indent}}}
             {\ccSetProperty{#1indent}{\z@}}}%
%    \end{macrocode}
% the final value for \lstinline{margin-left} is calculated by the
% \lstinline{\tp@calc@margin@left} macro, above. It will be set to the sum of indent and
%    \begin{macrocode}
        \tp@calc@margin@left{#1}{#2}}
%    \end{macrocode}
% This branch is reached when the left margin is not set to \lstinline{auto}.
%    \begin{macrocode}
       {\ccIfProp{int-#1margin-left}
          {\ccIfPropVal{int-#1indent}{auto}
%    \end{macrocode}
% If \lstinline{margin-left} is set to a specific value and
% \lstinline{indent} is set to \lstinline{auto}, set the actual indent
% to the width of the level's widest Number.
%    \begin{macrocode}
            {\ccSetPropertyX{#1indent}{-\ccUseProperty{#1number-width-level-max}}}
            {\ccIfProp{int-#1indent}
%    \end{macrocode}
% Otherwise, if \lstinline{indent} is set to a specific width, apply that value, or else set the inden to \lstinline{0pt}.
%    \begin{macrocode}
               {\ccSetPropertyX{#1indent}{\ccUseProperty{int-#1indent}}}
               {\ccSetProperty{#1indent}{\z@}}}}
%    \end{macrocode}
% If \lstinline{margin-left} is not set,
%    \begin{macrocode}
         {\ccIfPropVal{int-#1indent}{auto}
%    \end{macrocode}
% and \lstinline{indent} is set to \lstinline{auto}, set
% \lstinline{margin-left} to the width of the level's widest Number
% and the actual \lstinline{indent} to the negative of that.
%    \begin{macrocode}
            {\ccPropertyLetX{#1margin-left}{#1number-width-level-max}%
             \ccSetPropertyX{#1indent}{-\ccUseProperty{#1number-width-level-max}}}
            {\ccIfProp{int-#1indent}
%    \end{macrocode}
% If \lstinline{margin-left} is not set, and \lstinline{indent} is set
% to a specific value, apply that value for \lstinline{indent} and set
% \lstinline{margin-left} to \lstinline{0pt}. In this branch,
% \lstinline{indent} should have a positive value, otherwise the
% content would probably lap over the left edge of the type area.
%    \begin{macrocode}
               {\ccSetPropertyX{#1indent}{\ccUseProperty{int-#1indent}}%
                \ccSetProperty{#1margin-left}{\z@}}
%    \end{macrocode}
% otherwise set both \lstinline{indent} nad \lstinline{margin-left} to
% \lstinline{0pt}.
%    \begin{macrocode}
               {\ccSetProperty{#1indent}{\z@}%
                \ccSetProperty{#1margin-left}{\z@}}}}}}}
%    \end{macrocode}
% \end{macro}
%
% \subsection{Labelling and Cross referencing}
%
% {\CoCoTeX} provides two ways to put labels on Container instances:
% one via the label attribute at the begin of a (Sub-)Containers
% corresponding environment, or via the \lstinline{RefLabel} Component
% inside the (Sub-)Container.
%
%    \begin{macrocode}
\AtBeginDocument{%
%    \end{macrocode}
% Storing the final definitions of \lstinline{\label}
% \begin{macro}{\cc@ltx@label} stores the definition of LaTeX's
%   \lstinline{\label} macro at the beginning of the document.
%    \begin{macrocode}
  \global\let\cc@ltx@label\label
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\ccCreateLabel} is a high level macro to generate
%   hyperref anchors and/or ref targets. \#1 is the type of
%   anchor. This macro looks for both the label attribute in the begin
%   of a Container's environment, as well as for a
%   \lstinline{RefLabel} Components inside the environment. If both
%   exist, both apply. If none exists, we adopt the generic anchor
%   point generated by the \lstinline{hyperref} package.
%
%   TODO: Check if the hyperref macros need to be configured in any
%   way for various reference types!
%    \begin{macrocode}
\def\ccCreateLabel#1{%
  \ifx\Hy@MakeCurrentHrefAuto\@undefined\else
    \Hy@MakeCurrentHrefAuto{cc:#1}%
    \Hy@raisedlink{\hyper@anchorstart{\@currentHref}\hyper@anchorend}%
  \fi
  \let\cc@ref@label\relax
  \ccWhenComp{RefLabel}
    {\ccgdefFromComp\cc@ref@label{RefLabel}%
     \expandafter\cc@create@label\expandafter{\cc@ref@label}}%
  \ccIfAttr{\tp@cur@cont}{label}
    {\cc@parse@csv\cc@create@label{tp@\tp@cur@cont @attr@label}}%
    {\ifx\cc@ref@label\relax\cc@create@label{\@currentHref}\fi}}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@cc@create@label} generates the actual anchor for
%   document-internal cross-references (i.e.,
%   a~\LaTeX\space\lstinline{\label}). \#1 is the label ID.
%    \begin{macrocode}
\def\cc@create@label#1{%
  \ccIfComp{Number}
  {\ifx\cc@labelname@comp\@undefined
      \def\cc@labelname@comp{Title}%
    \fi
    \begingroup
      \tpGobble
      \ccgdefFromComp\@currentlabel{Number}%
      \ccgdefFromComp\@currentlabelname{\cc@labelname@comp}%
    \endgroup}%
  {\cc@fallback@anchor}%
  %% leaving this will generate lots of "duplicate destination"
  %% messages from pdfbackend
  %\expandafter\hypertarget\expandafter{#1}{}%
  \expandafter\label\expandafter{#1}%
}
\def\cc@fallback@anchor{\phantomsection}%
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Linguistic Name generation and selection}
%
% \begin{macro}{\tpSetBabelLabel} defined a language-dependent string
%   macro for German and English varieties.  \#1 is the language, \#2
%   is the internal reference name, and \#3 is the language specific
%   label.
%    \begin{macrocode}
\def\tpSetBabelLabel#1#2#3{%
  \def\ccc@lang{#1}%
  \expandafter\def\expandafter\ccc@tempa\expandafter{\expandafter\def\csname #2name\endcsname{#3}}%
  \ifdefstring\ccc@lang{german}{%
    \expandafter\addto\expandafter\captionsgerman\expandafter{\ccc@tempa}%
    \expandafter\addto\expandafter\captionsngerman\expandafter{\ccc@tempa}%
  }\relax%
  \ifdefstring\ccc@lang{english}{%
    \expandafter\addto\expandafter\captionsbritish\expandafter{\ccc@tempa}%
    \expandafter\addto\expandafter\captionsUKenglish\expandafter{\ccc@tempa}%
    \expandafter\addto\expandafter\captionsenglish\expandafter{\ccc@tempa}%
    \expandafter\addto\expandafter\captionsamerican\expandafter{\ccc@tempa}%
    \expandafter\addto\expandafter\captionsUSenglish\expandafter{\ccc@tempa}%
  }\relax%
}
%    \end{macrocode}
% \end{macro}
% \subsection{Link Generation}
%
% \begin{macro}{\tpCompLink} creates a hyperlink with the target taken
%   from Component with the name \#1 and the label \#2.
%    \begin{macrocode}
\def\tpCompLink#1#2{%
  \protected@edef\@argi{\expandonce{\tpUseComp{#1}}}%
  \expandafter\href\expandafter{\@argi}{#2}%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tpPageLabel} enables referencing pages via \pageref
%   by using \phantomsection to create a hyperref anchor for label \#1.
%    \begin{macrocode}
\def\tpPageLabel#1{\phantomsection\label{#1}}
%    \end{macrocode}
% \end{macro}
%    \begin{macrocode}[gobble=1]
%</common>
%    \end{macrocode}
