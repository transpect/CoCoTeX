% \chapter{coco-common.dtx}\label{chap:common}
%
%    \begin{macrocode}[numbers=none,gobble=1]
%<*common>
%    \end{macrocode}
%
% This file provides some macros that are used in more than one
% {\CoCoTeX} module.
%
%    \begin{macrocode}
%%
%% module for CoCoTeX that provides some commonly used base macros.
%%
%% Maintainer: p.schulz@le-tex.de
%%
%% lualatex  -  texlive > 2019
%%
\NeedsTeXFormat{LaTeX2e}[2018/12/01]
\ProvidesPackage{coco-common}
    [\filedate \fileversion CoCoTeX common module]
%    \end{macrocode}
% Load key/value option parser packages in case coco-common is used
% without the cls.
%    \begin{macrocode}
\RequirePackage{kvoptions-patch}
\RequirePackage{xkeyval}
\RequirePackage{iftex}
%    \end{macrocode}
% \section{Package options}
%
% \subsection{Accessibility Features}
%
% Default color encoding passed as option to the \lstinline{xcolor}
% package.
%    \begin{macrocode}
\def\cc@color@enc{cmyk}
\define@choicekey{coco-common.sty}{color-enc}[\@cc@color@enc\nr]{srgb,rgb,gray,cmy,cmyk,natural,none}[cmyk]{%
  \let\cc@color@enc\@cc@color@enc
  \ifcase\nr\relax% srgb
    \def\cc@color@enc{rgb}%
  \or% rgb
  \or% gray
  \or% cmy
    \def\cc@color@enc{cmyk}%
  \or% cmyk
  \or% natural, i.e. no conversion of color spaces takes place
  \else%none
    \global\let\cc@color@enc\relax
  \fi
}
\ProcessOptionsX
\PassOptionsToPackage{\cc@color@enc}{xcolor}%
%    \end{macrocode}
% \begin{macro}{\ccIfPreamble} is true as long as there has not been a
%   \lstinline|\begin{document}|.
%    \begin{macrocode}
\def\cc@if@preamble{\ifx\@nodocument\relax\expandafter\@secondoftwo\else\expandafter\@firstoftwo\fi}
\let\ccIfPreamble\cc@if@preamble
%    \end{macrocode}
% \end{macro}
%
%
% \section{Commonly Used Low-Level Macros and Registers}
%
% If {\CoCoTeX} is used in conjunction with
% \lstinline{xerif}\footnote{See
% \url{https://github.com/transpect/xerif/}}, we include the
% \lstinline{coco-xerif} module, which, albeit not an official part of
% the {\CoCoTeX} framework, is essential for the Framework to work
% with \lstinline{xerif} generated \lstinline{.tex} files.
%    \begin{macrocode}
\IfFileExists{coco-xerif.sty}{\RequirePackage{coco-xerif}}{}
%    \end{macrocode}
% The coco-kernel module contains the core functions of the {\CoCoTeX}
% framework.
%    \begin{macrocode}
\RequirePackage{coco-kernel}
%    \end{macrocode}
%
%
% \subsection{Hard Dependencies}
%
% Hard requirements for all {\CoCoTeX} modules:
%    \begin{macrocode}
\RequirePackage{xcolor}
%    \end{macrocode}
% Including the \lstinline{graphicx} package and catching case-insensitive
% graphics file's endings from Word:
%    \begin{macrocode}
\RequirePackage{graphicx}
\DeclareGraphicsRule{.EPS}{eps}{.EPS}{}
%    \end{macrocode}
%
%
% \subsection{Common Variables}
%
% \subsubsection{String Variables for Value Comparisions}
% \begin{macro}{\cc@str@default} is a CS token that holds the string
%   ``default'' for comparisons.
%    \begin{macrocode}
\def\cc@str@default{default}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\cc@str@table} is a CS token that holds the string
%   ``table'' for comparisons.
%    \begin{macrocode}
\def\cc@str@table{table}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\cc@str@figure} is a CS token that holds the string
%   ``figure'' for comparisons.
%    \begin{macrocode}
\def\cc@str@figure{figure}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\cc@str@top} is a CS token that holds the string ``top'' for comparisons.
%    \begin{macrocode}
\def\cc@str@top{top}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\cc@str@bottom} is a CS token that holds the string ``bottom'' for comparisons.
%    \begin{macrocode}
\def\cc@str@bottom{bottom}
%    \end{macrocode}
% \end{macro}
%
%
% \subsubsection{Box Registers}
%
% Some temporary boxes that won't interfere with LaTeX's temporary
% boxes.
% \begin{macro}{\cc@tempboxa} is a temporary box register used throughout \CoCoTeX.
%    \begin{macrocode}
\newbox\cc@tempboxa
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\cc@tempboxb} is another temporary box register used throughout \CoCoTeX.
%    \begin{macrocode}
\newbox\cc@tempboxb
%    \end{macrocode}
% \end{macro}
%
%
% \subsubsection{Temporary Length and Skip Registers}
%
% \begin{macro}{\cc@tempskipa} is a temporary skip register used
%   throughout \CoCoTeX.
%    \begin{macrocode}
\newskip\cc@tempskipa
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Helper macros}
%
% \begin{macro}{\cc@topstrut} is a \lstinline{\strut} that has the
%   height of \lstinline{\topskip} and the depth of the difference
%   between the \lstinline{\baselineskip} and \lstinline{\topskip}.
%    \begin{macrocode}
\def\cc@topstrut{\vrule\@width\z@\@height\topskip\@depth\dimexpr\baselineskip-\topskip\relax}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\cc@afterbox} prevents indentation and additional
%   spacing after environments. Intended to be used in combination
%   with \lstinline{\aftergroup}.
%    \begin{macrocode}
\def\cc@afterbox{%
  \everypar{%
    \if@nobreak
      \@nobreakfalse
      \clubpenalty \@M
      \if@afterindent \else
        {\setbox\z@\lastbox}%
        \everypar{}%
      \fi
    \else
      \clubpenalty \@clubpenalty
      {\setbox\z@\lastbox}%
      \everypar{}%
    \fi}}
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Masks}
%
% These macros are intended to mask non-content markup, like page- or
% line breaking commands in order to find and remove or alter them
% easier.
% \begin{macro}{\hack} intended to mask line breaking macros.
%    \begin{macrocode}
\let\hack\@firstofone
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\hackfor} intended to hide line breaking macros.
%    \begin{macrocode}
\let\hackfor\@gobble
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\Hack} intended to mask page breaking macros.
%    \begin{macrocode}
\let\Hack\@firstofone
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\Hackfor} intended to hide page breaking macros.
%    \begin{macrocode}
\let\Hackfor\@gobble
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@gobbleopt} intended to nullify a macro's argument
%   with a possible optional argument interfering.
%
%   Use it like this:
%   \lstinline{\let\yourMacroWithOptArg\@gobbleopt}
%    \begin{macrocode}
\long\def\@gobbleopt{\@ifnextchar[\@@gobbleopt{\@@gobbleopt[]}}%]
\long\def\@@gobbleopt[#1]#2{}%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ccGobble} is used to de-activate certain macros to
%   prevent them from being called multiple times while processing
%   contents. An example is a footnote inside a caption while
%   calculating the height of the caption. In this case, we need the
%   space the footnote symbol requires without the actual footnote
%   being written into the footnote insert, since that should happen
%   when we actually print the caption.
%    \begin{macrocode}
\def\ccGobble{%
  \renewcommand\footnote[2][\the\c@footnote]{\def\@thefnmark{##1}\@makefnmark}%
  \renewcommand\index[2][]{}%
  \renewcommand\marginpar[2][]{}%
  \renewcommand\glossary[2][]{}%
  \let\hypertarget\@gobbletwo
  \let\label\@gobble
}%
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Arithmetics}
%
% \begin{macro}{\CalcRatio} is used to calculate the ratio between two
%   integers \InlineArg{1} and \InlineArg{2}.
%    \begin{macrocode}
\def\CalcRatio#1#2{\strip@pt\dimexpr\number\numexpr\number\dimexpr#1\relax*65536/\number\dimexpr#2\relax\relax sp}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\CalcModulo} is used to calculate the remainder of
%   integer division of \InlineArg{1} by \InlineArg{2}.  This needs a
%   different approach than the common modulo definition, which would
%   return negative results in some cases, as TeX rounds up the
%   quotient of \InlineArg{1} and \InlineArg{2} if the first decimal
%   place is equal to or greater 5.
%    \begin{macrocode}
\def\CalcModulo#1#2{\number\numexpr#1+#2-((#1+#2/2)/#2)*#2\relax}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\minusvspace}
%   Counterpart to \LaTeX's \lstinline{\addvspace}: if the value of
%   \lstinline{\minusvspace} is larger than \lstinline{\lastskip},
%   \lstinline{\lastskip} is used. Otherwise, the value of
%   \lstinline{\minusvspace} is used.
%    \begin{macrocode}
\def\@xminusvskip{%
  \ifdim\lastskip<\@tempskipb
  \else
    \ifdim\lastskip<\z@
    \else
      \ifdim\@tempskipb<\z@
        \advance\@tempskipb\lastskip
      \fi
      \vskip-\lastskip
      \vskip \@tempskipb
    \fi
  \fi}
\def\minusvspace#1{%
  \ifvmode
     \if@minipage\else
       \ifdim \lastskip =\z@
%    \end{macrocode}
% Compatibility to texlive pre 2020:
%    \begin{macrocode}
         \ifx\@vspace@calcify\@undefined
           \vskip #1\relax
         \else
           \@vspace@calcify{#1}%
         \fi
       \else
       \setlength\@tempskipb{#1}%
         \@xminusvskip
       \fi
     \fi
  \else
    \@noitemerr
  \fi}
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Determine actual page number}
%
% We need to determine the real page a floating object is
% printed. This mechanism is largely an adaption of the mechanism used
% in the \lstinline{marginnote} package.
%
% Counting absolute page numbers, however, may be misleading when the
% \lstinline{coco-title} module is loaded and the cover page is not followed
% by an empty page. Therefore, we save the default page counter from
% {\LaTeX} to evaluate it independently from the actual manner of
% counting.
% \begin{macro}{\the@cc@thispage} temporarily stores the current page
%   number.
%    \begin{macrocode}
\def\the@cc@thispage{}%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\cc@abspage} is a counter for the absolute page number.
%    \begin{macrocode}
\newcount\cc@abspage \cc@abspage\z@
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\thecc@abspage} is the output formatter for the
%   \lstinline{\cc@abspage} counter.
%    \begin{macrocode}
\def\thecc@abspage{\the\cc@abspage}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\if@cc@odd} is a conditional that is set to true if
%     the current absolute page number is not divisible by 2.
%    \begin{macrocode}
\newif\if@cc@odd \@cc@oddtrue
%    \end{macrocode}
% \end{macro}
% The absolute page counter is injected directly into \LaTeX's output
% routine:
%    \begin{macrocode}
\AtBeginDocument{%
  \global\cc@abspage=\c@page\relax%
  \g@addto@macro\@outputpage{\global\cc@abspage\c@page}%
}
%    \end{macrocode}
% We split the testing mechanism into two parts.
% \begin{macro}{\ccTestPage} is run before the floating object is
%   placed. It will store the page according to the placement in the
%   tex source code.
%    \begin{macrocode}
\def\ccTestPage{%
  \expandafter\ifx\csname the@cc@thispage\endcsname\@empty
    \gdef\the@cc@atthispage{1}%
  \else
    \expandafter\ifnum \the@cc@thispage=\cc@abspage%
      \begingroup
        \@tempcnta\the@cc@atthispage\relax
        \advance\@tempcnta\@ne\relax
        \xdef\the@cc@atthispage{\the\@tempcnta}%
      \endgroup
    \else
      \gdef\the@cc@atthispage{1}%
    \fi
  \fi
  \xdef\the@cc@thispage{\the\cc@abspage}%
  \let\@cc@currpage\relax
  \expandafter\ifx\csname \cc@cur@cont-\the@cc@thispage-\the@cc@atthispage\endcsname\relax
    \ifodd\cc@abspage\relax\@cc@oddtrue\else\@cc@oddfalse\fi
  \else
    \edef\@cc@currpage{\expandafter\expandafter\expandafter\@firstofone\csname \cc@cur@cont-\the@cc@thispage-\the@cc@atthispage\endcsname}%
    \ifodd\@cc@currpage\relax\@cc@oddtrue\else\@cc@oddfalse\fi
  \fi
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ccSavePage} is the second macro, which writes the
%   actual page number into the aux files.
%    \begin{macrocode}
\def\ccSavePage{%
  \protected@write\@auxout{\def\the@cc@cur@cont{\cc@cur@cont}\let\thecc@abspage\relax}{%
    \string\expandafter\string\gdef\string\csname\space \cc@cur@cont-\the@cc@thispage-\the@cc@atthispage\string\endcsname{\thecc@abspage}}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \section{Re-Thinking {\LaTeX} Core Functions}
%
% \subsection{Keeping .aux-Files Up-to-Date}
%
% \begin{macro}{\ccBreak} is a general line break macro intended to be
%   re-defined if necessary without touching LaTeX's kernel page and
%   line breaking macros.
%    \begin{macrocode}
\DeclareRobustCommand*{\ccBreak}{\hfill\break}
\cslet{\ccPrefix break}\ccBreak
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Content lists}
%
% \subsubsection{Default {\LaTeX} Content Lists}
%
% This part contains macros to ``simplify'' the generation of content
% lists like the Table of Contents or List of Figures/Tables, etc.
%
% Entries in the list-files (e.\,g., \lstinline{\jobname.toc},
% \lstinline{\jobname.lof}, etc.) usually contain
% \lstinline{\contentsline} macros that expand to
% \lstinline{l@<level>}.  Whenever a level of Components that are to
% be written into content lists is declared, the package automatically
% generates a \lstinline{\cc@l@<level>} macro for this level of entries.
% The content-baring argument of \lstinline{\ccContentsline} (or
% \lstinline{\cc@l@<level>}, resp.) contains Components.
%
% Once a list file is read, those \lstinline{\cc@l@<level>} macros are
% expanded in two steps. Each entry constitutes a Container in its own
% right. It therefore can have multiple Components. The first step is
% the extraction phase, where the entry's Container is dynamically
% declared, the corresponding properties are initialised, and its
% Components are extracted
%
% \begin{macro}{\cc@init@l@} is a low-level macro used to dynamically
%   define \lstinline{\cc@l@<level>} macros.
% \begin{ArgList}
%   \item*[1] is an override for counters that have to be restored
%   \item[2] is the list file ending (raw entries being stored in a file
%     \lstinline{\jobname.\#2})
%   \item[3] is a number that indicated the nesting depth
%   \item[4] is the nested level's unique name.
% \end{ArgList}
%    \begin{macrocode}
\def\cc@init@l@{\cc@opt@empty\@cc@init@l@}%
\def\@cc@init@l@[#1]#2#3#4{%
  \expandafter\ifx\csname c@#2depth\endcsname\relax
    \expandafter\global\expandafter\newcount\csname c@#2depth\endcsname
    \expandafter\global\csname c@#2depth\endcsname=0\relax
  \fi
  \expandafter\ifx\csname cc@#2@extract@data\endcsname\relax
    \expandafter\let\csname cc@#2@extract@data\endcsname\cc@extract@generic
  \fi
  \expandafter\ifx\csname cc@#2@print@entry\endcsname\relax
    \expandafter\let\csname cc@#2@print@entry\endcsname\cc@print@generic
  \fi
  \expandafter\long\expandafter\gdef\csname cc@l@#4\endcsname##1##2{%
    \ifLuaTeX\suppresslongerror=1\fi
    \expandafter\ifnum \csname c@#2depth\endcsname<#3\relax
    \else
      \bgroup
%    \end{macrocode}
% \begin{macro}{\ccTocLink} is used to link list entries to their
%   destination.
%    \begin{macrocode}
        \long\def\ccTocLink####1{\hyper@linkstart{link}{\@contentsline@destination}{####1}\hyper@linkend}%
%    \end{macrocode}
% \end{macro}
%    \begin{macrocode}
        \csname cc@#2@extract@data\endcsname{#3}{#4}{##1}{##2}%
        \csname cc@#2@print@entry\endcsname{#4}%
      \egroup
    \fi
    \ifLuaTeX\suppresslongerror=0\fi
  }}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ccContentsline} is our version of \LaTeX's
%   \lstinline{\contentsline}.
%   \begin{ArgList}
%   \item[1] is the name of the list counter
%   \item[2] is the name of the list entry
%   \item[3] is the page number
%   \item[4] is the hyperref destination
%   \end{ArgList}
%    \begin{macrocode}
\long\def\ccContentsline#1#2#3#4{\gdef\@contentsline@destination{#4}%
  \csname cc@l@#1\endcsname{#2}{#3}}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\cc@extract@generic} is a fallback extractor for a
%   list entry. It is used when the list handler does not provide a
%   case-specific extractor for the entries.
%   \begin{ArgList}
%   \item[1] is the name of the list counter
%   \item[2] is the name of the list entry
%   \item[3] is the page number
%   \item[4] is the hyperref destination
%   \end{ArgList}
%    \begin{macrocode}
\def\cc@extract@generic#1#2#3#4{}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\cc@print@generic} is the fallback output generator
%   for the composed list entry \InlineArg{1}.
%    \begin{macrocode}
\def\cc@print@generic#1{}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\cc@expand@l@contents}
%   expands the content of the \lstinline{cc@l@<level>} macro and contains some code
%   to catch and handle standard \LaTeX\ headings.
%   \begin{ArgList}
%   \item[1] is the content of the \lstinline{cc@l@}-Macro
%   \item[2] is the name of the handling Container
%   \item[3] is the Component prefix
%   \item[4] is the name of the Content component
%   \end{ArgList}
%    \begin{macrocode}
\def\cc@expand@l@contents#1#2#3#4{%
  \global\let\cc@tempa\relax
  \sbox\z@{\def\numberline##1{\xdef\cc@tempa{\noexpand\csdef{cc@#2@#3Number}{##1}}}#1}%
  \ifdim\wd\z@>\z@
    \let\numberline\@gobble%
    \protected@csedef{cc@#2@#3#4}{#1}%
    \cc@tempa
  \else
    #1%
  \fi
  \global\let\cc@tempa\relax
}
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Custom Content Lists}
%
% \begin{macro}{\ccDeclareContentList} provides an interface for
%   additional content lists.
%   \begin{ArgList}
%   \item[1] is the name of the custom content
%   \item[2] is a comma separated list of container names the
%     instances of which should be listed in the custom contents list
%   \end{ArgList}
%    \begin{macrocode}
\def\ccDeclareContentList#1#2{%
  \def\cc@add@extra@cl##1{%
    \expandafter\ifx\csname cc@##1@extra@cl\endcsname\relax
      \csgdef{cc@##1@extra@cl}{#1}%
    \else
      \csgappto{cc@##1@extra@cl}{,#1}%
    \fi}%
  \edef\@argii{#2}%
  \cc@parse@csv\cc@add@extra@cl{@argii}%
  \expandafter\newwrite\csname cc@cl@#1\endcsname\relax
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ccCreateContentListEntries} creates entries for
%   Custom Content Lists. It is called during the proccessing of a
%   container's instance.
%   \begin{ArgList}
%   \item[1] is the name of the calling Container
%   \item[2] is the name of the file stream
%   \item[3] is the level of the entry
%   \item[4] is the current page counter
%   \item[5] is the current hyperref label
%   \end{ArgList}
%    \begin{macrocode}
\def\ccCreateContentListEntries#1#2#3#4#5{%
  \def\cc@add@extra@cl##1{%
    \expandafter\protected@write\csname cc@cl@##1\endcsname
      {\ccGobble}%
      {\protect\ccContentsline{#2}{#3}{#4}{#5}\protected@file@percent}\relax
  }%
  \ifcsdef{cc@#1@extra@cl}{%
    \cc@parse@csv\cc@add@extra@cl{cc@#1@extra@cl}}{}%
}
%    \end{macrocode}
% \end{macro}
%
% \subsection{Indentation and Left Margins of Potentially Numbered Items}\label{sec:indent}
%
% The \textbf{left margin} means the space between the left border of
% the page area and the imaginary line that multi-line text aligns
% to. The \textbf{indent} is the offset of the very first line of that
% block of text relative to that value.
%
% If the \lstinline{indent} is a negative value you'll get a hanging
% indent; if it is positive, you get a paragraph style indent, and if
% it is set to \lstinline{0pt}, you get a clean alignment of the whole
% item.
%
% CoCoTeX provides a feature that allows the indention of counted
% elements to be just as wide as the widest Number of the same level
% (if \lstinline{indent} is set to \lstinline{auto}), as well as a
% feature that allows the indent to be as wide as all Numbers of the
% same cotainer type (if \lstinline{indent} is set to
% \lstinline{auto-global}).
%
% The approach to set the \lstinline{indent}, \lstinline{margin-left}
% and the position of the Number Component in numbered items such as
% Headings, entries in ToC and listof-X, captions, etc. is to store
% the maximum width for each level and the maximum width across all
% Numbers of a Container Type in the .aux file at the very end of the
% compilation after it has been constantly updated during the entire
% {\LaTeX} runtime. That way, for the next {\LaTeX} run, the maximum
% values are available immediately and can be used to fortify those
% parameters.
%
% \begin{macro}{\cc@store@latest} is a low-level macro that stores the
%   maximum value of a dimension Property \InlineArg{1}. An internal
%   Property \lstinline{\#1-local} is constantly updated whenever the
%   macro is called and the previously stored value is lower than the
%   one given in \InlineArg{2}.
%
%   The first call of the macro for a given Property triggers an
%   addendum to the \lstinline{\@enddocumenthook} which causes the
%   last value for that dimension to be stored in the .aux file. If
%   the Property hasn't been set from a previous {\LaTeX} run or a
%   previous call to the \lstinline{\cc@store@latest} macro for the
%   same Property and the same level, it is set to \InlineArg{2}.
%   \begin{ArgList}
%   \item[1] is the internal name of the property
%   \item[2] is the check value.
%   \end{ArgList}
%    \begin{macrocode}
\def\cc@store@latest#1#2{%
  \expandafter\ifx\csname cc-\cc@cur@cont-#1\endcsname\relax
    \csxdef{cc-\cc@cur@cont-#1}{#2}%
  \else
    \expandafter\ifdim\csname cc-\cc@cur@cont-#1\endcsname<#2\relax
      \csxdef{cc-\cc@cur@cont-#1}{#2}%
    \fi
  \fi
  \expandafter\ifx\csname cc-\cc@cur@cont-#1-local\endcsname\relax
    \csxdef{cc-\cc@cur@cont-#1-local}{#2}%
  \else
    \expandafter\ifdim\csname cc-\cc@cur@cont-#1-local\endcsname<#2\relax
      \csxdef{cc-\cc@cur@cont-#1-local}{#2}%
    \fi
  \fi
%    \end{macrocode}
% The second step is to store the highest values in the .aux file for
% later LaTeX runs. A \lstinline{\write\@auxout} command for the
% storage macro is therefore added to the
% \lstinline{\@enddocumenthook} and a flag is set that indicates that
% the write command has already been added to the hook, since that
% needs to be done only once for each to-be-stored dimension.
%
% Note that the value that is eventually stored, is the updated
% \textit{local} maximum, not the value that is retrieved at the
% beginning of the run. This allows the values to be down-graded if
% the LaTeX source changed during two consecutive runs. However, if
% values change, you still need to do at least two more {\LaTeX} runs
% before the values stabilize.
%    \begin{macrocode}
  \ifcsdef{cc-\cc@cur@cont-#1-stored-trigger}{}
    {\edef\@tempa{%
       \noexpand\immediate\noexpand\write\noexpand\@auxout{%
         \noexpand\string\noexpand\csgdef{cc-\cc@cur@cont-#1}{%
           \noexpand\csname cc-\cc@cur@cont-#1-local\noexpand\endcsname}}}%
     \expandafter\AtEndDocument\expandafter{\@tempa}%
     \csgdef{cc-\cc@cur@cont-#1-stored-trigger}{\@empty}}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\cc@format@number}
%   calculates number widths and prepares macros to be used by the
%   user.
%   \begin{ArgList}
%   \item[1] is the internal Property prefix
%   \item[2] is the user-level Component prefix
%   \item[3] is the numerical list level.
%   \end{ArgList}
%    \begin{macrocode}
\def\cc@format@number#1#2#3{%
  \ccSetPropertyVal{#1curr-number-level}{#3}%
%    \end{macrocode}
% \textit{First step:} measuring the natural width of the Number if it
% exists for the current item.
%    \begin{macrocode}
  \ccIfComp{#2Number}
    {\sbox\z@{\ccUseProperty{#1number-format}}}
    {\sbox\z@{}}%
%    \end{macrocode}
% \textit{Second step:} we store the width of \lstinline{\box0} if it
% is wider than the previously stored width for that level. The end
% value will be written into the .aux file during expansion of the
% \lstinline{\@enddocumenthook}. We do the same for the maximum across
% \textit{all} levels of the same Container Type.
%    \begin{macrocode}
  \cc@store@latest{#1number-#3-maxwd}{\the\wd\z@}%
  \cc@store@latest{#1number-maxwd}{\the\wd\z@}%
%    \end{macrocode}
% We provide the maximum level as a user-level Property
% \lstinline{#1number-width-level-max}, the global maximum across all
% levels as \lstinline{#1number-width-max}, and the width of the
% current number as \lstinline{#1number-width}.
%    \begin{macrocode}
  \ccSetPropertyVal{#1number-width-level-max}{\csname cc-\cc@cur@cont-#1number-#3-maxwd\endcsname}%
  \ccSetPropertyVal{#1number-width-max}{\csname cc-\cc@cur@cont-#1number-maxwd\endcsname}%
  \ccSetPropertyVal{#1number-width}{\the\wd\z@}%
%    \end{macrocode}
% \textit{Third step:} we calculate and fortify the actual
% \lstinline{#1margin-left} (i.e., the overall left indent of the
% whole item) and \lstinline{#1indent} (offset of the first line) of
% the entry.
%    \begin{macrocode}
  \cc@get@indent{#1}{#3}%
  \cc@set@hang{#1}%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\cc@set@hang} determines and sets the hanging indent
%   of a counter.
%   \begin{ArgList}
%   \item[1] is the internal Property prefix
%   \end{ArgList}
%    \begin{macrocode}
\def\cc@set@hang#1{%
%    \end{macrocode}
% First, we set the \lstinline{#1hang-number} to be an alias of
% \lstinline{#1number-format} as fallback.
%    \begin{macrocode}
  \ccPropertyLet{#1hang-number}{#1number-format}%
%    \end{macrocode}
% Then, we check for \lstinline{#1indent}.
%    \begin{macrocode}
  \ccIfProp{#1indent}
    {\ifdim\ccUseProperty{#1indent}<\z@
%    \end{macrocode}
% If it is set and negative, we alter the \lstinline{#1hang-number}
% Property in such a way that it is shifted to the left by
% \lstinline{#1indent} amount and put into a hbox of
% -\lstinline{#1indent} width (remember that the value is negative).
%    \begin{macrocode}
       \ccSetProperty{#1hang-number}{%
         \hskip\ccUseProperty{#1indent}%
         \hbox to -\ccUseProperty{#1indent}{%
           \ccIfPropVal{#1number-align}{left}{}{\hss}%
           \ccUseProperty{#1number-format}%
           \ccIfPropVal{#1number-align}{right}{}{\hss}}}%
     \fi}{}}
%    \end{macrocode}
% In all other cases, we stick to the default
% (\lstinline{#1number-format}) we set in the first step.
% \end{macro}
%
% \begin{macro}{\cc@calc@margin@left}
%   determines the left margin of the current level by subtracting the
%   current level's indent from the left margin of the next-higher
%   level. ``Next-higher'' meaning ``hierarchically'', i.e., the level
%   counter is \textit{lower}. Remember that for hang indent, the
%   indent is negative, so \lstinline{margin-left} grows larger.
%   \begin{ArgList}
%   \item[1] is the Property prefix
%   \item[2] is the current numerical list level.
%   \end{ArgList}
%    \begin{macrocode}
\def\cc@calc@margin@left#1#2{%
  \@tempcnta\numexpr#2-\@ne\relax
  \expandafter\ifx\csname cc-\cc@cur@cont-#1\the\@tempcnta-margin-left\endcsname\relax
    \@tempdima=-\ccUseProperty{#1indent}\relax%
  \else
    \@tempdima=\dimexpr\csname cc-\cc@cur@cont-#1\the\@tempcnta-margin-left\endcsname-\ccUseProperty{#1indent}\relax
  \fi
  \cc@store@latest{#1#2-margin-left}{\the\@tempdima}%
  \ccSetProperty{#1margin-left}{\the\@tempdima}}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\cc@get@indent}
%   Eventually, write the actually used values for margin-left and
%   indent into the current container's Property list.
%   \begin{ArgList}
%   \item[1] is the CS token of a method that is called to calculate
%     the actual left margin of the list item. It defaults to above's
%     \lstinline{\cc@calc@margin@left} and is fed the two mandatory
%     arguments of the \lstinline{\cc@get@indent} macro, namely
%   \item[2] for the internal property prefix, and
%   \item[3] for the numerical list level.
%   \end{ArgList}
%   The callback method should set and store the
%   \lstinline{#2margin-left} Property.
%    \begin{macrocode}
\def\cc@get@indent{\@ifnextchar[{\@cc@get@indent}{\@cc@get@indent[\cc@calc@margin@left]}}
\def\@cc@get@indent[#1]#2#3{%
%    \end{macrocode}
% First, we need to store the initial values for both
% \lstinline{#2margin-left} and \lstinline{#2indent} since, first
% their values might be non-dimensional, and second, they will be
% altered during macro expansion to ultimatly being passed to
% \lstinline{\hskip}.
%    \begin{macrocode}
  \ccPropertyLetX{int-#2margin-left}{#2margin-left}%
  \ccPropertyLetX{int-#2indent}{#2indent}%
  \ccIfPropVal{#2indent}{auto-global}
%    \end{macrocode}
% If \lstinline{#2indent} is set to \lstinline{auto-global}, the item
% gets an \lstinline{indent} that is set to the negative value of the
% maximum width of all numbers across all Levels of the same Container
% Type. The same maximum is added to the user-set value of
% \lstinline{margin-left}.
%    \begin{macrocode}
    {\ccSetPropertyX{#2indent}{-\ccUseProperty{#2number-width-max}}%
%    \end{macrocode}
% If the user has set \lstinline{#2margin-left} to \lstinline{auto}, we reset it to empty.
%    \begin{macrocode}
     \ccIfPropVal{#2margin-left}{auto}{\ccSetProperty{#2margin-left}{}}{}%
%    \end{macrocode}
% If the user has not set \lstinline{margin-left}, we set it to \lstinline{\z@}.
%    \begin{macrocode}
     \ccIfPropVal{#2margin-left}{}
       {\ccSetProperty{int-#2margin-left}{\z@}}
       {\ccPropertyLetX{int-#2margin-left}{#2margin-left}}%
     \ccSetPropertyX{#2margin-left}{\dimexpr\ccUseProperty{#2number-width-max}+\ccUseProperty{int-#2margin-left}\relax}}
%    \end{macrocode}
% Next, we check if \lstinline{#2margin-left} is set to \lstinline{auto}.
%    \begin{macrocode}
    {\ccIfPropVal{int-#2margin-left}{auto}
%    \end{macrocode}
% If \lstinline{#2margin-left} is set to \lstinline{auto}, all
% items of the same level get the same left margin that is determined
% by the sums of the indents of all higher levels.
%    \begin{macrocode}
       {\ccIfPropVal{int-#2indent}{auto}
%    \end{macrocode}
% if \lstinline{#2indent} is also set to \lstinline{auto}, the
% \lstinline{indent} of the current item is set to the wides Number of
% the same level.
%    \begin{macrocode}
          {\ccSetPropertyX{#2indent}{-\ccUseProperty{#2number-width-level-max}}}
%    \end{macrocode}
% otherwise it is set to the value of indent, or \lstinline{0pt} if it
% was not set at all.
%    \begin{macrocode}
          {\ccIfProp{int-#2indent}
             {\ccSetPropertyX{#2indent}{\ccUseProperty{int-#2indent}}}
             {\ccSetProperty{#2indent}{\z@}}}%
%    \end{macrocode}
% the final value for \lstinline{margin-left} is calculated. If no
% optional argument is given, the method called is the
% \lstinline{\cc@calc@margin@left} macro, above.
%    \begin{macrocode}
        #1{#2}{#3}}
%    \end{macrocode}
% This branch is reached when the left margin is not set to \lstinline{auto}.
%    \begin{macrocode}
       {\ccIfProp{int-#2margin-left}
          {\ccIfPropVal{int-#2indent}{auto}
%    \end{macrocode}
% If \lstinline{margin-left} is set to a specific value and
% \lstinline{indent} is set to \lstinline{auto}, set the actual indent
% to the width of the level's widest Number.
%    \begin{macrocode}
            {\ccSetPropertyX{#2indent}{-\ccUseProperty{#2number-width-level-max}}}
            {\ccIfProp{int-#2indent}
%    \end{macrocode}
% Otherwise, if \lstinline{indent} is set to a specific width, apply that value, or else set the inden to \lstinline{0pt}.
%    \begin{macrocode}
               {\ccSetPropertyX{#2indent}{\ccUseProperty{int-#2indent}}}
               {\ccSetProperty{#2indent}{\z@}}}}
%    \end{macrocode}
% If \lstinline{margin-left} is not set,
%    \begin{macrocode}
         {\ccIfPropVal{int-#2indent}{auto}
%    \end{macrocode}
% and \lstinline{indent} is set to \lstinline{auto}, set
% \lstinline{margin-left} to the width of the level's widest Number
% and the actual \lstinline{indent} to the negative of that.
%    \begin{macrocode}
            {\ccPropertyLetX{#2margin-left}{#2number-width-level-max}%
             \ccSetPropertyX{#2indent}{-\ccUseProperty{#2number-width-level-max}}}
            {\ccIfProp{int-#2indent}
%    \end{macrocode}
% If \lstinline{margin-left} is not set, and \lstinline{indent} is set
% to a specific value, apply that value for \lstinline{indent} and set
% \lstinline{margin-left} to \lstinline{0pt}. In this branch,
% \lstinline{indent} should have a positive value, otherwise the
% content would probably lap over the left edge of the type area.
%    \begin{macrocode}
               {\ccSetPropertyX{#2indent}{\ccUseProperty{int-#2indent}}%
                \ccSetProperty{#2margin-left}{\z@}}
%    \end{macrocode}
% otherwise set both \lstinline{indent} nad \lstinline{margin-left} to
% \lstinline{0pt}.
%    \begin{macrocode}
               {\ccSetProperty{#2indent}{\z@}%
                \ccSetProperty{#2margin-left}{\z@}}}}}}}
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Labelling and Cross referencing}
%
% {\CoCoTeX} provides two ways to put labels on Container instances:
% one via the label attribute at the begin of a (Sub-)Containers
% corresponding environment, or via the \lstinline{RefLabel} Component
% inside the (Sub-)Container.
%
%    \begin{macrocode}
\AtBeginDocument{%
%    \end{macrocode}
% Storing the final definitions of \lstinline{\label}
% \begin{macro}{\cc@ltx@label} stores the definition of LaTeX's
%   \lstinline{\label} macro at the beginning of the document.
%    \begin{macrocode}
  \global\let\cc@ltx@label\label
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\ccCreateLabel} is a high level macro to generate
%   hyperref anchors and/or ref targets.
%   \begin{ArgList}
%   \item[1] is the type of anchor
%   \end{ArgList}
%   This macro looks for both the label attribute in the begin
%   of a Container's environment, as well as for a
%   \lstinline{RefLabel} Components inside the environment. If both
%   exist, both apply. If none exists, we adopt the generic anchor
%   point generated by the \lstinline{hyperref} package.
%
%   \TODO{Check if the hyperref macros need to be configured in any
%   way for various reference types!}
%    \begin{macrocode}
\def\ccCreateLabel#1{%
  \ifx\Hy@MakeCurrentHrefAuto\@undefined\else
    \Hy@MakeCurrentHrefAuto{cc:#1}%
    \Hy@raisedlink{\hyper@anchorstart{\@currentHref}\hyper@anchorend}%
  \fi
  \let\cc@ref@label\relax
  \ccWhenComp{RefLabel}
    {\ccgdefFromComp\cc@ref@label{RefLabel}%
     \expandafter\cc@create@label\expandafter{\cc@ref@label}}%
  \ccIfAttr{\cc@cur@cont}{label}
    {\cc@parse@csv\cc@create@label{cc@\cc@cur@cont @attr@label}}%
    {\ifx\cc@ref@label\relax\cc@create@label{\@currentHref}\fi}}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\cc@create@label} generates the actual anchor for
%   document-internal cross-references (i.e.,
%   a~\LaTeX\space\lstinline{\label}).
%   \begin{ArgList}
%   \item[1] is the label ID
%   \end{ArgList}
%    \begin{macrocode}
\def\cc@create@label#1{%
  \ccIfComp{Number}
  {\ifx\cc@labelname@comp\@undefined
      \def\cc@labelname@comp{Title}%
    \fi
    \begingroup
      \ccGobble
      \ccgdefFromComp\@currentlabel{Number}%
      \ccgdefFromComp\@currentlabelname{\cc@labelname@comp}%
    \endgroup}%
  {\cc@fallback@anchor}%
  %% leaving this will generate lots of "duplicate destination"
  %% messages from pdfbackend
  %\expandafter\hypertarget\expandafter{#1}{}%
  \expandafter\label\expandafter{#1}%
}
\def\cc@fallback@anchor{\phantomsection}%
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Linguistic Name generation and selection}
%
% \begin{macro}{\ccSetBabelLabel} defined a language-dependent string
%   macro for German and English varieties.
%   \begin{ArgList}
%   \item[1] is the language
%   \item[2] is the internal reference name
%   \item[3] is the language specific label
%   \end{ArgList}
%    \begin{macrocode}
\def\ccSetBabelLabel#1#2#3{%
  \def\ccc@lang{#1}%
  \expandafter\def\expandafter\ccc@tempa\expandafter{\expandafter\def\csname #2name\endcsname{#3}}%
  \ifdefstring\ccc@lang{german}{%
    \expandafter\addto\expandafter\captionsgerman\expandafter{\ccc@tempa}%
    \expandafter\addto\expandafter\captionsngerman\expandafter{\ccc@tempa}%
  }\relax%
  \ifdefstring\ccc@lang{english}{%
    \expandafter\addto\expandafter\captionsbritish\expandafter{\ccc@tempa}%
    \expandafter\addto\expandafter\captionsUKenglish\expandafter{\ccc@tempa}%
    \expandafter\addto\expandafter\captionsenglish\expandafter{\ccc@tempa}%
    \expandafter\addto\expandafter\captionsamerican\expandafter{\ccc@tempa}%
    \expandafter\addto\expandafter\captionsUSenglish\expandafter{\ccc@tempa}%
  }\relax%
}
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Link Generation}
%
% \begin{macro}{\ccCompLink} creates a hyperlink with the target taken
%   from Component with the name \InlineArg{1} and the label
%   \InlineArg{2}.
%    \begin{macrocode}
\def\ccCompLink#1#2{%
  \protected@edef\@argi{\expandonce{\ccUseComp{#1}}}%
  \expandafter\href\expandafter{\@argi}{#2}%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ccPageLabel} enables referencing pages via
%   \lstinline{\pageref} by using \lstinline{\phantomsection} to
%   create a hyperref anchor for label \InlineArg{1}.
%    \begin{macrocode}
\def\ccPageLabel#1{\phantomsection\label{#1}}
%    \end{macrocode}
% \end{macro}
%    \begin{macrocode}[numbers=none,gobble=1]
%</common>
%    \end{macrocode}
