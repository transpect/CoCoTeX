% \chapter{coco-common.dtx}
% This file provides some macros that are used in more than one
% {\CoCoTeX} module.
%
%    \begin{macrocode}[gobble=1]
%<*common>
%    \end{macrocode}
%    \begin{macrocode}
%%
%% module for CoCoTeX that provides some commonly used base macros.
%%
%% Maintainer: p.schulz@le-tex.de
%%
%% lualatex  -  texlive > 2019
%%
\NeedsTeXFormat{LaTeX2e}[2018/12/01]
\ProvidesPackage{coco-common}
    [\filedate \fileversion CoCoTeX common module]
\RequirePackage{iftex}
%    \end{macrocode}
%
% \section{Commonly Used Low-Level Macros and Registers}
% Contains common macros used in the {\CoCoTeX} modules and that
% are intended for macro and stylesheet programming.
%    \begin{macrocode}
\RequirePackage{coco-kernel}
%    \end{macrocode}
% \subsection{Hard Dependencies}
% Hard requirements for all {\CoCoTeX} modules:
%    \begin{macrocode}
\usepackage{xcolor}
%    \end{macrocode}
% Including the \lstinline{graphicx} package and catching case-insensitive
% graphics file's endings from Word:
%    \begin{macrocode}
\usepackage{graphicx}
\DeclareGraphicsRule{.EPS}{eps}{.EPS}{}
%    \end{macrocode}
%
% \subsection{Common Variables}
%
% \subsubsection{String Variables for Value Comparisions}
% \begin{macro}{\tp@str@default}
%    \begin{macrocode}
\def\tp@str@default{default}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tp@str@table}
%    \begin{macrocode}
\def\tp@str@table{table}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tp@str@figure}
%    \begin{macrocode}
\def\tp@str@figure{figure}
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Box Registers}
% Some temporary boxes that won't interfere with LaTeX's temporary
% boxes.
% \begin{macro}{\tp@tempboxa}
%    \begin{macrocode}
\newbox\tp@tempboxa
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tp@tempboxb}
%    \begin{macrocode}
\newbox\tp@tempboxb
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Length and Skip Registers}
% \begin{macro}{\tp@tempskipa}
%    \begin{macrocode}
\newskip\tp@tempskipa
%    \end{macrocode}
% \end{macro}
% \subsection{Helper macros}
% \begin{macro}{\afterfi} used to execute code after the next \lstinline{\fi}:
%    \begin{macrocode}
\def\afterfi#1\fi{\fi#1}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tp@topstrut} is a \lstinline{\strut} that has the
%   height of \lstinline{\topskip} and the depth of the difference
%   between the \lstinline{\baselineskip} and \lstinline{\topskip}.
%    \begin{macrocode}
\def\tp@topstrut{\vrule\@width\z@\@height\topskip\@depth\dimexpr\baselineskip-\topskip\relax}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\afterbox}
%   prevents indentation and additional spacing after
%   environments. Intended to be used in combination with
%   \lstinline{\aftergroup}.
%    \begin{macrocode}
\def\@afterbox{%
  \everypar{%
    \if@nobreak
      \@nobreakfalse
      \clubpenalty \@M
      \if@afterindent \else
        {\setbox\z@\lastbox}%
        \everypar{}%
      \fi
    \else
      \clubpenalty \@clubpenalty
      {\setbox\z@\lastbox}%
      \everypar{}%
    \fi}}
%    \end{macrocode}
% \end{macro}
%
% \subsection{Masks}
% These macros are intended to mask non-content markup, like page- or
% line breaking commands in order to find and remove or alter them
% easier.
% \begin{macro}{\hack} intended to mask line breaking macros.
%    \begin{macrocode}
\let\hack\@firstofone
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\hackfor} intended to hide line breaking macros.
%    \begin{macrocode}
\let\hackfor\@gobble
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\Hack} intended to mask page breaking macros.
%    \begin{macrocode}
\let\Hack\@firstofone
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\Hackfor} intended to hide page breaking macros.
%    \begin{macrocode}
\let\Hackfor\@gobble
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@gobbleopt} intended to nullify a macro's argument
%   with a possible optional argument interfering.
%
%   Use it like this:
%   \lstinline{\let\yourMacroWithOptArg\@gobbleopt}
%    \begin{macrocode}
\long\def\@gobbleopt{\@ifnextchar[\@@gobbleopt{\@@gobbleopt[]}}%]
\long\def\@@gobbleopt[#1]#2{}%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tpGobble} is used to de-activate certain macros to
%   prevent them from being called multiple times while processing
%   contents. An example is a footnote inside a caption while
%   calculating the height of the caption. In this case, we need the
%   space the footnote symbol requires without the actual footnote
%   being written into the footnote insert, since that should happen
%   when we actually print the caption.
%    \begin{macrocode}
\def\tpGobble{%
  \renewcommand\footnote[2][\the\c@footnote]{\def\@thefnmark{##1}\@makefnmark}%
  \renewcommand\index[2][]{}%
  \renewcommand\marginpar[2][]{}%
  \renewcommand\glossary[2][]{}%
  \let\label\@gobble
}%
%    \end{macrocode}
% \end{macro}
% \subsection{Arithmetics}
% \begin{macro}{\CalcRatio} is used to calculate the ratio between two
%   integers.
%    \begin{macrocode}
\def\CalcRatio#1#2{\strip@pt\dimexpr\number\numexpr\number\dimexpr#1\relax*65536/\number\dimexpr#2\relax\relax sp}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\CalcModulo} is used to calculate the remainder of
%   integer division of \#1 by \#2.
%    \begin{macrocode}
\def\CalcModulo#1#2{\numexpr#1-(#1/#2)*#2\relax}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\minusvspace}
%   Counterpart to \LaTeX's \lstinline{\addvspace}: if the value of
%   \lstinline{\minusvspace} is larger than \lstinline{\lastskip},
%   \lstinline{\lastskip} is used. Otherwise, the value of
%   \lstinline{\minusvspace} is used.
%    \begin{macrocode}
\def\@xminusvskip{%
  \ifdim\lastskip<\@tempskipb
  \else
    \ifdim\lastskip<\z@
    \else
      \ifdim\@tempskipb<\z@
        \advance\@tempskipb\lastskip
      \fi
      \vskip-\lastskip
      \vskip \@tempskipb
    \fi
  \fi}
\def\minusvspace#1{%
  \ifvmode
     \if@minipage\else
       \ifdim \lastskip =\z@
%    \end{macrocode}
% Compatibility to texlive pre 2020:
%    \begin{macrocode}
         \ifx\@vspace@calcify\@undefined
           \vskip #1\relax
         \else
           \@vspace@calcify{#1}%
         \fi
       \else
       \setlength\@tempskipb{#1}%
         \@xminusvskip
       \fi
     \fi
  \else
    \@noitemerr
  \fi}
%    \end{macrocode}
% \end{macro}
% \subsection{Determine actual page number}
%
% We need to determine the real page a floating object is
% printed. This mechanism is largely an adaption of the mechanism used
% in the \lstinline{marginnote} package.
%
% Counting absolute page numbers, however, may be misleading when the
% \lstinline{coco-title} module is loaded and the cover page is not followed
% by an empty page. Therefore, we save the default page counter from
% {\LaTeX} to evaluate it independently from the actual manner of
% counting.
% \begin{macro}{\the@tp@thispage}
%    \begin{macrocode}
\def\the@tp@thispage{}%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tp@abspage}
%    \begin{macrocode}
\newcount\tp@abspage \tp@abspage\z@
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\thetp@abspage}
%    \begin{macrocode}
\def\thetp@abspage{\the\tp@abspage}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\if@tp@odd}
%    \begin{macrocode}
\newif\if@tp@odd \@tp@oddtrue
%    \end{macrocode}
% \end{macro}
%    \begin{macrocode}
\AtBeginDocument{%
  \global\tp@abspage=\c@page\relax%
  \g@addto@macro\@outputpage{\global\tp@abspage\c@page}%
}
%    \end{macrocode}
% \begin{macro}{\tp@test@page}
% We split this into two parts. The first one is run before the
% floating object is placed. It will store the page according to the
% placement in the tex source code.
%    \begin{macrocode}
\def\tp@test@page{%
  \expandafter\ifx\csname the@tp@thispage\endcsname\@empty
    \gdef\the@tp@atthispage{1}%
  \else
    \expandafter\ifnum \the@tp@thispage=\tp@abspage%
      \begingroup
        \@tempcnta\the@tp@atthispage\relax
        \advance\@tempcnta\@ne\relax
        \xdef\the@tp@atthispage{\the\@tempcnta}%
      \endgroup
    \else
      \gdef\@tp@atthispage{1}%
    \fi
  \fi
  \xdef\the@tp@thispage{\the\tp@abspage}%
  \let\@tp@currpage\relax
  \expandafter\ifx\csname \tp@cur@cont-\the@tp@thispage-\the@tp@atthispage\endcsname\relax
    \ifodd\tp@abspage\relax\@tp@oddtrue\else\@tp@oddfalse\fi
  \else
    \edef\@tp@currpage{\expandafter\expandafter\expandafter\@firstofone\csname \tp@cur@cont-\the@tp@thispage-\the@tp@atthispage\endcsname}%
    \ifodd\@tp@currpage\relax\@tp@oddtrue\else\@tp@oddfalse\fi
  \fi
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tp@save@page}
% the second macro writes the actual position of the floating object
% into the aux files. This macro has to be placed inside the float
% environment/macro.
%    \begin{macrocode}
\def\tp@save@page{%
  \protected@write\@auxout{\def\the@tp@cur@cont{\tp@cur@cont}\let\thetp@abspage\relax}{%
    \string\expandafter\string\gdef\string\csname\space \tp@cur@cont-\the@tp@thispage-\the@tp@atthispage\string\endcsname{\thetp@abspage}}%
}
%    \end{macrocode}
% \end{macro}
%
% \section{Re-Thinking {\LaTeX} Core Functions}
%
% \subsection{Keeping .aux-Files Up-to-Date}
%
% \begin{macro}{\tp@restore@init}
%   The transpec-tex macro family provides a feature that allows the
%   indention of counted elements to be just as wide as the widest
%   counter that element needs to be printed.
%
%   During compilation the width of each counter is written into the
%   aux-files if it is bigger than previously calculated width for
%   that same counter. So, for the next run, the widest instance of
%   each counter can be retrieved from the project's \lstinline{.aux}
%   file(s).
%
%   This simple approach, however, has a major problem: if the aux
%   file is updated only if the current width of a counter is wider
%   than the maximum, then the aux-file is left empty after the second
%   run, which yields wrong indents after the third run when the
%   maximums are newly written. This process repeats indefinitely with
%   alternating output every two runs.
%
%   Alternatively, the aux-file could be updated iff the the current
%   width is greater \textit{or equal} to the maximum. This, however,
%   leads to .aux-files with lots of identical entries if the number
%   of counters is large whose widths are the same as the maximmm.
%
%   To prevent this, this macro can be used to write the maximum value
%   established in the previous run into the aux-file exactly once at
%   the beginnnig of the document environment.
%
%   It checks if a macro that stores the maximum value is already
%   defined, and re-writes its definition towards the maximum value
%   into the .aux-file.
%
%   \#1 is the container name, \#2 is the counter to be stored.
%    \begin{macrocode}
\def\tp@restore@init#1#2{%
  \AtBeginDocument{%
    \expandafter\ifx\csname tp-#1-#2\endcsname\relax\else
      \immediate\write\@auxout{\string\expandafter\string\gdef\string\csname\space tp-#1-#2\string\endcsname{\csname tp-#1-#2\endcsname}}%
    \fi}}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tpBreak}
%   is a general line break macro intended to be re-defined if
%   necessary without touching LaTeX's kernel page and line breaking
%   macros.
%    \begin{macrocode}
\DeclareRobustCommand{\tpBreak}{\hfill\break}
%    \end{macrocode}
% \end{macro}
%
% \subsection{Content lists}
%
% This part contains macros to ``simplify'' the generation of content
% lists like the table of contents or list of figures/tables, etc.
%
% Entries in the list-files (e.\,g., \lstinline{\jobname.toc},
% \lstinline{\jobname.lof}, etc.) usually contain
% \lstinline{\contentsline} macros that expand to
% \lstinline{l@<level>}.  Whenever a level of Components that are to
% be written into content lists is declared, the package automatically
% generates a \lstinline{\tp@l@<level>} macro for this level of entries.
% The content-baring argument of \lstinline{\tpContentsline} (or
% \lstinline{\tp@l@<level>}, resp.) contains Components.
%
% Once a list file is read, those \lstinline{\tp@l@<level>} macros are
% expanded in two steps. Each entry constitutes a Container in its own
% right. It therefore can have multiple Components. The first step is
% the extraction phase, where the entry's Container is dynamically
% declared, the corresponding properties are initialised, and its
% Components are extracted
%
% \begin{macro}{\tp@init@l@}
%   is a low-level macro used to dynamically define
%   \lstinline{\tp@l@<level>} macros. Optional \#1 is an override for
%   counters that have to be restored, \#2 is the list file ending
%   (raw entries being stored in a file \lstinline{\jobname.#2}), \#3
%   is a number that indicated the nesting depth, \#4 is the nested
%   level's unique name.
%    \begin{macrocode}
\def\tp@init@l@{\tp@opt@empty\@tp@init@l@}%
\def\@tp@init@l@[#1]#2#3#4{%
  \expandafter\ifx\csname c@#2depth\endcsname\relax
    \expandafter\global\expandafter\newcount\csname c@#2depth\endcsname
    \expandafter\global\csname c@#2depth\endcsname=0\relax
  \fi
  \expandafter\tp@restore@init\expandafter{\tp@cur@cont}{#1\if!#1!#2\fi-number-#3-maxwd}%
  \expandafter\tp@restore@init\expandafter{\tp@cur@cont}{#1\if!#1!#2\fi-number-#3-indent}%
  \expandafter\ifx\csname tp@#2@extract@data\endcsname\relax
    \expandafter\let\csname tp@#2@extract@data\endcsname\tp@extract@generic
  \fi
  \expandafter\ifx\csname tp@#2@print@entry\endcsname\relax
    \expandafter\let\csname tp@#2@print@entry\endcsname\tp@print@generic
  \fi
  \expandafter\long\expandafter\gdef\csname tp@l@#4\endcsname##1##2{%
    \ifLuaTeX\suppresslongerror=1\fi
    \expandafter\ifnum \csname c@#2depth\endcsname<#3\relax
    \else
      \bgroup
        \long\def\tpTocLink####1{\hyper@linkstart{link}{\Hy@tocdestname}{####1}\hyper@linkend}%
        \csname tp@#2@extract@data\endcsname{#3}{#4}{##1}{##2}%
        \csname tp@#2@print@entry\endcsname{#4}%
      \egroup
    \fi
    \ifLuaTeX\suppresslongerror=0\fi
  }}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tpContentsline} has two purposes: It re-directs
%   \lstinline{l@<level>} macros to our own version, and it ensures
%   that {\LaTeX} won't break if Components in the content lists
%   contain \lstinline{\par}. In order for the latter to work
%   correctly, however, we need to patch \lstinline{\contentsline} to
%   make it \lstinline{\long}, first.
%    \begin{macrocode}
\AtBeginDocument{%
  \begingroup\toks0=\expandafter{\contentsline{#1}{#2}{#3}{#4}}
  \edef\x{\endgroup\long\def\noexpand\contentsline##1##2##3##4{\the\toks0 }}\x
}
\long\def\tpContentsline#1#2#3#4{\bgroup\csletcs{l@#1}{tp@l@#1}\contentsline{#1}{#2}{#3}{#4}\egroup}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tp@extract@generic}
%    \begin{macrocode}
\def\tp@extract@generic#1#2#3#4{}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tp@print@generic}
%    \begin{macrocode}
\def\tp@print@generic#1{}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tp@expand@l@contents}
%   expands the content of the \lstinline{tp@l@<level>} macro and contains some code
%   to catch and handle standard \LaTeX\ headings. \#1 is the content
%   of the \lstinline{tp@l@-macro}, \#2 is the namespace, and \#3 is the Component
%   prefix.
%    \begin{macrocode}
\def\tp@expand@l@contents#1#2#3#4{%
  \sbox\z@{\def\numberline##1{\expandafter\gdef\csname tp@#2@#3Number\endcsname{##1}}#1}%
  \ifdim\wd\z@>\z@
    \let\numberline\@gobble%
    \expandafter\xdef\csname tp@#2@#3#4\endcsname{#1}%
  \else
    #1%
  \fi}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tp@format@number}
%   calculates number widths and prepares macros to be used by the
%   user. \#1 is the internal Property prefix, \#2 is the user-level
%   Component prefix, \#3 is the numerical list level.
%    \begin{macrocode}
\def\tp@format@number#1#2#3{%
  \tpSetProperty{#1formatted-number}{}%
  \tpIfComp{#2Number}{%
    \tpSetProperty{#1formatted-number}{%
      \bgroup
        \tpUseProperty{#1title-format}%
        \tpUseProperty{#1number-format}%
        \tpUseComp{#2Number}%
        \tpUseProperty{#1number-sep}%
      \egroup}%
    \sbox\z@{\tpUseProperty{#1formatted-number}}%
  }{%
    \sbox\z@{}%
  }%
  \tp@store@maxwd{#1number-#3-maxwd}{\the\wd\z@}%
  \tpSetValProp{#1number-width-level-max}{\csname tp-heading-#1number-#3-maxwd\endcsname}%
  \tp@store@maxwd{#1number-maxwd}{\the\wd\z@}%
  \tpSetValProp{#1number-width-max}{\csname tp-heading-#1number-#3-maxwd\endcsname}%
  \tpSetValProp{#1number-width}{\the\wd\z@}%
  \tp@get@indent{#1}{#3}%
  \tp@set@hang{#1}%
}
%    \end{macrocode}
% \end{macro}
%
% \subsection{Indentation}
%
% \begin{macro}{\tp@set@hang}
%   determines and sets the hanging indent of a counter. \#1 is the
%   internal Property prefix.
%    \begin{macrocode}
\def\tp@set@hang#1{%
  \tpSetProperty{#1hang-number}{\tpUseProperty{#1formatted-number}}%
  \tpIfProp{#1indent}
    {\ifdim\tpUseProperty{#1indent}<\z@
        \tpSetProperty{#1hang-number}{%
          \hskip\tpUseProperty{#1indent}%
          \hbox to -\tpUseProperty{#1indent}{%
            \tpIfPropVal{#1number-align}{left}{}{\hss}%
            \tpUseProperty{#1formatted-number}%
            \tpIfPropVal{#1number-align}{right}{}{\hss}}}%
      \fi}{}}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tp@det@prev@indent}
%   determines the indent of the next higher level of the
%   list. ``Higher'' meaning hierarchical, i.e. the index is
%   lower. \#1 is the Property prefix, \#2 is the numerical list
%   level.
%    \begin{macrocode}
\def\tp@det@prev@indent#1#2{%
  \@tempcnta\numexpr#2-1\relax
  \ifdim\tpUseProperty{#1indent}<\z@\relax
    \@tempdimb=-\tpUseProperty{#1indent}\relax
  \else
    \@tempdimb=\tpUseProperty{#1indent}\relax
  \fi
  \expandafter\ifx\csname tp-\tp@cur@cont-#1\the\@tempcnta-indent\endcsname\relax
    \@tempdima=\@tempdimb\relax%
  \else
    \@tempdima\dimexpr \csname tp-\tp@cur@cont-#1\the\@tempcnta-indent\endcsname+\@tempdimb\relax
  \fi
  \tp@store@maxwd{#1#2-indent}{\the\@tempdima}%
  \tpSetProperty{#1margin-left}{\csname tp-\tp@cur@cont-#1#2-indent\endcsname}}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tp@store@maxwd}
%   low-level macro to take the csname of an unprefixed dimension and
%   store its value in the aux files iff the previous value of that
%   conrol structure is lower than the current value.
%
%   \#1 is the internal name of the property, \#2
%   is the value.
%    \begin{macrocode}
\def\tp@store@maxwd#1#2{%
  \expandafter\ifx\csname tp-\tp@cur@cont-#1\endcsname\relax
    \immediate\write\@auxout{\string\expandafter\string\gdef\string\csname\space tp-\tp@cur@cont-#1\string\endcsname{#2}}
    \expandafter\xdef\csname tp-\tp@cur@cont-#1\endcsname{#2}%
  \else
    \expandafter\ifdim\csname tp-\tp@cur@cont-#1\endcsname>#2\relax
    \else
      % Store the value in case of <= #2. In case of < instead of <=,
      % used values might alternate between TeX runs due to not
      % having been stored in the run before.
      \immediate\write\@auxout{\string\expandafter\string\gdef\string\csname\space tp-\tp@cur@cont-#1\string\endcsname{#2}}%
      \expandafter\xdef\csname tp-\tp@cur@cont-#1\endcsname{#2}%
    \fi
  \fi}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tp@get@indent}
%   Eventually, write the actually used values for margin-left and
%   indent into the current container's Property list. \#1 is the
%   internal property prefix, \#2 is the numerical list level.
%    \begin{macrocode}
\def\tp@get@indent#1#2{%
  \tpSetPropertyX{int-#1margin-left}{\tpUseProperty{#1margin-left}}%
  \tpSetPropertyX{int-#1indent}{\tpUseProperty{#1indent}}%
  \expandafter\let\expandafter\tp@tmp@numwd\csname tp-\tp@cur@cont-#1number-#2-maxwd\endcsname\relax
  \tpIfPropVal{int-#1margin-left}{auto-global}
    {\tpSetProperty{#1indent}{-\csname tp-\tp@cur@cont-#1number-maxwd\endcsname}%
     \tpSetProperty{#1margin-left}{\csname tp-\tp@cur@cont-#1number-maxwd\endcsname}}
    {\tpIfPropVal{int-#1margin-left}{auto}
       {\tpIfPropVal{int-#1indent}{auto}
          {\tpSetProperty{#1indent}{-\tp@tmp@numwd}}
          {\tpIfProp{int-#1indent}
             {\tpSetPropertyX{#1indent}{\tpUseProperty{int-#1indent}}}
             {\tpSetProperty{#1indent}{\z@}}}%
        \tp@det@prev@indent{#1}{#2}}
       {\tpIfProp{int-#1margin-left}
          {\tpIfPropVal{int-#1indent}{auto}
            {\tpSetProperty{#1indent}{-\tp@tmp@numwd}}
            {\tpIfProp{int-#1indent}
               {\tpSetPropertyX{#1indent}{\tpUseProperty{int-#1indent}}}
               {\tpSetProperty{#1indent}{\z@}}}}
         {\tpIfPropVal{int-#1indent}{auto}
            {\tpSetProperty{#1margin-left}{\tp@tmp@numwd}%
             \tpSetProperty{#1indent}{-\tp@tmp@numwd}}
            {\tpIfProp{int-#1indent}
               {\tpSetPropertyX{#1indent}{\tpUseProperty{int-#1indent}}%
                \tpSetProperty{#1margin-left}{\z@}}
               {\tpSetProperty{#1indent}{\z@}%
                \tpSetProperty{#1margin-left}{\z@}}}}}}%
    }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Label generation and selection}
%
% \begin{macro}{\tpSetBabelLabel} defined a language-dependent string
%   macro for German and English varieties.  \#1 is the language, \#2
%   is the internal reference name, and \#3 is the language specific
%   label.
%    \begin{macrocode}
\def\tpSetBabelLabel#1#2#3{%
  \def\@lang{#1}%
  \expandafter\def\expandafter\@tempa\expandafter{\expandafter\def\csname #2name\endcsname{#3}}%
  \ifdefstring\@lang{german}{%
    \expandafter\addto\expandafter\captionsgerman\expandafter{\@tempa}%
    \expandafter\addto\expandafter\captionsngerman\expandafter{\@tempa}%
  }{%
    \ifdefstring\@lang{english}{%
      \expandafter\addto\expandafter\captionsbritish\expandafter{\@tempa}%
      \expandafter\addto\expandafter\captionsUKenglish\expandafter{\@tempa}%
      \expandafter\addto\expandafter\captionsenglish\expandafter{\@tempa}%
      \expandafter\addto\expandafter\captionsamerican\expandafter{\@tempa}%
      \expandafter\addto\expandafter\captionsUSenglish\expandafter{\@tempa}%
    }{}}}
%    \end{macrocode}
% \end{macro}
% \subsection{Link Generation}
%
% \begin{macro}{\tpCompLink} creates a hyperlink with the target taken
%   from Component with the name \#1 and the label \#2.
%    \begin{macrocode}
\def\tpCompLink#1#2{%
  \protected@edef\@argi{\expandonce{\tpUseComp{#1}}}%
  \expandafter\href\expandafter{\@argi}{#2}%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\tpPageLabel} enables referencing pages via \pageref
%   by using \phantomsection to create a hyperref anchor for label \#1.
%    \begin{macrocode}
\def\tpPageLabel#1{\phantomsection\label{#1}}
%    \end{macrocode}
% \end{macro}
%    \begin{macrocode}[gobble=1]
%</common>
%    \end{macrocode}
