% \chapter{cocotex.dtx}
%
%    \begin{macrocode}[numbers=none,gobble=1]
%<*class>
%    \end{macrocode}
% This is the main class file for the {\CoCoTeX} Framework.
%
% File Preamble
%    \begin{macrocode}
%%
%% Common document class for \textit{xerif} projects.
%%
%% Maintainer: p.schulz@le-tex.de
%%
%% lualatex  -  texlive > 2019
%%
\NeedsTeXFormat{LaTeX2e}[2020/06/01]
\ProvidesClass{cocotex}
    [\filedate \fileversion cocotex]
%    \end{macrocode}
%
%
% \section{Hard-coded requirements}
%
%    \begin{macrocode}
\RequirePackage{xkeyval}
%    \end{macrocode}
% First,we set the default hook label for all {\CoCoTeX}
% modules. Since some modules are ``stand-alone'', we do this in all
% kernel files, i.e., here, in \lstinline{coco-kernel} and in
% \lstinline{coco-common}.
%    \begin{macrocode}
\SetDefaultHookLabel{cc}
%    \end{macrocode}
%
%
% \section{Class Options}
%
% \subsection{Options passed down to mandatory standard {\LaTeX} packages}
%
% The \lstinline{main} option controls the document's main language
% passed down to the \lstinline{babel} package.
%    \begin{macrocode}
\DeclareOptionX{main}{\PassOptionsToPackage{\CurrentOption}{babel}}
%    \end{macrocode}
% The next two options are used for Spanish documents:
%    \begin{macrocode}
\DeclareOption{es-noindentfirst}{\PassOptionsToPackage{es-noindentfirst}{babel}}
\DeclareOption{es-noshorthands}{\PassOptionsToPackage{es-noshorthands}{babel}}
%    \end{macrocode}
% By default, we disable babel shorthands as its character encoding
% may interfere with some {\CoCoTeX} functionality.
%    \begin{macrocode}
\PassOptionsToPackage{shorthands=off}{babel}
%    \end{macrocode}
% The \lstinline{no-hyperindex} switch prevents \lstinline{hyperref}
% from auto-linking index terms.
%    \begin{macrocode}
\DeclareOption{no-hyperindex}{\global\let\cc@no@hyperindex\relax}
%    \end{macrocode}
%
% \subsection{The Publication Type}
%
% The option \lstinline{pubtype} (short for ``publication type'') has
% four possible values: \lstinline{mono}, \lstinline{collection},
% \lstinline{journal}, and \lstinline{article}.  \lstinline{mono}
% (also the default when no \lstinline{pubtype} is given) and
% \lstinline{collection} are used to switch between single and
% multiple contributor documents; \lstinline{collection} and
% \lstinline{journal} to switch between one-time text collections and
% periodicals, respectively. All three types implicitly load the
% {\LaTeX} standard class \lstinline{book}.
%
% \lstinline{collection} is used when the document's components
% (i.\,e., chapters) are contributed by different authors like
% collections or proceedings. \lstinline{journal} is used for
% collections where each contribution is accompanied by a myriad of
% meta data. \lstinline{mono} stands for monographs, i.e., whole books
% that are written by the same author(s).
%
% The publicaten type \lstinline{article} is intended for single
% articles of a journal. It loads the {\LaTeX} standard class
% \lstinline{article}.
%    \begin{macrocode}
\newif\ifcollection \collectionfalse
\newif\ifarticle    \articlefalse
\newif\ifmonograph  \monographfalse
\newif\ifjournal    \journalfalse
\define@choicekey{cocotex.cls}{pubtype}[\cc@pub@type\nr]{collection,article,journal,mono}{%
  \ifcase\nr\relax% collection
    \global\collectiontrue
  \or% article
    \global\articletrue
  \or% journal
    \global\journaltrue
  \else% monograph
    \global\monographtrue
  \fi
}
%    \end{macrocode}
%
% \subsection{User-Level Macro Names  and Debugging Options}
%
% Next, we capture all options that needs passing down to the various {\CoCoTeX} modules.
%
% The prefix option is used to define prefix for user level macros. If
% {\CoCoTeX} is used in conjunction with \textit{xerif}, this will be
% \lstinline{tp}.
%    \begin{macrocode}
\DeclareOptionX{prefix}{\PassOptionsToPackage{\CurrentOption}{coco-kernel}}
%    \end{macrocode}
% The debugging options: trigger \lstinline{debug} will toggle on
% debug mode, valued \lstinline{debug-domain} will determine the kinds
% of messages printed to the console.
%    \begin{macrocode}
\DeclareOptionX{debug}{\PassOptionsToPackage{\CurrentOption}{coco-kernel}}
\DeclareOptionX{debug-domain}{\PassOptionsToPackage{\CurrentOption}{coco-kernel}}
%    \end{macrocode}
% The \lstinline{silent} options attempts to supress most unneccessary
% messages sent to the shell.
%    \begin{macrocode}
\DeclareOptionX{silent}{\PassOptionsToPackage{\CurrentOption}{coco-common}}
%    \end{macrocode}
% The \lstinline{nofigs} options disables the
% \lstinline{\includegraphics} command and prints a placeholder
% instead. This is inteded to ensure successful LaTeX runs even thou
% image files may be missing.
%    \begin{macrocode}
\DeclareOptionX{nofigs}{\PassOptionsToPackage{\CurrentOption}{coco-floats}}
%    \end{macrocode}
%
%
% \subsection{Accessibility Features}
%
% The next two options enable accessibility features and control the
% PDF standard used: \lstinline{a11y} generates PDF version 1.7,
% \lstinline{a11y20} generates PDF version 2.0.
% \begin{macro}{\if@cc@pdf@two} is a switch that indicates PDF version
%     2.0 is used (\texttt{true}) instead of 1.x (\texttt{false}).
%    \begin{macrocode}
\newif\if@cc@pdf@two \@cc@pdf@twofalse
%    \end{macrocode}
% \end{macro}
% {\CoCoTeX} supports two accessibility standards, PDF/UA-1 and
% PDF/UA-2. If the \texttt{a11y}\index{a11y} class option is set,
% PDF/UA-1 is produced, if \texttt{a11y20}\index{a11y20} is set,
% PDF/UA-2 is produced.
%    \begin{macrocode}
\ExplSyntaxOn
  \DeclareOptionX{a11y}{%
    \sys_ensure_backend:
    \pdf_version_gset:n{1.7}%
    \PassOptionsToPackage{init}{coco-accessibility}}%
  \DeclareOptionX{a11y20}{%
    \global\@cc@pdf@twotrue
    \sys_ensure_backend:
    \pdf_version_gset:n{2.0}%
    \PassOptionsToPackage{init}{coco-accessibility}}%
\ExplSyntaxOff
%    \end{macrocode}
% \lstinline{lang-id} is the ISO-639/2 identifier of the document's
% main language. This is neccessary for the PDF meta data and
% \textit{different} from the main language name given via the
% \lstinline{main} key.
%    \begin{macrocode}
\DeclareOptionX{lang-id}{%
  \PassOptionsToPackage{\CurrentOption}{coco-accessibility}%
  \PassOptionsToPackage{\CurrentOption}{coco-title}%
}
%    \end{macrocode}
% If set, \lstinline{nodetree} triggers extensive debgging output from the ltpdfa package.
%    \begin{macrocode}
\DeclareOptionX{nodetree}{\PassOptionsToPackage{\CurrentOption}{coco-accessibility}}
%    \end{macrocode}
% \lstinline{showspaces} enables whitespaces processed by ltpdfa to be visible in the PDF.
%    \begin{macrocode}
\DeclareOptionX{showspaces}{\PassOptionsToPackage{\CurrentOption}{coco-accessibility}}
%    \end{macrocode}
% \lstinline{no-spaces} disabes whitespace processing by \lstinline{ltpdfa}.
%    \begin{macrocode}
\DeclareOptionX{no-spaces}{\PassOptionsToPackage{\CurrentOption}{coco-accessibility}}
%    \end{macrocode}
% \lstinline{no-paras} disables paragraph tagging via \lstinline{ltpdfa}.
%    \begin{macrocode}
\DeclareOptionX{no-paras}{\PassOptionsToPackage{\CurrentOption}{coco-accessibility}}
%    \end{macrocode}
% \lstinline{no-compress} disables PDF compression; useful for debugging the PDF source code.
%    \begin{macrocode}
\DeclareOptionX{no-compress}{\let\cc@no@pdf@compression\relax}
%    \end{macrocode}
% \lstinline{color-enc} serves two purposes: First, it controls the
% colour space for colours invoked via the \lstinline{xcolor}
% package. Second, it controls which default ICC colour profile is
% embedded into the PDF file when no explicit ICC profile is provided
% by the user.
%    \begin{macrocode}
\DeclareOptionX{color-enc}{\PassOptionsToPackage{\CurrentOption}{coco-common}}
%    \end{macrocode}
%
%
% \subsection{Options for Other {\CoCoTeX} Modules}
%
% \subsubsection{Options for the Script Module}
%
% The option \lstinline{usescript} takes a comma-separated list of
% language names. Languages that use non-latin scripts may require
% fallback fonts when the script's glyphs are not included in the main
% font. This option tells the coco-scripts module which fonts to
% pre-load. The values in is also passed down to \lstinline{\babelprovide}.
%    \begin{macrocode}
\DeclareOptionX{usescript}{\PassOptionsToPackage{\CurrentOption}{coco-script}}
%    \end{macrocode}
%
%
% \subsubsection{Options for the Notes Module}
%
% The switch \lstinline{endnotes} triggers all footnotes to be
% collected and printed in a specific endnote section at the end of
% the document.
%    \begin{macrocode}
\DeclareOptionX{endnotes}{\PassOptionsToPackage{\CurrentOption}{coco-notes}}
%    \end{macrocode}
% The switch \lstinline{ennotoc} triggers headings in the Endnotes
% area to \textit{not} appear in the table of contents (read:
% \textit{e}nd-\textit{n}otes-\textit{no}-\textit{toc}).
%    \begin{macrocode}
\DeclareOptionX{ennotoc}{\PassOptionsToPackage{\CurrentOption}{coco-notes}}
%    \end{macrocode}
% The switch \lstinline{endnoteswithchapters} triggers chapter
% headings to be repeated as subsections within the endnote section.
%    \begin{macrocode}
\DeclareOptionX{endnoteswithchapters}{\PassOptionsToPackage{\CurrentOption}{coco-notes}}
%    \end{macrocode}
% The switch \lstinline{resetnotesperchapter} causes foot- and endnote
% counters to be reset at the beginning of each new chapter.
%    \begin{macrocode}
\DeclareOptionX{resetnotesperchapter}{\PassOptionsToPackage{\CurrentOption}{coco-notes}}
%    \end{macrocode}
%
%
% \subsubsection{Remaining Options}
%
% All other unprocessed options are passed down to the base document
% class:
%    \begin{macrocode}
\DeclareOptionX*{\PassOptionsToClass{\CurrentOption}{article}}
\DeclareOptionX*{\PassOptionsToClass{\CurrentOption}{book}}
%    \end{macrocode}
% Process the options.
%    \begin{macrocode}
\ProcessOptionsX
%    \end{macrocode}
%
%
% \section{Class Hook}
%
% \begin{macro}{\ccAfterClassHook}
%   Almost all user level macros have been renamed when {\CoCoTeX}
%   became independent from \lstinline{xerif}. In order to ensure
%   backwards-compatibility, we define a hook that holds aliases from
%   the old names to the new ones. Those are defined in the
%   \lstinline{coco-xerif} module (which is \textit{not} part of
%   {\CoCoTeX} itself, but included in \lstinline{xerif}'s common
%   files\footnote{see
%   \url{https://github.com/transpect/xerif-latex}}). The hook is
%   expanded at the very end of the \lstinline{cocotex.cls} file. The
%   \lstinline{coco-xerif} module itself is loaded early in
%   \lstinline{coco-common.sty}.
%    \begin{macrocode}
\def\ccAfterClassHook{}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ccToggleCountedConditionalsHook} is a hook to ensure
%   backwards-compatibility within the processing of Counted Components
%    \begin{macrocode}
\def\ccToggleCountedConditionalsHook{}%
%    \end{macrocode}
% \end{macro}
%
%
% \section{Internal Requirement}
%
%    \begin{macrocode}
\RequirePackage{coco-common}
%    \end{macrocode}
%
%
% \section{Loading and Adjusting Underlying DocumentClass}
%
% All publication types supported by {\CoCoTeX} are based on one of
% \LaTeX's default classes \lstinline{article}
% (when \lstinline{pubtype=article}) or \lstinline{book} (all other
% pubtypes):
%    \begin{macrocode}
\ifarticle
  \LoadClass[10pt,a4paper]{article}
\else
  \LoadClass[10pt,a4paper]{book}
\fi
%    \end{macrocode}
%
%
% \subsection{General Typography}
%
% Offsets are the removed to make all values relative to the upper left corner of the page to ease maintainance.
%    \begin{macrocode}
\voffset-1in\relax
\hoffset-1in\relax
%    \end{macrocode}
% Automatted typesetting needs some room to play
%    \begin{macrocode}
\emergencystretch=2em
%    \end{macrocode}
% and strong restrictions:
%    \begin{macrocode}
\frenchspacing
\clubpenalty10000
\widowpenalty10000
%    \end{macrocode}
%
%
% \subsubsection{Empty Pagestyle}
%
% Page style without any headers or footers
%    \begin{macrocode}
\def\ps@empty{%
  \let\@oddhead\@empty
  \let\@evenhead\@empty
  \let\@oddfoot\@empty
  \let\@evenfoot\@empty
}
%    \end{macrocode}
%
%
% \subsubsection{Vacancy Pages}
%
% Vacancy pages in general need to have page style \lstinline{empty}:
%    \begin{macrocode}
\def\cleardoublepage{\clearpage\if@twoside \ifodd\c@page\else
    \hbox{}\thispagestyle{empty}\newpage\if@twocolumn\hbox{}\newpage\fi\fi\fi}
%    \end{macrocode}
%
%
% \subsubsection{Book Parts}
%
% The macros \UsageMacro{\frontmatter}, \UsageMacro{\mainmatter} and
% \UsageMacro{\backmatter} are re-defined to make front- and
% backmatter components in book derivates distinguish-able.
%
% Note that we need to (re-)define the conditionals outside, because
% \lstinline{\if@mainmatter} is undefined for articles and the
% coditional inside the definition of \lstinline{\mainmatter}
% disturbs the outer \lstinline{\ifarticle}.
%    \begin{macrocode}
\newif\if@frontmatter  \@frontmatterfalse
\newif\if@mainmatter   \@mainmatterfalse
\newif\if@backmatter   \@backmatterfalse
\ifarticle\else
  \renewcommand\frontmatter{%
    \cleardoublepage
    \cchResetNesting
    \global\@mainmatterfalse
    \global\@backmatterfalse
    \global\@frontmattertrue
    \ccaVstructStart{Frontmatter}%
    \pagenumbering{arabic}}

  \renewcommand\mainmatter{%
    \if@frontmatter\ccaVstructEnd{Frontmatter}\fi
    \cleardoublepage
    \cchResetNesting
    \global\@frontmatterfalse
    \global\@backmatterfalse
    \global\@mainmattertrue
    \ccaVstructStart{Mainmatter}%
  }

  \renewcommand\backmatter{%
    \if@mainmatter\ccaStructEnd{Mainmatter}\fi%
    \cleardoublepage
    \cchResetNesting
    \global\@mainmatterfalse
    \global\@frontmatterfalse
    \global\@backmattertrue
    \ccaVstructStart{Backmatter}%
  }
\fi% \ifarticle
%    \end{macrocode}
%
%
% \section{Loading other {\CoCoTeX} Modules}
%
% \subsection{coco-accessibility}
%
% We load the accessibility module always, even if we don't end up
% actually using it.
%    \begin{macrocode}
\RequirePackage{coco-accessibility}
%    \end{macrocode}
%
% \subsection{coco-script}
%
% Inclusion of the script module which also loads the babel package
%    \begin{macrocode}
\ifLuaTeX
\RequirePackage{coco-script}
\else
\RequirePackage{babel}
\fi
%    \end{macrocode}
%
%
% \subsection{coco-headings}
%
%    \begin{macrocode}
\RequirePackage{coco-headings}
%    \end{macrocode}
%
%
% \subsection{coco-floats}
%
% Inclusion of the float module
%    \begin{macrocode}
\RequirePackage{coco-floats}
%    \end{macrocode}
%
%
% \subsection{coco-title}
%
% Inclusion of the title page module
%    \begin{macrocode}
\RequirePackage{coco-title}
%    \end{macrocode}
%
%
% \subsection{coco-notes}
%
% Inclusion of the end-/footnotes module
%    \begin{macrocode}
\RequirePackage{coco-notes}
%    \end{macrocode}
% Fallback, in case, \lstinline{coco-headings.sty} is not loaded for
% some reason.
%
%
% \section{Further Hard Dependencies}
%
% \subsection{Index}
%
% Some more hard dependencies:
%    \begin{macrocode}
\RequirePackage{index}
\makeindex
%    \end{macrocode}
%
%
% \subsection{Hyperref}
%
%    \begin{macrocode}
\RequirePackage{hyperref}
%    \end{macrocode}
% Finally, some \lstinline{hyperref} settings
%
% \TODO{check, which of those are better placed inside the local
% publisher's styles}
%    \begin{macrocode}
\hypersetup{%
%    \end{macrocode}
% first, we want links to be breakable
%    \begin{macrocode}
    breaklinks%
%    \end{macrocode}
% and the table of contents not to be automatically linked, as this
% causes problems with the \lstinline{ltpdfa} package and we add the
% links via the \lstinline{coco-common} module, anyways.
%    \begin{macrocode}
   ,linktoc=none%
%    \end{macrocode}
% pdf broders are controlled via the coco-frame module, if necessary
%    \begin{macrocode}
   ,pdfborder={0 0 0}%
%    \end{macrocode}
% The next option causes hyperref to calculate the encoding of
% DocumentInfo and other direct-to-PDF data (bookmarks, etc.)
% automatically
%    \begin{macrocode}
   ,pdfencoding=unicode
   ,unicode=true
%    \end{macrocode}
% Bookmarks are numbered by default.
%    \begin{macrocode}
   ,bookmarksnumbered=true%
   ,bookmarksopen=false%
   ,hyperindex=\ifx\cc@no@hyperindex\relax false\else true\fi
}
%    \end{macrocode}
% Disables PDF compression when the \lstinline{no-compress} document
% option is set.
%    \begin{macrocode}
\ifx\cc@no@pdf@compression\relax
  \ifx\pdfobjcompresslevel\@undefined
    \edef\pdfobjcompresslevel{\pdfvariable objcompresslevel}%
  \fi
  \pdfcompresslevel=0
  \pdfobjcompresslevel=0
\fi
%    \end{macrocode}
%
%
% \section{End of Document Class Hook}
%
% Expanding backwards-compatibility aliases from the coco-xerif module:
%    \begin{macrocode}
\ccAfterClassHook
%    \end{macrocode}
%    \begin{macrocode}[numbers=none,gobble=1]
%</class>
%    \end{macrocode}
